[
  {
    "name": "ActionSheet",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "动作面板",
    "importStatement": "import { ActionSheet } from '@alifd/meet';",
    "body": "\n# ActionSheet\n\n从底部弹出的模态框，提供和当前场景相关的 2 个以上的操作动作, 内置固定的展示样式、不支持特别灵活的修改。\n\n API\n\n### ActionSheet\n\n| 名称             | 说明                 | 类型                                 | 默认值 |\n| :--------------- | :------------------- | :----------------------------------- | :----- |\n| visible          | 是否显示             | Boolean                              | false  |\n| message          | 提示信息             | String                               |        |\n| options          | 按钮列表             | string[] or ActionSheetOptionProps[] |        |\n| fullWidth        | 是否为全屏宽         | boolean                              | true   |\n| destructiveIndex | 危险操作 index 标记  | number                               | -      |\n| disabledIndexes  | 禁用操作 index 标记  | number[]                             | []     |\n| showCancel       | 是否展示底部取消按钮 | Boolean                              | true   |\n| cancelText       | 自定义取消按钮文案   | string                               |        |\n| maskClosable     | 遮罩是否可关闭       | Boolean                              | true   |\n| Align            | 文本对齐方式         | Enum                                 | center |\n| onClick          | 点击时的回调         | (option, index) => void              |        |\n| onClose          | 当关闭时             | (reason) => void                     |        |\n\n> onClose 回调， reason 返回值为 `mask | cancel | option index`\n\n### ActionSheetOptionProps\n\n| 名称      | 说明                                     | 类型   | 默认值 |\n| :-------- | :--------------------------------------- | :----- | :----- |\n| text      | 按钮上的文字                             | string |        |\n| icon      | icon 图表地址                            | string |        |\n| badge     | 徽章文案                                 | string |        |\n| badgeType | 徽章类型<br/>可选值<br/> `dot`, `normal` | Enum   | normal |\n\n### 快捷调用\n\n#### ActionSheet.show(options, callback): { close: () => void }\n\n```js\nActionSheet.show({\n  message: '请选择操作',\n  options: ['操作 1', '操作 2', '操作 3', '操作 4'],\n  destructiveIndex: 2,\n  disabledIndexes: [0, 1],\n  onClick: (option, index) => {\n    console.log('selected:', option, index);\n  },\n  onClose: (reason) => {\n    console.log('closed by ', reason);\n  },\n});\n```\n\n### CSS Variables\n\n| 名称                                        | 说明             | 默认值                                   |\n| :------------------------------------------ | :--------------- | :--------------------------------------- |\n| `--action-sheet-padding-lr`                 | 左右内间距       | `--s-2`                                  |\n| `--action-sheet-padding-tb`                 | 上下内间距       | `--s-4`                                  |\n| `--action-sheet-bg-color`                   | 背景色           | `--color-fill1-1`                        |\n| `--action-sheet-msg-font-color`             | 提示信息字体颜色 | `--color-text1-3`                        |\n| `--action-sheet-msg-font-size`              | 提示信息字体大小 | `--p-body-1-icon-size`                   |\n| `--action-sheet-msg-padding`                | 提示信息内间距   | `--s-4`                                  |\n| `--action-sheet-option-border-color`        | 提示信息字体颜色 | `--color-line1-3`                        |\n| `--action-sheet-option-font-color`          | 选择项字体颜色   | `--box-normal-solid-text-color`          |\n| `--action-sheet-option-font-color-hover`    | 选择项字体颜色   | `--box-normal-solid-text-color-hover`    |\n| `--action-sheet-option-font-color-disabled` | 选择项字体颜色   | `--box-normal-solid-text-color-disabled` |\n| `--action-sheet-option-font-size`           | 选择项字体大小   | `--font-size-caption`                    |\n| `--action-sheet-option-padding`             | 可选项内间距     | `--s-4`                                  |\n| `--action-sheet-gap-height`                 | 取消按钮顶部间隙 | `--s-2`                                  |\n| `--action-sheet-icon-corner`                | icon 圆角        | `--corner-1`                             |\n| `--action-sheet-corner`                     | 非全屏宽时圆角   | `--corner-3`                             |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { ActionSheet, Radio, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nfunction Demo() {\n  const [open1, setOpen1] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const [open4, setOpen4] = useState(false);\n  const [open5, setOpen5] = useState(false);\n  const [hasBadge, setBadge] = useState(false);\n  const [badgeType, setBadgeType] = useState('normal');\n  const [align, setAlign] = useState('left');\n\n  const close = (key, message) => {\n    if (key === 'open1') {\n      setOpen1(false);\n    } else if (key === 'open2') {\n      setOpen2(false);\n    } else if (key === 'open3') {\n      setOpen3(false);\n    } else if (key === 'open4') {\n      setOpen4(false);\n    } else if (key === 'open5') {\n      setOpen5(false);\n    }\n\n    if (message) {\n      console.log(`closed by ${message}`);\n    }\n  };\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content btn-container\">\n        <Button type=\"primary\" className=\"btn\" onClick={() => setOpen1(true)}>\n          Simple ActionSheet\n        </Button>\n      </View>\n\n      <Text className=\"demo-title\">Badge</Text>\n      <View className=\"demo-content btn-container\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">Show Badge</View>\n          <View className=\"demo-item-content\">\n            <Radio.Group\n              direction=\"hoz\"\n              value={hasBadge}\n              dataSource={[\n                {\n                  label: 'yes',\n                  value: true,\n                },\n                {\n                  label: 'no',\n                  value: false,\n                },\n              ]}\n              onChange={(v) => {\n                setBadge(v);\n              }}\n            />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">Badge Type</View>\n          <View className=\"demo-item-content\">\n            <Radio.Group\n              direction=\"hoz\"\n              value={badgeType}\n              disabled={!hasBadge}\n              dataSource={['normal', 'dot']}\n              onChange={(v) => {\n                setBadgeType(v);\n              }}\n            />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">Align</View>\n          <View className=\"demo-item-content\">\n            <Radio.Group\n              direction=\"hoz\"\n              value={align}\n              dataSource={['left', 'center', 'right']}\n              onChange={(v) => {\n                setAlign(v);\n              }}\n            />\n          </View>\n        </View>\n        <Button type=\"primary\" className=\"btn\" onClick={() => setOpen2(true)}>\n          Open Action Sheet\n        </Button>\n        <Button type=\"primary\" className=\"btn\" onClick={() => setOpen3(true)}>\n          Open Action Sheet with Badge\n        </Button>\n      </View>\n\n      <Text className=\"demo-title\">Callback</Text>\n      <View className=\"demo-content btn-container\">\n        <Button type=\"primary\" className=\"btn\" onClick={() => setOpen4(true)}>\n          Callback\n        </Button>\n      </View>\n      <Text className=\"demo-title\">FullWidth</Text>\n      <View className=\"demo-content btn-container\">\n        <Button type=\"primary\" className=\"btn\" onClick={() => setOpen5(true)}>\n          non-fullWidth ActionSheet\n        </Button>\n      </View>\n\n      <ActionSheet\n        visible={open1}\n        message={'Normal Example'}\n        onClose={() => close('open1')}\n        options={['option 1', 'option 2', 'option 3']}\n        disabledIndexes={[0]}\n        destructiveIndex={2}\n      />\n\n      <ActionSheet\n        visible={open2}\n        message={'请选择'}\n        onClose={() => {\n          close('open2');\n        }}\n        align={align}\n        options={[\n          {\n            text: 'option 1',\n            badge: hasBadge ? 99 : '',\n            badgeType,\n          },\n          {\n            text: 'option 2',\n            badge: hasBadge ? 'NEW' : '',\n            badgeType,\n          },\n        ]}\n        disabledIndexes={[0]}\n      />\n\n      <ActionSheet\n        visible={open3}\n        message={'请选择，一段很长的提示一段很长的提示一段很长的提示'}\n        onClose={(r) => {\n          close('open3');\n        }}\n        disabledIndexes={[2]}\n        align={align}\n        options={[\n          {\n            text: '操作 1',\n            icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n            badge: hasBadge ? '99' : '',\n            badgeType,\n          },\n          {\n            text: '操作 2',\n            icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n            badge: hasBadge ? '99' : '',\n            badgeType,\n          },\n          {\n            text: '操作 3',\n            icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n            badge: hasBadge ? 'NEW' : '',\n            badgeType,\n          },\n        ]}\n      />\n\n      <ActionSheet\n        visible={open4}\n        message={'Callback Example'}\n        onClick={(option, index) => {\n          console.log('option click', { option, index });\n        }}\n        onClose={(reason) => {\n          console.log('close reasion:', reason);\n          close('open4');\n        }}\n        options={['option 1', 'option 2', 'option 3']}\n      />\n\n      <ActionSheet\n        className=\"actionsheet-nofullwidth\"\n        message={'需自定义 corner 样式 '}\n        visible={open5}\n        fullWidth={false}\n        onClose={() => close('open5')}\n        options={['option 1', 'option 2', 'option 3']}\n      />\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { ActionSheet, Button, ConfigProvider } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nfunction Demo() {\n  const [open1, setOpen1] = useState(false);\n  const [open2, setOpen2] = useState(false);\n\n  const close = (key, message) => {\n    if (key === 'open1') {\n      setOpen1(false);\n    } else if (key === 'open2') {\n      setOpen2(false);\n    }\n\n    if (message) console.log(`close by ${message}`);\n  };\n  return (\n    <ConfigProvider\n      locale={{\n        ActionSheet: {\n          cancel: 'Отменить',\n        },\n      }}\n    >\n      <View>\n        <Text className=\"demo-title\">Locale</Text>\n        <View className=\"demo-content btn-container\">\n          <Button type=\"primary\" className=\"btn\" onClick={() => setOpen1(true)}>\n            多语言\n          </Button>\n\n          <Button type=\"primary\" className=\"btn\" onClick={() => setOpen2(true)}>\n            自定义\n          </Button>\n        </View>\n\n        <ActionSheet\n          visible={open1}\n          message={'Locale Example'}\n          onClose={() => close('open1')}\n          options={['option 1', 'option 2', 'option 3']}\n        />\n\n        <ActionSheet\n          visible={open2}\n          message={'Custom Cancel Example'}\n          onClose={() => close('open2')}\n          options={['option 1', 'option 2', 'option 3']}\n          cancelText={'业务自定取消'}\n        />\n      </View>\n    </ConfigProvider>\n  );\n}\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { ActionSheet, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst openActionSheet = () => {\n  ActionSheet.show({\n    message: '请选择操作',\n    options: ['操作 1', '操作 2', '操作 3', '操作 4'],\n    destructiveIndex: 2,\n    disabledIndexes: [0, 1],\n    onClick: (option, index) => {\n      console.log('selected:', option, index);\n    },\n    onClose: (reason) => {\n      console.log('closed by ', reason);\n    },\n  });\n};\n\nconst openActionSheet2 = () => {\n  ActionSheet.show({\n    message: '请选择操作',\n    options: [\n      {\n        text: 'option 1',\n        icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n      },\n      {\n        text: 'option 2',\n        icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n        badge: '99',\n      },\n      {\n        text: 'option 3',\n        icon: 'https://gw.alicdn.com/tfs/TB1DVLobSslXu8jSZFuXXXg7FXa-48-48.svg',\n        badgeType: 'dot',\n      },\n    ],\n    cancelText: '我再想想',\n    destructiveIndex: 2,\n    disabledIndexes: [0, 1],\n    onClick: (option, index) => {\n      console.log('selected:', option, index);\n    },\n    onClose: (reason) => {\n      console.log('closed by ', reason);\n    },\n  });\n};\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">Quick Call</Text>\n      <View className=\"demo-content btn-container\">\n        <Button\n          type=\"primary\"\n          model=\"outline\"\n          className=\"btn\"\n          onClick={() => {\n            openActionSheet();\n          }}\n        >\n          open ActionSheet\n        </Button>\n\n        <Button\n          type=\"primary\"\n          model=\"outline\"\n          className=\"btn\"\n          onClick={() => {\n            openActionSheet2();\n          }}\n        >\n          open ActionSheet with icon\n        </Button>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Avatar",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "头像",
    "importStatement": "import { Avatar } from '@alifd/meet';",
    "body": "\n# Avatar\n\n头像组件\n\n API\n\n### Props\n\n| 名称    | 说明                                                    | 类型             | 默认值 |\n| :------ | :------------------------------------------------------ | :--------------- | :----- |\n| size    | 头像的大小，可选值：`small`, `medium`, `large`          | Enum             | medium |\n| shape   | 头像的形状，可选值：`circle`, `square`                  | Enum             | circle |\n| src     | 图片类头像的资源地址                                    | String           | -      |\n| alt     | 图像无法显示时的 alt 替代文本                           | String           | -      |\n| srcSet  | 图片类头像响应式资源地址                                | String           | -      |\n| icon    | icon 类头像的图标类型，可设为 Icon 的 type 或 ReactNode | ReactNode/String | -      |\n| onError | 图片加载失败的事件                                      | Function         | -      |\n| onClick | 头像组件的点击事件                                      | Function         | -      |\n\n### CSS Variables\n\n| 名称                        | 说明                                           | 默认值                                |\n| :-------------------------- | :--------------------------------------------- | :------------------------------------ |\n| `--avatar-small-width`      | `small` 尺寸头像宽度                           | `--s-6`                               |\n| `--avatar-small-height`     | `small` 尺寸头像高度                           | `--s-6`                               |\n| `--avatar-medium-width`     | `medium` 尺寸头像宽度                          | `--s-9`                               |\n| `--avatar-medium-height`    | `medium` 尺寸头像高度                          | `--s-9`                               |\n| `--avatar-large-width`      | `large` 尺寸头像宽度                           | `--s-12`                              |\n| `--avatar-large-height`     | `large` 尺寸头像高度                           | `--s-12`                              |\n| `--avatar-small-font-size`  | `small` 尺寸头像字体大小                       | `--p-body-1-font-size`                |\n| `--avatar-medium-font-size` | `medium` 尺寸头像字体大小                      | `--p-body-2-font-size`                |\n| `--avatar-large-font-size`  | `large` 尺寸头像字体大小                       | `--p-subhead-font-size`               |\n| `--avatar-circle-corner`    | `circle` 态头像圆角                            | `--corner-circle`                     |\n| `--avatar-square-corner`    | `square` 态头像圆角                            | `--corner-1`                          |\n| `--avatar-border-color`     | 头像边框颜色                                   | `--box-normal-solid-border-color`     |\n| `--avatar-bg-color`         | 头像背景颜色                                   | `--box-normal-solid-background-color` |\n| `--avatar-font-color`       | 头像字体颜色 ｜`--box-normal-solid-text-color` |\n| `--avatar-icon-color`       | 头像 icon 颜色                                 | `--box-normal-solid-icon-color`       |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Avatar, Icon } from '@alifd/meet';\n\n\nconst URL = 'https://gw.alicdn.com/tfs/TB13_8dhsieb18jSZFvXXaI3FXa-500-500.png';\n\nconst Demo = () => {\n  const icon = <Icon name=\"account\" />;\n\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"small\" src={URL} />\n            <Avatar size=\"small\" shape=\"square\" src={URL} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"medium\" src={URL} />\n            <Avatar size=\"medium\" shape=\"square\" src={URL} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"large\" src={URL} />\n            <Avatar size=\"large\" shape=\"square\" src={URL} />\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">Text</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"small\">牧晟</Avatar>\n            <Avatar size=\"small\" shape=\"square\">\n              MS\n            </Avatar>\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"medium\">牧晟</Avatar>\n            <Avatar size=\"medium\" shape=\"square\">\n              MS\n            </Avatar>\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"large\">牧晟</Avatar>\n            <Avatar size=\"large\" shape=\"square\">\n              MS\n            </Avatar>\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">icon</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"small\" icon={icon} />\n            <Avatar size=\"small\" icon={icon} shape=\"square\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"medium\" icon={icon} />\n            <Avatar size=\"medium\" icon={icon} shape=\"square\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-flex\">\n            <Avatar size=\"large\" icon={icon} />\n            <Avatar size=\"large\" icon={icon} shape=\"square\" />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Badge",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "徽章",
    "importStatement": "import { Badge } from '@alifd/meet';",
    "body": "\n# Badge\n\n图标右上角的红点、数字或者文字。用于告知用户，该区域的状态变化或者待处理任务的数量。\n\n API\n\n### Props\n\n| 名称          | 说明                                                                                  | 类型     | 默认值 |\n| :------------ | :------------------------------------------------------------------------------------ | :------- | :----- |\n| count         | 展示的数字，可以为文字，大于 `overflowCount` 时显示为 `{overflowCount}+`，为 0 时隐藏 | number   |        |\n| overflowCount | 展示封顶的数字值                                                                      | number   | 99     |\n| dot           | 不展示数字，只展示小红点                                                              | boolean  | false  |\n| renderBadge   | 自定义的 badge 渲染函数                                                               | (): node |        |\n| children      | 被包裹的元素，当 children 存在时，badge 将出现在元素的右上方                          | any      |        |\n\n### CSS Variables\n\n| 名称                        | 说明               | 默认值                           |\n| :-------------------------- | :----------------- | :------------------------------- |\n| `--badge-number-size`       | 显示的数字尺寸     | `--s-4`                          |\n| `--badge-number-padding`    | 数字的间隙         | `--s-1`                          |\n| `--badge-number-font-size`  | 数字的字号         | `--font-size-caption`            |\n| `--badge-number-font-color` | 数字的字号         | `--box-primary-solid-text-color` |\n| `--badge-bg-color`          | 徽章背景色         | `--box-warning-text-icon-color`  |\n| `--badge-border-color`      | 边框颜色           | `--color-white`                  |\n| `--badge-border-width`      | 边框宽度           | `--line-3`                       |\n| `--badge-unread-bg-color`   | 未读状态背景颜色   | `--box-warning-text-icon-color`  |\n| `--badge-dot-bg-color`      | 原点状态背景颜色   | `--box-warning-text-icon-color`  |\n| `--badge-dot-size`          | `dot` 时，显示尺寸 | `--s-2`                          |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { List, Badge } from '@alifd/meet';\n\n\nconst Demo = () => {\n  return (\n    <View className=\"badge-demo\">\n      <Text className=\"demo-title\">Badge</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-items\">\n          <View className=\"demo-item\">\n            <View className=\"demo-item-content\">\n              <Badge dot>\n                <View className=\"demo-avatar\" />\n              </Badge>\n            </View>\n            <View className=\"demo-item-name\">dot</View>\n          </View>\n          <View className=\"demo-item\">\n            <View className=\"demo-item-content\">\n              <Badge count=\"100\">\n                <View className=\"demo-avatar\" />\n              </Badge>\n            </View>\n            <View className=\"demo-item-name\">count</View>\n          </View>\n          <View className=\"demo-item\">\n            <View className=\"demo-item-content\">\n              <Badge count=\"NEW\">\n                <View className=\"demo-avatar\" />\n              </Badge>\n            </View>\n            <View className=\"demo-item-name\">new</View>\n          </View>\n          <View className=\"demo-item\">\n            <View className=\"demo-item-content\">\n              <Badge content={<Text style={{ color: 'red', fontSize: '0.40rem', lineHeight: 1 }}>©</Text>}>\n                <View className=\"demo-avatar\" />\n              </Badge>\n            </View>\n            <View className=\"demo-item-name\">custom</View>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">List badge</Text>\n      <View className=\"demo-content\">\n        <List>\n          <List.Item>\n            <List.ItemTitle>Label</List.ItemTitle>\n            <Badge count=\"NEW\" />\n          </List.Item>\n          <List.Item>\n            <List.ItemTitle>Label</List.ItemTitle>\n            <Badge count=\"NEW\" />\n          </List.Item>\n          <List.Item>\n            <List.ItemTitle>Label</List.ItemTitle>\n            <Badge count=\"NEW\" />\n          </List.Item>\n        </List>\n      </View>\n      <Text className=\"demo-title\">Unread badge</Text>\n      <View className=\"demo-content\">\n        <List>\n          <List.Item>\n            <List.ItemMedia>\n              <Badge dot />\n            </List.ItemMedia>\n            <List.ItemTitle>Label</List.ItemTitle>\n          </List.Item>\n          <List.Item>\n            <List.ItemMedia>\n              <Badge dot />\n            </List.ItemMedia>\n            <List.ItemTitle>Label</List.ItemTitle>\n          </List.Item>\n          <List.Item>\n            <List.ItemMedia>\n              <Badge dot />\n            </List.ItemMedia>\n            <List.ItemTitle>Label</List.ItemTitle>\n          </List.Item>\n        </List>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "BreadCrumb",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "面包屑导航",
    "importStatement": "import { BreadCrumb } from '@alifd/meet';",
    "body": "\n# BreadCrumb\n\n面包屑导航\n\n API\n\n### BreadCrumb\n\n| 名称      | 说明                                   | 类型            | 默认值   |\n| :-------- | :------------------------------------- | :-------------- | :------- |\n| size      | 进度条大小，可选值：small medium large | enum            | medium   |\n| disabled  | 禁用点击，面包屑全部禁用               | boolean         | false    |\n| maxNode   | 面包屑最多显示个数，超出部分会被隐藏   | Number          | 100      |\n| separator | 分隔符，可以是文本或 Icon              | RaxNode/String  | -        |\n| children  | 面包屑子节点，需传入 Breadcrumb.Item   | any             | -        |\n| onClick   | 点击节点                               | (index) => void | () => {} |\n\n### Breadcrumb.Item\n\n| 名称     | 说明               | 类型    | 默认值 |\n| :------- | :----------------- | :------ | :----- |\n| disabled | 禁用点击，单个禁用 | boolean | false  |\n\n### CSS Variables\n\n| 名称                              | 说明                             | 默认值            |\n| :-------------------------------- | :------------------------------- | :---------------- |\n| `--breadcrumb-disabled`           | 禁用时的颜色                     | `--color-text1-1` |\n| `--breadcrumb-active`             | 激活时的颜色                     | `--color-text1-3` |\n| `--breadcrumb-normal`             | 正常的颜色                       | `--color-text1-4` |\n| `--breadcrumb-small-font-size`    | size 为 small 时的字体大小       | `28rpx`           |\n| `--breadcrumb-medium-font-size`   | size 为 medium 时的字体大小      | `--s-4`           |\n| `--breadcrumb-large-font-size`    | size 为 large 时的字体大小       | `36rpx`           |\n| `--breadcrumb-arrow-small-size`   | size 为 small 时的箭头分隔符大小 | `10rpx`           |\n| `--breadcrumb-arrow-medium-size`  | size 为 small 时的箭头分隔符大小 | `12rpx`           |\n| `--breadcrumb-arrow-large-size`   | size 为 small 时的箭头分隔符大小 | `14rpx`           |\n| `--breadcrumb-small-spacing`      | size 为 small 时的间隔大小       | `--s-1`           |\n| `--breadcrumb-medium-spacing`     | size 为 small 时的间隔大小       | `10rpx`           |\n| `--breadcrumb-large-spacing`      | size 为 small 时的间隔大小       | `12rpx`           |\n| `--breadcrumb-margin-small-size`  | size 为 small 时的间距大小       | `--s-1`           |\n| `--breadcrumb-margin-medium-size` | size 为 small 时的间距大小       | `10rpx`           |\n| `--breadcrumb-margin-large-size`  | size 为 small 时的间距大小       | `12rpx`           |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { BreadCrumb, Message } from '@alifd/meet';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">BreadCrumb</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\">\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Size</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\">\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"medium\">\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"large\">\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\" disabled>\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\">\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item disabled>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">MaxNode</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\" maxNode={3}>\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>四级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>五级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Separator</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb size=\"small\" maxNode={3} separator={'/'}>\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>四级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>五级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">onClick</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <BreadCrumb\n              size=\"small\"\n              onClick={(index) => {\n                Message.success(`点击了第 ${index + 1} 项`);\n              }}\n            >\n              <BreadCrumb.Item>一级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>二级菜单</BreadCrumb.Item>\n              <BreadCrumb.Item>三级菜单</BreadCrumb.Item>\n            </BreadCrumb>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Button",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "按钮",
    "importStatement": "import { Button } from '@alifd/meet';",
    "body": "\n# Button\n\n点击后会触发一个操作。\n\n API\n\n### Button\n\n| 名称      | 说明                                                                       | 类型   | 默认值   |\n| :-------- | :------------------------------------------------------------------------- | :----- | :------- |\n| type      | 按钮的强调程度类型 <br>可选值：<br> `normal`,`primary`,`warning`,`inverse` | enum   | `normal` |\n| size      | 按钮大小 <br>可选值：<br> `small`, `medium`, `large` 尺寸                  | enum   | `medium` |\n| model     | 按钮展示样式 <br>可选值：<br> `solid`, `outline`, `text`                   | enum   | `solid`  |\n| fullWidth | 按钮是否为占满一行                                                         | bool   | false    |\n| loading   | 是否加载态（loading 效果）                                                 | bool   | false    |\n| disabled  | 是否禁用态                                                                 | bool   | false    |\n| className | 按钮的 className                                                           | string |          |\n| children  | 按钮的子元素，可以是 icon 或者文字                                         | any    |          |\n| onClick   | 按钮被点击时回调                                                           | func   |          |\n\n### CSS Variables\n\n| 名称                                                 | 说明                                    | 默认值                                            |\n| :--------------------------------------------------- | :-------------------------------------- | :------------------------------------------------ |\n| `--button-small-font-size`                           | `small` 尺寸按钮字体大小                | `--p-body-1-font-size`                            |\n| `--button-small-padding`                             | `small` 尺寸按钮边距                    | `--box-small-padding`                             |\n| `--button-small-spacing`                             | `small` 尺寸按钮内部元素间隙            | `--box-small-spacing`                             |\n| `--button-small-border-width`                        | `small` 尺寸按钮边框宽度                | `--box-small-border-width`                        |\n| `--button-small-corner`                              | `small` 尺寸按钮圆角                    | `--box-small-border-radius`                       |\n| `--button-medium-font-size`                          | `medium` 尺寸按钮字体大小               | `--p-body-2-font-size`                            |\n| `--button-medium-padding`                            | `medium` 尺寸按钮边距                   | `--box-medium-padding`                            |\n| `--button-medium-spacing`                            | `medium` 尺寸按钮内部元素间隙           | `--box-medium-spacing`                            |\n| `--button-medium-border-width`                       | `medium` 尺寸按钮边框宽度               | `--box-medium-border-width`                       |\n| `--button-medium-corner`                             | `medium` 尺寸按钮圆角                   | `--box-medium-border-radius`                      |\n| `--button-large-font-size`                           | `large` 尺寸按钮字体大小                | `--p-subhead-font-size`                           |\n| `--button-large-padding`                             | `large` 尺寸按钮边距                    | `--box-large-padding`                             |\n| `--button-large-spacing`                             | `large` 尺寸按钮内部元素间隙            | `--box-large-spacing`                             |\n| `--button-large-border-width`                        | `large` 尺寸按钮边框宽度                | `--box-large-border-width`                        |\n| `--button-large-corner`                              | `large` 尺寸按钮圆角                    | `--box-large-border-radius`                       |\n| `--button-normal-solid-border-color`                 | `normal/solid` 态按钮边框颜色           | `--box-normal-solid-border-color`                 |\n| `--button-normal-solid-border-color-active`          | `normal/solid` 态按钮边框颜色激活       | `--box-normal-solid-border-color-active`          |\n| `--button-normal-solid-border-color-disabled`        | `normal/solid` 态按钮边框颜色禁用       | `--box-normal-solid-border-color-disabled`        |\n| `--button-normal-solid-background-color`             | `normal/solid` 态按钮背景颜色           | `--box-normal-solid-background-color`             |\n| `--button-normal-solid-background-color-active`      | `normal/solid` 态按钮背景颜色激活       | `--box-normal-solid-background-color-active`      |\n| `--button-normal-solid-background-color-disabled`    | `normal/solid` 态按钮背景颜色禁用       | `--box-normal-solid-background-color-disabled`    |\n| `--button-normal-solid-font-color`                   | `normal/solid` 态按钮字体颜色           | `--box-normal-solid-text-color`                   |\n| `--button-normal-solid-font-color-active`            | `normal/solid` 态按钮字体颜色激活       | `--box-normal-solid-text-color-active`            |\n| `--button-normal-solid-font-color-disabled`          | `normal/solid` 态按钮字体颜色禁用       | `--box-normal-solid-text-color-disabled`          |\n| `--button-normal-outline-border-color`               | `normal/outline` 态按钮边框边框颜色     | `--box-normal-outline-border-color`               |\n| `--button-normal-outline-border-color-active`        | `normal/outline` 态按钮边框边框颜色激活 | `--box-normal-outline-border-color-active`        |\n| `--button-normal-outline-border-color-disabled`      | `normal/outline` 态按钮边框边框颜色禁用 | `--box-normal-outline-border-color-disabled`      |\n| `--button-normal-outline-background-color`           | `normal/outline` 态按钮边框背景颜色     | `--box-normal-outline-background-color`           |\n| `--button-normal-outline-background-color-active`    | `normal/outline` 态按钮边框背景颜色激活 | `--box-normal-outline-background-color-active`    |\n| `--button-normal-outline-background-color-disabled`  | `normal/outline` 态按钮边框背景颜色禁用 | `--box-normal-outline-background-color-disabled`  |\n| `--button-normal-outline-font-color`                 | `normal/outline` 态按钮边框字体颜色     | `--box-normal-outline-text-color`                 |\n| `--button-normal-outline-font-color-active`          | `normal/outline` 态按钮边框字体颜色激活 | `--box-normal-outline-text-color-active`          |\n| `--button-normal-outline-font-color-disabled`        | `normal/outline` 态按钮边框字体颜色禁用 | `--box-normal-outline-text-color-disabled`        |\n| `--button-normal-text-border-color`                  | `normal/text` 态按钮边框颜色            | `--box-normal-text-border-color`                  |\n| `--button-normal-text-border-color-active`           | `normal/text` 态按钮边框颜色激活        | `--box-normal-text-border-color-active`           |\n| `--button-normal-text-border-color-disabled`         | `normal/text` 态按钮边框颜色禁用        | `--box-normal-text-border-color-disabled`         |\n| `--button-normal-text-background-color`              | `normal/text` 态按钮背景颜色            | `--box-normal-text-background-color`              |\n| `--button-normal-text-background-color-active`       | `normal/text` 态按钮背景颜色激活        | `--box-normal-text-background-color-active`       |\n| `--button-normal-text-background-color-disabled`     | `normal/text` 态按钮背景颜色禁用        | `--box-normal-text-background-color-disabled`     |\n| `--button-normal-text-font-color`                    | `normal/text` 态按钮字体颜色            | `--box-normal-text-text-color`                    |\n| `--button-normal-text-font-color-active`             | `normal/text` 态按钮字体颜色激活        | `--box-normal-text-text-color-active`             |\n| `--button-normal-text-font-color-disabled`           | `normal/text` 态按钮字体颜色禁用        | `--box-normal-text-text-color-disabled`           |\n| `--button-primary-solid-border-color`                | `primary/solid` 态按钮边框颜色          | `--box-primary-solid-border-color`                |\n| `--button-primary-solid-border-color-active`         | `primary/solid` 态按钮边框颜色激活      | `--box-primary-solid-border-color-active`         |\n| `--button-primary-solid-border-color-disabled`       | `primary/solid` 态按钮边框颜色禁用      | `--box-primary-solid-border-color-disabled`       |\n| `--button-primary-solid-background-color`            | `primary/solid` 态按钮背景颜色          | `--box-primary-solid-background-color`            |\n| `--button-primary-solid-background-color-active`     | `primary/solid` 态按钮背景颜色激活      | `--box-primary-solid-background-color-active`     |\n| `--button-primary-solid-background-color-disabled`   | `primary/solid` 态按钮背景颜色禁用      | `--box-primary-solid-background-color-disabled`   |\n| `--button-primary-solid-font-color`                  | `primary/solid` 态按钮字体颜色          | `--box-primary-solid-text-color`                  |\n| `--button-primary-solid-font-color-active`           | `primary/solid` 态按钮字体颜色激活      | `--box-primary-solid-text-color-active`           |\n| `--button-primary-solid-font-color-disabled`         | `primary/solid` 态按钮字体颜色禁用      | `--box-primary-solid-text-color-disabled`         |\n| `--button-primary-outline-border-color`              | `primary/outline` 态按钮边框颜色        | `--box-primary-outline-border-color`              |\n| `--button-primary-outline-border-color-active`       | `primary/outline` 态按钮边框颜色激活    | `--box-primary-outline-border-color-active`       |\n| `--button-primary-outline-border-color-disabled`     | `primary/outline` 态按钮边框颜色禁用    | `--box-primary-outline-border-color-disabled`     |\n| `--button-primary-outline-background-color`          | `primary/outline` 态按钮背景颜色        | `--box-primary-outline-background-color`          |\n| `--button-primary-outline-background-color-active`   | `primary/outline` 态按钮背景颜色激活    | `--box-primary-outline-background-color-active`   |\n| `--button-primary-outline-background-color-disabled` | `primary/outline` 态按钮背景颜色禁用    | `--box-primary-outline-background-color-disabled` |\n| `--button-primary-outline-font-color`                | `primary/outline` 态按钮字体颜色        | `--box-primary-outline-text-color`                |\n| `--button-primary-outline-font-color-active`         | `primary/outline` 态按钮字体颜色激活    | `--box-primary-outline-text-color-active`         |\n| `--button-primary-outline-font-color-disabled`       | `primary/outline` 态按钮字体颜色禁用    | `--box-primary-outline-text-color-disabled`       |\n| `--button-primary-text-border-color`                 | `primary/text` 态按钮边框颜色           | `--box-primary-text-border-color`                 |\n| `--button-primary-text-border-color-active`          | `primary/text` 态按钮边框颜色激活       | `--box-primary-text-border-color-active`          |\n| `--button-primary-text-border-color-disabled`        | `primary/text` 态按钮边框颜色禁用       | `--box-primary-text-border-color-disabled`        |\n| `--button-primary-text-background-color`             | `primary/text` 态按钮背景颜色           | `--box-primary-text-background-color`             |\n| `--button-primary-text-background-color-active`      | `primary/text` 态按钮背景颜色激活       | `--box-primary-text-background-color-active`      |\n| `--button-primary-text-background-color-disabled`    | `primary/text` 态按钮背景颜色禁用       | `--box-primary-text-background-color-disabled`    |\n| `--button-primary-text-font-color`                   | `primary/text` 态按钮字体颜色           | `--box-primary-text-text-color`                   |\n| `--button-primary-text-font-color-active`            | `primary/text` 态按钮字体颜色激活       | `--box-primary-text-text-color-active`            |\n| `--button-primary-text-font-color-disabled`          | `primary/text` 态按钮字体颜色禁用       | `--box-primary-text-text-color-disabled`          |\n| `--button-warning-solid-border-color`                | `warning/solid` 态按钮边框颜色          | `--box-warning-solid-border-color`                |\n| `--button-warning-solid-border-color-active`         | `warning/solid` 态按钮边框颜色激活      | `--box-warning-solid-border-color-active`         |\n| `--button-warning-solid-border-color-disabled`       | `warning/solid` 态按钮边框颜色禁用      | `--box-warning-solid-border-color-disabled`       |\n| `--button-warning-solid-background-color`            | `warning/solid` 态按钮背景颜色          | `--box-warning-solid-background-color`            |\n| `--button-warning-solid-background-color-active`     | `warning/solid` 态按钮背景颜色激活      | `--box-warning-solid-background-color-active`     |\n| `--button-warning-solid-background-color-disabled`   | `warning/solid` 态按钮背景颜色禁用      | `--box-warning-solid-background-color-disabled`   |\n| `--button-warning-solid-font-color`                  | `warning/solid` 态按钮字体颜色          | `--box-warning-solid-text-color`                  |\n| `--button-warning-solid-font-color-active`           | `warning/solid` 态按钮字体颜色激活      | `--box-warning-solid-text-color-active`           |\n| `--button-warning-solid-font-color-disabled`         | `warning/solid` 态按钮字体颜色禁用      | `--box-warning-solid-text-color-disabled`         |\n| `--button-warning-outline-border-color`              | `warning/outline` 态按钮边框颜色        | `--box-warning-outline-border-color`              |\n| `--button-warning-outline-border-color-active`       | `warning/outline` 态按钮边框颜色激活    | `--box-warning-outline-border-color-active`       |\n| `--button-warning-outline-border-color-disabled`     | `warning/outline` 态按钮边框颜色禁用    | `--box-warning-outline-border-color-disabled`     |\n| `--button-warning-outline-background-color`          | `warning/outline` 态按钮背景颜色        | `--box-warning-outline-background-color`          |\n| `--button-warning-outline-background-color-active`   | `warning/outline` 态按钮背景颜色激活    | `--box-warning-outline-background-color-active`   |\n| `--button-warning-outline-background-color-disabled` | `warning/outline` 态按钮背景颜色禁用    | `--box-warning-outline-background-color-disabled` |\n| `--button-warning-outline-font-color`                | `warning/outline` 态按钮字体颜色        | `--box-warning-outline-text-color`                |\n| `--button-warning-outline-font-color-active`         | `warning/outline` 态按钮字体颜色激活    | `--box-warning-outline-text-color-active`         |\n| `--button-warning-outline-font-color-disabled`       | `warning/outline` 态按钮字体颜色禁用    | `--box-warning-outline-text-color-disabled`       |\n| `--button-warning-text-border-color`                 | `warning/text` 态按钮边框颜色           | `--box-warning-text-border-color`                 |\n| `--button-warning-text-border-color-active`          | `warning/text` 态按钮边框颜色激活       | `--box-warning-text-border-color-active`          |\n| `--button-warning-text-border-color-disabled`        | `warning/text` 态按钮边框颜色禁用       | `--box-warning-text-border-color-disabled`        |\n| `--button-warning-text-background-color`             | `warning/text` 态按钮背景颜色           | `--box-warning-text-background-color`             |\n| `--button-warning-text-background-color-active`      | `warning/text` 态按钮背景颜色激活       | `--box-warning-text-background-color-active`      |\n| `--button-warning-text-background-color-disabled`    | `warning/text` 态按钮背景颜色禁用       | `--box-warning-text-background-color-disabled`    |\n| `--button-warning-text-font-color`                   | `warning/text` 态按钮字体颜色           | `--box-warning-text-text-color`                   |\n| `--button-warning-text-font-color-active`            | `warning/text` 态按钮字体颜色激活       | `--box-warning-text-text-color-active`            |\n| `--button-warning-text-font-color-disabled`          | `warning/text` 态按钮字体颜色禁用       | `--box-warning-text-text-color-disabled`          |\n| `--button-inverse-solid-border-color`                | `inverse/solid` 态按钮边框颜色          | `--box-inverse-solid-border-color`                |\n| `--button-inverse-solid-border-color-active`         | `inverse/solid` 态按钮边框颜色激活      | `--box-inverse-solid-border-color-active`         |\n| `--button-inverse-solid-border-color-disabled`       | `inverse/solid` 态按钮边框颜色禁用      | `--box-inverse-solid-border-color-disabled`       |\n| `--button-inverse-solid-background-color`            | `inverse/solid` 态按钮背景颜色          | `--box-inverse-solid-background-color`            |\n| `--button-inverse-solid-background-color-active`     | `inverse/solid` 态按钮背景颜色激活      | `--box-inverse-solid-background-color-active`     |\n| `--button-inverse-solid-background-color-disabled`   | `inverse/solid` 态按钮背景颜色禁用      | `--box-inverse-solid-background-color-disabled`   |\n| `--button-inverse-solid-font-color`                  | `inverse/solid` 态按钮字体颜色          | `--box-inverse-solid-text-color`                  |\n| `--button-inverse-solid-font-color-active`           | `inverse/solid` 态按钮字体颜色激活      | `--box-inverse-solid-text-color-active`           |\n| `--button-inverse-solid-font-color-disabled`         | `inverse/solid` 态按钮字体颜色禁用      | `--box-inverse-solid-text-color-disabled`         |\n| `--button-inverse-outline-border-color`              | `inverse/outline` 态按钮边框颜色        | `--box-inverse-outline-border-color`              |\n| `--button-inverse-outline-border-color-active`       | `inverse/outline` 态按钮边框颜色激活    | `--box-inverse-outline-border-color-active`       |\n| `--button-inverse-outline-border-color-disabled`     | `inverse/outline` 态按钮边框颜色禁用    | `--box-inverse-outline-border-color-disabled`     |\n| `--button-inverse-outline-background-color`          | `inverse/outline` 态按钮背景颜色        | `--box-inverse-outline-background-color`          |\n| `--button-inverse-outline-background-color-active`   | `inverse/outline` 态按钮背景颜色激活    | `--box-inverse-outline-background-color-active`   |\n| `--button-inverse-outline-background-color-disabled` | `inverse/outline` 态按钮背景颜色禁用    | `--box-inverse-outline-background-color-disabled` |\n| `--button-inverse-outline-font-color`                | `inverse/outline` 态按钮字体颜色        | `--box-inverse-outline-text-color`                |\n| `--button-inverse-outline-font-color-active`         | `inverse/outline` 态按钮字体颜色激活    | `--box-inverse-outline-text-color-active`         |\n| `--button-inverse-outline-font-color-disabled`       | `inverse/outline` 态按钮字体颜色禁用    | `--box-inverse-outline-text-color-disabled`       |\n| `--button-inverse-text-border-color`                 | `inverse/text` 态按钮边框颜色           | `--box-inverse-text-border-color`                 |\n| `--button-inverse-text-border-color-active`          | `inverse/text` 态按钮边框颜色激活       | `--box-inverse-text-border-color-active`          |\n| `--button-inverse-text-border-color-disabled`        | `inverse/text` 态按钮边框颜色禁用       | `--box-inverse-text-border-color-disabled`        |\n| `--button-inverse-text-background-color`             | `inverse/text` 态按钮背景颜色           | `--box-inverse-text-background-color`             |\n| `--button-inverse-text-background-color-active`      | `inverse/text` 态按钮背景颜色激活       | `--box-inverse-text-background-color-active`      |\n| `--button-inverse-text-background-color-disabled`    | `inverse/text` 态按钮背景颜色禁用       | `--box-inverse-text-background-color-disabled`    |\n| `--button-inverse-text-font-color`                   | `inverse/text` 态按钮字体颜色           | `--box-inverse-text-text-color`                   |\n| `--button-inverse-text-font-color-active`            | `inverse/text` 态按钮字体颜色激活       | `--box-inverse-text-text-color-active`            |\n| `--button-inverse-text-font-color-disabled`          | `inverse/text` 态按钮字体颜色禁用       | `--box-inverse-text-text-color-disabled`          |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst types = ['normal', 'primary', 'warning', 'inverse'];\nconst models = ['solid', 'outline', 'text'];\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  return (\n    <View>\n      {types.map((type) => {\n        return (\n          <View key={type}>\n            <Text className=\"demo-title\">{type}</Text>\n            {models.map((model) => {\n              return (\n                <View key={type + model} className={`demo-content demo-content--${type}`}>\n                  <Text className=\"body-1\">{model}</Text>\n                  <View className={`button-row button-row-${type}`}>\n                    {sizes.map((size) => {\n                      return (\n                        <Button key={`button-${type}-${model}-${size}`} size={size} model={model} type={type}>\n                          {size}\n                        </Button>\n                      );\n                    })}\n                  </View>\n                  <View className={`button-row button-row-${type}`}>\n                    {sizes.map((size) => {\n                      return (\n                        <Button\n                          key={`button-${type}-${model}-${size}-disabled`}\n                          size={size}\n                          disabled\n                          model={model}\n                          type={type}\n                        >\n                          {size}\n                        </Button>\n                      );\n                    })}\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst { Group } = Button;\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">group</Text>\n      <View className=\"demo-content\">\n        <Button.Group model=\"outline\">\n          <Button>按钮1</Button>\n          <Button>按钮2</Button>\n          <Button>按钮3</Button>\n        </Button.Group>\n      </View>\n      <View className=\"demo-content\">\n        <Button.Group size=\"small\" model=\"outline\">\n          <Button>按钮1</Button>\n          <Button>按钮2</Button>\n          <Button>按钮3</Button>\n        </Button.Group>\n      </View>\n      <View className=\"demo-content\">\n        <Button.Group>\n          <Button>按钮1</Button>\n          <Button>按钮2</Button>\n          <Button>按钮3</Button>\n        </Button.Group>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button } from '@alifd/meet';\nimport View from 'rax-view';\n\n\nconst Demo = () => {\n  return (\n    <View className=\"app\">\n      <Button type=\"primary\" size=\"large\" fullWidth>\n        FullWidth Button\n      </Button>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst types = ['normal', 'primary', 'warning', 'inverse'];\nconst models = ['solid', 'outline', 'text'];\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  return (\n    <View>\n      {types.map((type) => {\n        return (\n          <View key={type}>\n            <Text className=\"demo-title\">{type}</Text>\n            {models.map((model) => {\n              return (\n                <View key={type + model} className={`demo-content demo-content--${type}`}>\n                  <Text className=\"body-1\">{model}</Text>\n                  <View className={`button-row button-row-${type}`}>\n                    {sizes.map((size) => {\n                      return (\n                        <Button key={`button-${type}-${model}-${size}`} size={size} model={model} type={type} loading>\n                          {size}\n                        </Button>\n                      );\n                    })}\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst types = ['normal', 'primary', 'warning', 'inverse'];\nconst models = ['solid', 'outline', 'text'];\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  return (\n    <View className=\"app\">\n      {types.map((type) => {\n        return (\n          <View key={type}>\n            <Text className=\"demo-title\">{type}</Text>\n            {models.map((model) => {\n              return (\n                <View key={type + model} className={`demo-content demo-content--${type}`}>\n                  <Text className=\"body-1\">{model}</Text>\n                  <View className={`button-row button-row-${type}`}>\n                    {sizes.map((size) => {\n                      return (\n                        <Button key={`button-${type}-${model}-${size}`} size={size} model={model} type={type}>\n                          <Icon name=\"add\" />\n                          btn\n                        </Button>\n                      );\n                    })}\n                  </View>\n                  <View className={`button-row button-row-${type}`}>\n                    {sizes.map((size) => {\n                      return (\n                        <Button key={`button-${type}-${model}-${size}-disabled`} size={size} model={model} type={type}>\n                          btn\n                          <Icon name=\"arrow-right\" />\n                        </Button>\n                      );\n                    })}\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Calendar",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "日历",
    "importStatement": "import { Calendar } from '@alifd/meet';",
    "body": "\n# Calendar\n\n按照日历形式展示数据\n\n API\n\n### Props\n\n| 属性            | 含义                    | 类型                                                                    | 默认值                                                                                        |\n| --------------- | ----------------------- | ----------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |\n| value           | 当前值                  | Date                                                                    |                                                                                               |\n| defaultValue    | 初始默认值              | Date                                                                    | new Date()                                                                                    |\n| shape           | 日历类型                | string 枚举，详细见 ShapeType                                           | 'panel'                                                                                       |\n| mode            | 显示模式                | string 枚举，详细见 ModeType                                            | 'month'                                                                                       |\n| validRange      | 日期显示区间            | [Date, Date]                                                            | [new Date(2000, 0, 1, 0, 0, 0, 0), new Date(NOW.getFullYear() + 20, 11, 31, 23, 59, 59, 999)] |\n| onSelect        | 点击数据发生变化回调    | (value: Date) => void 或 <br> (value: [Date,Date]) => void(rang 模式下) |                                                                                               |\n| disabledDate    | 禁用日期                | (value: Date) => boolean                                                |                                                                                               |\n| onModeChange    | 日历显示模式发生变化    | (mode: string) => void                                                  |                                                                                               |\n| dateCellRender  | 自定义 dateCell 的渲染  | (value: Date) => RaxNode                                                |                                                                                               |\n| monthCellRender | 自定义 monthCell 的渲染 | (value: Date) => RaxNode                                                |                                                                                               |\n\n### ShapeType\n\n```typescript\nexport enum ShapeType {\n  card = 'card',\n  fullscreen = 'fullscreen',\n  panel = 'panel',\n  range = 'range',\n}\n```\n\n### ModeType\n\n```typescript\nexport enum ModeType {\n  month = 'month',\n  year = 'year',\n}\n```\n\n### LocaleType\n\n```typescript\nexport interface LocaleType {\n  /**\n   * 周列表\n   */\n  weekdays?: string[];\n  /**\n   * 月列表\n   */\n  months?: string[];\n  /**\n   * 年\n   */\n  year?: string;\n  /**\n   * 月\n   */\n  month?: string;\n  /**\n   * 日\n   */\n  day?: string;\n}\n```\n\n### CSS Variables\n\n| 名称                                               | 说明                                                   | 默认值                                             |\n| :------------------------------------------------- | :----------------------------------------------------- | :------------------------------------------------- |\n| `--calendar-head-select-border-color`              | `card/fullscreen`下头部分割线颜色                      | `--color-line1-3`                                  |\n| `--calendar-head-select-padding`                   | `card/fullscreen`下头部 padding 值                     | `--s-2`                                            |\n| `--calendar-head-normal-background-color`          | `panel/range`下头部背景色                              | `--color-brand-3`                                  |\n| `--calendar-head-normal-line-height`               | `panel/range`下头部 line-height                        | `--s-12`                                           |\n| `--calendar-head-normal-title-color`               | `panel/range`下头部文字 color                          | `--color-white`                                    |\n| `--calendar-head-normal-title-size`                | `panel/range`下头部文字尺寸                            | `--color-white`                                    | `--p-body-2-font-size` |\n| `--calendar-head-normal-icon-color`                | `panel/range`下头部 icon 颜色                          | `--color-white`                                    |\n| `--calendar-head-normal-icon-size`                 | `panel/range`下头部 icon 尺寸                          | `--p-body-2-font-size`                             |\n| `--calendar-content-padding-vertical`              | 日历内容区域 top、bottom padding                       | `--s-5`                                            |\n| `--calendar-content-padding-horizon`               | 日历内容区域 left、right padding                       | `--s-3`                                            |\n| `--calendar-content-top-margin-bottom`             | `month` mode 下提示和下面内容区域的 margin             | `--s-5`                                            |\n| `--calendar-content-top-line-height`               | `month` mode 下提示行的 line-height                    | `--s-5`                                            |\n| `--calendar-content-top-item-size`                 | `month` mode 下提示行文字 size                         | `--p-body-2-font-size`                             |\n| `--calendar-content-top-item-color`                | `month` mode 下提示行文字 颜色                         | `--color-text1-2`                                  |\n| `--calendar-content-top-item-color`                | `month` mode 下提示行文字 颜色                         | `--color-text1-2`                                  |\n| `--calendar-cell-year-padding-top`                 | `year` mode 下 cell 的 padding-top                     | `--s-4`                                            |\n| `--calendar-cell-year-padding-left`                | `year` mode 下 cell 的 padding-left                    | `--s-2`                                            |\n| `--calendar-cell-year-height`                      | `year` mode 下 cell 的 height                          | `--s-20`                                           |\n| `--calendar-cell-year-margin-horizon`              | `year` mode 下 cell 的 margin-left/margin-right        | `--s-1`                                            |\n| `--calendar-cell-range-container-background-color` | `range` shape 下选中区间 cell 背景色                   | `--color-help-1`                                   |\n| `--calendar-cell-disabled-text-color`              | cell disabled 下的文字颜色                             | `--color-text1-1`                                  |\n| `--calendar-cell-selected-primary-color`           | cell selected 下的主颜色                               | `--color-brand-3`                                  |\n| `--calendar-cell-year-normal-background-color`     | `year` mode 下一般状态 cell 的背景色                   | `--color-white`                                    |\n| `--calendar-cell-year-disabled-background-color`   | `year` mode 下 disabled 状态 cell 的背景色             | `--color-white`                                    |\n| `--calendar-cell-year-selected-background-color`   | `year` mode 下被选中状态下背景色                       | `--calendar-cell-range-container-background-color` |\n| `--calendar-cell-year-normal-text-color`           | `year` mode 下一般状态 cell 的文字颜色                 | `--color-black`                                    |\n| `--calendar-cell-year-disabled-text-color`         | `year` mode 下 disabled 状态 cell 的文字颜色           | `--calendar-cell-disabled-text-color`              |\n| `--calendar-cell-year-selected-text-color`         | `year` mode 下 selected 状态 cell 的文字颜色           | `--calendar-cell-selected-primary-colors`          |\n| `--calendar-cell-year-normal-line-color`           | `year` mode 下一般状态顶部线条颜色                     | `--color-line1-3`                                  |\n| `--calendar-cell-year-disabled-line-color`         | `year` mode 下 disabled 状态顶部线条颜色               | `--color-line1-3`                                  |\n| `--calendar-cell-year-selected-line-color`         | `year` mode 下 selected 状态顶部线条颜色               | `--calendar-cell-selected-primary-color`           |\n| `--calendar-cell-year-font-size`                   | `year` mode 下 cell 文本 font-size                     | `--p-body-2-font-size`                             |\n| `--calendar-cell-normal-background-color`          | `month` mode 下一般状态 cell 的背景色                  | `--color-white`                                    |\n| `--calendar-cell-disabled-background-color`        | `month` mode 下 disabled 状态 cell 的背景色            | `--color-white`                                    |\n| `--calendar-cell-selected-background-color`        | `month` mode 下 selected 状态 cell 的背景色            | `--calendar-cell-selected-primary-color`           |\n| `--calendar-cell-normal-text-color`                | `month` mode 下 一般 状态 cell 的文字颜色              | `--color-black`                                    |\n| `--calendar-cell-disabled-text-color`              | `month` mode 下 一般 状态 disabled 的文字颜色          | `--calendar-cell-disabled-text-color`              |\n| `--calendar-cell-selected-text-color`              | `month` mode 下 一般 状态 selected 的文字颜色          | `--color-white`                                    |\n| `--calendar-cell-height`                           | `month` mode 下 cell 的高度                            | `--s-8`                                            |\n| `--calendar-head-title-month-date-picker-width`    | `card/fullscreen` `month` mode 下头部 data-picker 宽度 | `--s-30`                                           |\n| `--calendar-head-title-year-date-picker-width`     | `card/fullscreen` `year` mode 下头部 data-picker 宽度  | `--s-24`                                           |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Calendar } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [value, updateValue] = useState(new Date());\n  const [rangeValue, updateRangeValue] = useState([new Date(2020, 8, 4), new Date(2020, 8, 20)]);\n  const [fullscreenValue, updateFullscreenValue] = useState(new Date(2020, 8, 7));\n  const [cardValue, updateCardValue] = useState(new Date(2020, 9, 18));\n  const [modeV, updateMode] = useState('year');\n\n  const maxDate = new Date(2021, 10, 7);\n  const minDate = new Date(2019, 7, 6);\n  const localeType = {\n    weekdays: ['sun', 'mon', 'tus', 'thi', 'fou', 'fir', 'sat'],\n    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],\n    year: '年',\n    month: '月',\n    day: '日',\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Panel Calendar</Text>\n      <View className=\"demo-content\">\n        <Calendar\n          shape=\"panel\"\n          value={value}\n          validRange={[minDate, maxDate]}\n          onSelect={(v) => updateValue(v)}\n          locale={localeType}\n        />\n      </View>\n      <Text className=\"demo-title\">Range Calendar</Text>\n      <View className=\"demo-content\">\n        <Calendar\n          shape=\"range\"\n          value={rangeValue}\n          validRange={[minDate, maxDate]}\n          locale={localeType}\n          onSelect={(v) => {\n            updateRangeValue(v);\n          }}\n        />\n      </View>\n      <Text className=\"demo-title\">Card Calendar</Text>\n      <View className=\"demo-content\">\n        <Calendar\n          shape=\"card\"\n          mode={modeV}\n          value={cardValue}\n          validRange={[minDate, maxDate]}\n          locale={localeType}\n          onSelect={(v) => {\n            updateCardValue(v);\n          }}\n          onModeChange={(v) => {\n            console.log('onModeChange, v:' + v);\n            updateMode(v);\n          }}\n        />\n      </View>\n      <Text className=\"demo-title\">Fullscreen Calendar</Text>\n      <View className=\"demo-content\">\n        <Calendar\n          shape=\"fullscreen\"\n          value={fullscreenValue}\n          validRange={[minDate, maxDate]}\n          locale={localeType}\n          onSelect={(v) => {\n            updateFullscreenValue(v);\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "CascaderSelect",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "级联选择",
    "importStatement": "import { CascaderSelect } from '@alifd/meet';",
    "body": "\n# CascaderSelect\n\n级联选择框，用于树形结构数据选择。 目前移动端级联选择只支持单选。\n\n API\n\n### Props\n\n| 名称             | 说明                                                              | 类型                                            | 默认值 |\n| :--------------- | :---------------------------------------------------------------- | :---------------------------------------------- | :----- |\n| placeholder      | 选择框的提示文案                                                  | string                                          |        |\n| value            | 已选择路径数组（受控）                                            | any[]                                           |        |\n| defaultValue     | 默认选择的路径数组（非受控）                                      | any[]                                           |        |\n| hasClear         | 是否展示清除按钮                                                  | Boolean                                         | false  |\n| disabled         | 是否被禁用                                                        | bool                                            | false  |\n| readOnly         | 是否为只读态                                                      | Boolean                                         | false  |\n| size             | 尺寸 <br/> 可选值： <br/> `small`, `medium`,`large`               | Enum                                            | medium |\n| align            | 对齐方式 <br/> 可选值： <br/> `left`, `right`                     | Enum                                            | left   |\n| loadData         | 异步加载                                                          | `(item)=>Promise<any>`                          |        |\n| rootTipText      | 深度大于 3 时，导航条根节点提示文案                               | String                                          | 首页   |\n| seperator        | 分隔字符串                                                        | String                                          | `/`    |\n| dataSource       | 数据源， 参加下方说明                                             | `Array<object>`                                 | []     |\n| isPreview        | 是否为预览态                                                      | Boolean                                         | false  |\n| renderPreview    | 自定义预览样式, `value` 为已选中路径 `[{label:string,value:any}]` | `(value)=>RaxNode`                              |        |\n| previewClassName | 预览态自定义样式类                                                | string                                          |        |\n| previewStyle     | 预览态自定义样式                                                  | CSS Properties                                  |        |\n| onClear          | 点击清除按钮回调                                                  | `()=>void`                                      |        |\n| onChange         | 数据变动之后的回调                                                | `(value:any, data:object, extra:object)=> void` |        |\n\n> onChange 中的参数举例：\n\n```js\nvalue = 2976;\ndata = { value: '2976', label: '高陵县' };\nextra.selectedPath = [\n  { value: '2974', label: '西安' },\n  { value: '2976', label: '高陵县' },\n];\n```\n\n#### dataSource\n\n```js\nconst dataSource = [\n  {\n    value: '2974',\n    label: '西安',\n    children: [\n      { value: '2975', label: '西安市', disabled: true }, // 通过disabled 指定单项禁用\n      { value: '2976', label: '高陵县' },\n      { value: '2977', label: '蓝田县' },\n      { value: '2978', label: '户县' },\n      { value: '2979', label: '周至县' },\n      { value: '4208', label: '灞桥区' },\n      { value: '4209', label: '长安区' },\n      { value: '4210', label: '莲湖区' },\n      { value: '4211', label: '临潼区' },\n      { value: '4212', label: '未央区' },\n      { value: '4213', label: '新城区' },\n      { value: '4214', label: '阎良区' },\n      { value: '4215', label: '雁塔区' },\n      { value: '4388', label: '碑林区' },\n      { value: '610127', label: '其它区' },\n    ],\n  },\n];\n```\n\n数组中 Item 的自定义属性也会被透传到 onChange 函数的 data 参数中。\n\n### CSS Variables\n\n| 名称 | 说明 | 默认值 |\n| :--- | :--- | :----- |\n| -    | -    | -      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { CascaderSelect, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport provinceData from './mock/provinces';\nimport treeData from './mock/tree';\n\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  const [provinceVal, setProvinceVal] = useState([]);\n  const [treeVal, setTreeVal] = useState([]);\n\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">less than 3 </Text>\n      <CascaderSelect\n        placeholder={'please select ...'}\n        mode=\"mini\"\n        dataSource={provinceData}\n        onChange={(v, data, extra) => {\n          console.log('province', v, data, extra);\n          setProvinceVal(v);\n        }}\n        value={provinceVal}\n      />\n      <Text className=\"demo-title\">more than 3</Text>\n      <CascaderSelect\n        placeholder={'please select ...'}\n        dataSource={treeData}\n        onChange={(v, data, extra) => {\n          console.log('tree', v, data, extra);\n          setTreeVal(v);\n        }}\n        value={treeVal}\n      />\n      <Text className=\"demo-title\">Disabled && ReadOnly</Text>\n      <CascaderSelect placeholder={'please select ...'} dataSource={treeData} value={[]} disabled />\n      <CascaderSelect placeholder={'please select ...'} dataSource={treeData} value={[0, 1, 2, 3, 5]} disabled />\n      <CascaderSelect placeholder={'please select ...'} dataSource={treeData} value={[0, 1, 2, 3, 5]} readOnly />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { CascaderSelect, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport provinceData from './mock/provinces';\nimport treeData from './mock/tree';\n\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  const [treeVal, setTreeVal] = useState([]);\n\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Reset</Text>\n      <CascaderSelect\n        placeholder={'please select ...'}\n        dataSource={treeData}\n        onChange={(v, data, extra) => {\n          console.log('tree', v, data, extra);\n          setTreeVal(v);\n        }}\n        value={treeVal}\n      />\n      <Button\n        className=\"btn\"\n        type=\"primary\"\n        onClick={() => {\n          setTreeVal(undefined);\n        }}\n        block\n      >\n        reset\n      </Button>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { CascaderSelect, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport provinceData from './mock/provinces';\n\nimport treeData from './mock/tree';\n\nconst Demo = () => {\n  const [provinceVal, setProvinceVal] = useState([]);\n\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">less than 3 </Text>\n      <CascaderSelect\n        hasClear\n        placeholder=\"please select ...\"\n        dataSource={provinceData}\n        onChange={(v, data, extra) => {\n          console.log('province', v, data, extra);\n          setProvinceVal(v);\n        }}\n        onClear={() => {\n          console.log('onClear');\n        }}\n        value={provinceVal}\n      />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { CascaderSelect, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst initProvinceData = [\n  {\n    value: '2973',\n    label: '陕西',\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState([]);\n  const [province, setProvince] = useState(initProvinceData);\n\n  const handleLoadData = (v) => {\n    console.log(v);\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        setProvince([\n          {\n            value: '2973',\n            label: '陕西',\n            children: [\n              {\n                value: '2974',\n                label: '西安',\n                children: [\n                  { value: '2975', label: '西安市', isLeaf: true },\n                  { value: '2976', label: '高陵县', isLeaf: true },\n                ],\n              },\n              {\n                value: '2980',\n                label: '铜川',\n                children: [\n                  { value: '2981', label: '铜川市', isLeaf: true },\n                  { value: '2982', label: '宜君县', isLeaf: true },\n                ],\n              },\n            ],\n          },\n        ]);\n        resolve();\n      }, 1000);\n    });\n  };\n\n  const handleSelect = (v) => {\n    console.log('selected node', v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">data</Text>\n      <CascaderSelect\n        placeholder={'please select ...'}\n        dataSource={province}\n        hasClear\n        value={value}\n        loadData={handleLoadData}\n        onSelect={handleSelect}\n        onChange={(valueList) => {\n          setValue(valueList);\n        }}\n      />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { CascaderSelect, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport provinceData from './mock/provinces';\nimport treeData from './mock/tree';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">preview</Text>\n      <CascaderSelect isPreview size=\"large\" dataSource={provinceData} defaultValue={[19, 18, 1]} />\n      <CascaderSelect isPreview size=\"medium\" dataSource={treeData} separator=\"|\" value={[0, 1, 2, 3, 5]} />\n      <CascaderSelect\n        isPreview\n        size=\"small\"\n        renderPreview={(values) => {\n          return values.map((v) => v.label).join('-');\n        }}\n        dataSource={provinceData}\n        value={[19, 18, 1]}\n      />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Checkbox",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "复选框",
    "importStatement": "import { Checkbox } from '@alifd/meet';",
    "body": "\n# Checkbox\n\n多选框\n\n API\n\n### Props\n\n#### Checkbox\n\nindeterminate: 半选状态\n\n| 名称                 | 说明                                    | 类型            | 默认值  |\n| :------------------- | :-------------------------------------- | :-------------- | :------ |\n| size                 | 尺寸'small'                             | 'medium'        | 'large' | string | medium |\n| checked              | 是否选中（受控模式）                    | bool            |         |\n| defaultChecked       | 初始选中状态（非受控模式）              | bool            |         |\n| disabled             | 是否禁用                                | bool            | false   |\n| readOnly             | 只读模式                                | boolean         | false   |\n| indeterminate        | 设置 indeterminate 状态，只负责样式控制 | bool            |         |\n| defaultIndeterminate | 初始设置 indeterminate 状态             | bool            |         |\n| onChange             | 改变时回调函数                          | Function(value) |         |\n\n#### Checkbox.Group\n\n| 名称             | 说明                                                            | 类型                              | 默认值 |\n| :--------------- | :-------------------------------------------------------------- | :-------------------------------- | :----- |\n| value            | 指定选中的选项                                                  | number[]/string[]                 | -      |\n| defaultValue     | 初始选中的选项（非受控模式）                                    | number[]/string[]                 | -      |\n| disabled         | 是否禁用                                                        | bool                              | false  |\n| readOnly         | 只读模式                                                        | boolean                           | false  |\n| direction        | 排布方向 <br/> 可选值：`hoz`,`ver`                              | enum                              | `ver`  |\n| dataSource       | 数据源                                                          | CheckboxProps[]/number[]/string[] |        |\n| isPreview        | 是否为预览态                                                    | Boolean                           | false  |\n| renderPreview    | 自定义预览样式 ,`value` 参数格式为 `[{label:string,value:any}]` | (value)=>RaxNode                  |        |\n| previewClassName | 预览态自定义样式类                                              | string                            |        |\n| previewStyle     | 预览态自定义样式                                                | CSS Properties                    |        |\n| onChange         | 改变时回调函数                                                  | Function(checkedValue)            |        |\n\n> 子节点只能是 Checkbox\n\n### CSS Variables\n\n| 名称                                               | 说明                            | 默认值                                 |\n| :------------------------------------------------- | :------------------------------ | :------------------------------------- |\n| `--checkbox-hoz-margin`                            | 复选框组横向布局默认间隙        | `--s-2`                                |\n| `--checkbox-small-padding`                         | 复选框默认（上、下）间隙-small  | `--box-small-padding`                  |\n| `--checkbox-medium-padding`                        | 复选框默认（上、下）间隙-medium | `--box-medium-padding`                 |\n| `--checkbox-large-padding`                         | 复选框默认（上、下）间隙-large  | `--box-large-padding`                  |\n| `--checkbox-circle-small-size`                     | 复选框尺寸-small                | `--s-8`                                |\n| `--checkbox-circle-medium-size`                    | 复选框尺寸-medium               | `--s-10`                               |\n| `--checkbox-circle-large-size`                     | 复选框尺寸-large                | `--s-12`                               |\n| `--checkbox-circle-corner`                         | 复选框圆角                      | `--corner-circle`                      |\n| `--checkbox-circle-border-width`                   | 复选框边框大小                  | `--box-medium-border-width`            |\n| `--checkbox-circle-border-color`                   | 复选框边框颜色                  | `--box-normal-outline-border-color`    |\n| `--checkbox-circle-selected-bg-color`              | 复选框选中时背景颜色            | `--box-primary-solid-background-color` |\n| `--checkbox-circle-selected-border-color`          | 复选框选中时边框颜色            | `--box-primary-solid-background-color` |\n| `--checkbox-circle-indeterminate-bg-color`         | 复选框不确定状态背景颜色        | `--box-primary-solid-background-color` |\n| `--checkbox-circle-indeterminate-border-width`     | 复选框不确定状态边框大小        | `--line-zero`                          |\n| `--checkbox-circle-disabled-border-color`          | 复选框禁用时边框颜色            | `--color-fill1-4`                      |\n| `--checkbox-circle-disabled-bg-color`              | 复选框禁用时背景颜色            | `--color-fill1-1`                      |\n| `--checkbox-circle-disabled-selected-border-color` | 复选框禁用且选中时边框颜色      | `--color-brand-1`                      |\n| `--checkbox-circle-disabled-selected-bg-color`     | 复选框禁用且选中时背景颜色      | `--color-brand-1`                      |\n| `--checkbox-icon-small-size`                       | 复选框 icon 尺寸-small          | `--icon-xxs`                           |\n| `--checkbox-icon-medium-size`                      | 复选框 icon 尺寸-medium         | `--icon-xs`                            |\n| `--checkbox-icon-large-size`                       | 复选框 icon 尺寸-large          | `--icon-s`                             |\n| `--checkbox-icon-selected-color`                   | 复选框选中时 icon 颜色          | `--box-primary-solid-icon-color`       |\n| `--checkbox-icon-indeterminate-color`              | 复选框不确定状态 icon 颜色      | `--box-primary-solid-icon-color`       |\n| `--checkbox-icon-disabled-color`                   | 复选框禁用时 icon 颜色          | `--box-primary-solid-icon-color`       |\n| `--checkbox-text-font-small-size`                  | 复选框文字字体大小-small        | `--s-7`                                |\n| `--checkbox-text-font-medium-size`                 | 复选框文字字体大小-medium       | `--s-8`                                |\n| `--checkbox-text-font-large-size`                  | 复选框文字字体大小-large        | `--s-9`                                |\n| `--checkbox-text-small-margin`                     | 复选框文字默认间隙-small        | `--box-small-spacing`                  |\n| `--checkbox-text-medium-margin`                    | 复选框文字默认间隙-medium       | `--box-medium-spacing`                 |\n| `--checkbox-text-large-margin`                     | 复选框文字默认间隙-large        | `--box-large-spacing`                  |\n| `--checkbox-text-color`                            | 复选框文字颜色                  | `--box-normal-solid-text-color`        |\n| `--checkbox-text-disbled-color`                    | 复选框禁用时文字颜色            | `--color-text1-1`                      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Checkbox } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\">Checkbox</Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\">Checkbox</Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\">Checkbox</Checkbox>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">checked</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\" checked>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\" checked>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\" checked>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\" disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\" disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\" disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">checked disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\" checked disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\" checked disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\" checked disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">indeterminate</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\" indeterminate>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\" indeterminate>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\" indeterminate>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">indeterminate disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"small\" indeterminate disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"medium\" indeterminate disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Checkbox size=\"large\" indeterminate disabled>\n              Checkbox\n            </Checkbox>\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">event</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <Checkbox\n            onChange={(checked) => {\n              console.log(checked);\n              alert(`${checked ? 'agree' : 'disagree'}`);\n            }}\n          >\n            Agree\n          </Checkbox>\n        </View>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Checkbox, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [groupValue, setGroupValue] = useState(['1', '3', '4']);\n  const [isDisabled, setCheckGroupDisable] = useState(false);\n  const [fruits, setFruits] = useState(['apple', 'banana', 'cherry']);\n\n  const onValueChange = (value) => {\n    console.log(value);\n    setGroupValue(value);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Group Usage</Text>\n      <View className=\"demo-content\">\n        <View style={{ marginBottom: 20 }}>\n          <View className=\"btn-container\">\n            <Button\n              type=\"primary\"\n              model=\"outline\"\n              onClick={() => {\n                setGroupValue(['1', '2', '3', '4', '5']);\n              }}\n            >\n              check all\n            </Button>\n            <Button\n              type=\"primary\"\n              model=\"outline\"\n              onClick={() => {\n                setGroupValue([]);\n              }}\n            >\n              uncheck\n            </Button>\n            <Button\n              type=\"primary\"\n              model=\"outline\"\n              onClick={() => {\n                setGroupValue(['1', '2', '5']);\n              }}\n            >\n              check 1,2,5\n            </Button>\n            <Button\n              type=\"primary\"\n              model=\"outline\"\n              onClick={() => {\n                setCheckGroupDisable(!isDisabled);\n              }}\n            >\n              toggle disable\n            </Button>\n          </View>\n        </View>\n\n        <View className=\"demo-item\">\n          <View>\n            <Checkbox\n              indeterminate={0 < groupValue.length && groupValue.length < 5}\n              checked={groupValue.length === 5}\n              onChange={(value) => {\n                setGroupValue(value ? ['1', '2', '3', '4', '5'] : []);\n              }}\n            >\n              Select all\n            </Checkbox>\n\n            <Checkbox.Group\n              value={groupValue}\n              disabled={isDisabled}\n              dataSource={[\n                {\n                  label: 'Checkbox 1',\n                  value: '1',\n                },\n                {\n                  label: 'Checkbox 2',\n                  value: '2',\n                },\n                {\n                  label: 'Checkbox 3',\n                  value: '3',\n                },\n                {\n                  label: 'Checkbox 4',\n                  value: '4',\n                },\n                {\n                  label: 'Checkbox 5',\n                  value: '5',\n                },\n              ]}\n              onChange={(v) => {\n                onValueChange(v);\n              }}\n            />\n          </View>\n          <Text\n            style={{\n              border: '1px solid #209bfa',\n              display: 'flex',\n              flex: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            当前值： {groupValue.join(',')}\n          </Text>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Controlled</Text>\n      <View className=\"demo-content\">\n        <View>\n          <Checkbox.Group\n            value={fruits}\n            direction=\"horizontal\"\n            onChange={(value) => {\n              console.log('value', value);\n              setFruits(value);\n            }}\n            dataSource={['apple', 'banana', 'cherry']}\n          />\n          <Button\n            type=\"primary\"\n            model=\"outline\"\n            onClick={() => {\n              setFruits(['banana', 'cherry']);\n            }}\n          >\n            check [banana,cherry]\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Checkbox } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst dataSource = [\n  {\n    label: 'Checkbox 1',\n    value: 1,\n  },\n  {\n    label: 'Checkbox 2',\n    value: 2,\n  },\n  {\n    label: 'Checkbox 3',\n    value: '3',\n  },\n  {\n    label: 'Checkbox 4',\n    value: '4',\n  },\n  {\n    label: 'Checkbox 5',\n    value: '5',\n  },\n];\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">preview</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Checkbox.Group isPreview size=\"large\" value={[1, 2]} dataSource={dataSource} />\n            <Checkbox.Group isPreview size=\"small\" value={['b', 'c']}>\n              <Checkbox value={'a'}>Apple</Checkbox>\n              <Checkbox value={'b'}>Banana</Checkbox>\n              <Checkbox value={'c'}>Cherry</Checkbox>\n            </Checkbox.Group>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "ConfigProvider",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "配置",
    "importStatement": "import { ConfigProvider } from '@alifd/meet';",
    "body": "\n# Config Provider\n\n这个组件有两个用途：\n\n- 进行文案自定义\n- 将浮动元素渲染至根节点\n\n API\n\n### Props\n\n| 属性          | 含义                               | 类型    | 默认值 |\n| ------------- | ---------------------------------- | ------- | ------ |\n| locale        | 自定义文案                         | Object  |        |\n| disablePortal | 关闭 ConfigProvider 的 Portal 功能 | boolean | false  |\n\n#### 文案自定义\n\n使用 locale 属性，传入对应组件的文案。例如将对话框的确认按钮改为“好的”：\n\n```js\n<ConfigProvider locale={{\n  Dialog: {\n    ok: \"好的\"\n  }\n}}>\n```\n\n#### 将浮动元素渲染至根节点\n\n如果元素存在 ConfigProvider，浮动元素（Dialog、Message 等）组件默认会渲染至 ConfigProvider 所在的节点。\n\n一般不会有额外影响。如果需要关闭，可以传入`disablePortal={true}`\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { ConfigProvider, Button, Dialog } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <View>\n      <ConfigProvider\n        locale={{\n          Dialog: {\n            ok: '好的',\n          },\n        }}\n      >\n        <Text className=\"demo-title\">Config Provider</Text>\n        <View className=\"demo-content\">\n          <Button onClick={() => setVisible(true)}>显示一个Dialog</Button>\n          <Button\n            onClick={() =>\n              Dialog.alert({\n                title: 'alert',\n                content: 'alert content',\n              })\n            }\n          >\n            显示另一个Dialog\n          </Button>\n          <Dialog\n            visible={visible}\n            title=\"提示\"\n            content=\"这里是提醒内容\"\n            type=\"alert\"\n            onClose={() => setVisible(false)}\n          />\n        </View>\n      </ConfigProvider>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "DatePicker",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "日期选择",
    "importStatement": "import { DatePicker } from '@alifd/meet';",
    "body": "\n# DatePicker\n\n用于选择日期或者时间\n\n API\n\n### Props\n\n类型 AvailableDate 表示以下任意一种：Date / string / dayjs.Dayjs / number。\n\n#### DatePicker\n\n基础选择器（选择年、月、日）\n\n注意：如果使用了 showTime，则必须指定 validRange\n\n| 属性         | 含义                                 | 类型                     | 默认值          |\n| ------------ | ------------------------------------ | ------------------------ | --------------- |\n| value        | 当前值                               | AvailableDate            |                 |\n| defaultValue | 初始默认值                           | AvailableDate            |                 |\n| disabledDate | 禁用日期                             | (value: Date) => boolean |                 |\n| validRange   | 可用日期区间                         | [Date, Date]             |                 |\n| format       | 日期值的格式                         | String                   | YYYY-MM-DD      |\n| size         | 大小                                 | Enum                     | medium          |\n| iconType     | 右侧选择按钮图标名称                 | String                   |                 |\n| placeholder  | 输入提示                             | String                   |                 |\n| showTime     | 同时选择时间，可传入 TimePickerProps | boolean                  | TimePickerProps |\n| disabled     | 禁用                                 | Boolean                  | false           |\n| readOnly     | 只读                                 | Boolean                  | false           |\n| hasClear     | 是否展示清除按钮                     | Boolean                  | false           |\n| onClear      | 点击清除按钮回调                     | ()=>void                 |                 |\n| onChange     | 日期改变时回调                       | (value: Date) => void    |\n| onOk         | 点击确认按钮时回调                   | (value: Date) => void    |\n\n#### DatePicker.MonthPicker\n\n月份选择器（只选择年份和月份）\n\n| 属性         | 含义                 | 类型                     | 默认值  |\n| ------------ | -------------------- | ------------------------ | ------- |\n| value        | 当前值               | AvailableDate            |         |\n| defaultValue | 初始默认值           | AvailableDate            |         |\n| disabledDate | 禁用日期             | (value: Date) => boolean |\n| validRange   | 可用日期区间         | [Date, Date]             |         |\n| format       | 日期值的格式         | String                   | YYYY-MM |\n| size         | 大小                 | Enum                     | medium  |\n| iconType     | 右侧选择按钮图标名称 | String                   |         |\n| placeholder  | 输入提示             | String                   |         |\n| disabled     | 禁用                 | Boolean                  | false   |\n| readOnly     | 只读                 | Boolean                  | false   |\n| hasClear     | 是否展示清除按钮     | Boolean                  | false   |\n| onOk         | 点击确认按钮时回调   | (value: Date) => void    |         |\n| onClear      | 点击清除按钮回调     | ()=>void                 |         |\n\n#### DatePicker.YearPicker\n\n年份选择器（只选择年）\n\n| 属性            | 含义                 | 类型                                     | 默认值 | 备注 |\n| --------------- | -------------------- | ---------------------------------------- | ------ | ---- |\n| value           | 当前值               | AvailableDate                            |        |      |\n| defaultValue    | 初始默认值           | AvailableDate                            |        |      |\n| disabledDate    | 禁用日期             | (value: Date) => boolean                 |        |      |\n| format          | 日期值的格式         | String                                   | YYYY   |      |\n| size            | 大小，可选：         | Enum                                     | medium |      |\n| iconType        | 右侧选择按钮图标名称 | String                                   |        |      |\n| placeholder     | 输入提示             | String                                   |        |      |\n| disabled        | 禁用                 | Boolean                                  | false  |      |\n| readOnly        | 只读                 | Boolean                                  | false  |      |\n| hasClear        | 是否展示清除按钮     | Boolean                                  | false  |\n| onChange        | 日期改变时回调       | (value: Date) => void                    |        |\n| onOk            | 点击确认按钮时回调   | (value: Date) => void                    |        |\n| onClear         | 点击清除按钮回调     | ()=>void                                 |        |\n| onVisibleChange | 弹层状态改变时回调   | (visible: Boolean, type: String) => void |        |\n\n#### DatePicker.RangePicker\n\n日期范围选择器\n\n| 属性         | 含义                 | 类型                           | 默认值  |\n| ------------ | -------------------- | ------------------------------ | ------- |\n| value        | 当前值               | [AvailableDate, AvailableDate] |         |\n| defaultValue | 初始默认值           | [AvailableDate, AvailableDate] |         |\n| disabledDate | 禁用日期             | (value: Date) => boolean       |\n| validRange   | 可用日期区间         | [Date, Date]                   |         |\n| format       | 日期值的格式         | String                         | YYYY-MM |\n| size         | 大小                 | Enum                           | medium  |\n| iconType     | 右侧选择按钮图标名称 | String                         |         |\n| placeholder  | 输入提示             | String                         |         |\n| disabled     | 禁用                 | Boolean                        | false   |\n| readOnly     | 只读                 | Boolean                        | false   |\n| hasClear     | 是否展示清除按钮     | Boolean                        | false   |\n| onOk         | 点击确认按钮时回调   | (value: [Date, Date]) => void  |         |\n| onClear      | 点击清除按钮回调     | ()=>void                       |         |\n| onChange     | 日期改变时回调       | (value: [Date, Date]) => void  |         |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { DatePicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst { YearPicker, MonthPicker, RangePicker } = DatePicker;\n\n\nconst disableEvenYear = (d, type) => type === 'year' && d.getFullYear() % 2 === 0;\nconst disableEvenMonth = (d, type) => type === 'month' && d.getMonth() % 2 !== 0;\nconst disableEvenDay = (d, type) => type === 'date' && d.getDate() % 2 === 0;\nconst today = new Date();\nconst next7day = new Date(today.getTime() + 7 * 24 * 3600 * 1000);\n// 七天内\nconst validRange = [today, next7day];\n\nconst Demo = () => {\n  const handleChange = (d) => console.log(d);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Date Picker</Text>\n      <View className=\"demo-content\">\n        <DatePicker placeholder=\"选择日期\" onChange={handleChange} />\n        <YearPicker placeholder=\"选择年\" onChange={handleChange} />\n        <MonthPicker placeholder=\"选择月份\" onChange={handleChange} />\n        <RangePicker placeholder=\"选择日期区间\" onChange={handleChange} />\n        <RangePicker\n          placeholder=\"选择日期区间，并且选择时间\"\n          onChange={handleChange}\n          showTime={true}\n          validRange={validRange}\n        />\n        <RangePicker\n          placeholder=\"选择日期区间，并且自定义时间\"\n          onChange={handleChange}\n          showTime={{\n            format: 'HH:mm:ss',\n            minuteStep: 15,\n          }}\n          validRange={validRange}\n        />\n        <DatePicker placeholder=\"选择日期和时间\" onChange={handleChange} showTime={true} validRange={validRange} />\n        <DatePicker\n          placeholder=\"选择日期和时间，并且自定义时间\"\n          onChange={handleChange}\n          showTime={{\n            format: 'HH:mm:ss',\n            minuteStep: 15,\n          }}\n          validRange={validRange}\n        />\n      </View>\n      <Text className=\"demo-title\">Custom disable</Text>\n      <View className=\"demo-content\">\n        <DatePicker placeholder=\"选择日期\" onChange={handleChange} disabledDate={disableEvenDay} />\n        <YearPicker placeholder=\"选择年\" onChange={handleChange} disabledDate={disableEvenYear} />\n        <MonthPicker placeholder=\"选择月份\" onChange={handleChange} disabledDate={disableEvenMonth} />\n      </View>\n      <Text className=\"demo-title\">其他状态</Text>\n      <View className=\"demo-content\">\n        <DatePicker value={today} format=\"禁用 YYYY-MM-DD\" disabled />\n        <DatePicker value={today} format=\"只读 YYYY-MM-DD\" readOnly />\n      </View>\n      <Text className=\"demo-title\">使用时间戳</Text>\n      <View className=\"demo-content\">\n        <DatePicker defaultValue={today.getTime()} onChange={handleChange} />\n        <YearPicker defaultValue={today.getTime()} onChange={handleChange} />\n        <MonthPicker defaultValue={today.getTime()} onChange={handleChange} />\n        <RangePicker defaultValue={[today.getTime(), next7day.getTime()]} onChange={handleChange} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, DatePicker } from '@alifd/meet';\nimport Text from 'rax-text';\nimport View from 'rax-view';\n\n\nconst { EmbedYearPicker, EmbedMonthPicker } = DatePicker;\n\nconst disableEvenYear = (d) => d.getFullYear() % 2 === 0;\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">Month Picker</Text>\n      <View className=\"demo-content\">\n        <EmbedMonthPicker onChange={(d) => console.log(d)} />\n      </View>\n      <Text className=\"demo-title\">Year Picker</Text>\n      <View className=\"demo-content\">\n        <EmbedYearPicker onChange={(d) => console.log(d)} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { DatePicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst { YearPicker, MonthPicker, RangePicker } = DatePicker;\n\n\nconst disableEvenYear = (d, type) => type === 'year' && d.getFullYear() % 2 === 0;\nconst disableEvenMonth = (d, type) => type === 'month' && d.getMonth() % 2 !== 0;\nconst disableEvenDay = (d, type) => type === 'date' && d.getDate() % 2 === 0;\nconst today = new Date();\nconst next7day = new Date(today.getTime() + 7 * 24 * 3600 * 1000);\n// 七天内\nconst validRange = [today, next7day];\n\nconst Demo = () => {\n  const [date, setDate] = useState(new Date());\n  const [dateRage, setDateRange] = useState([new Date(), next7day]);\n  const [dateTimeRage, setDateTimeRange] = useState([new Date(), next7day]);\n\n  const handleChange = (d) => {\n    console.log('onChange:', d);\n    setDate(d);\n  };\n  const handleRangeChange = (range) => {\n    setDateRange(range);\n  };\n  const handleTimeRangeChange = (range) => {\n    setDateTimeRange(range);\n  };\n\n  const handleClear = () => {\n    console.log('onClear');\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <DatePicker value={date} hasClear onChange={handleChange} onClear={handleClear} />\n        <YearPicker value={date} hasClear onChange={handleChange} onClear={handleClear} />\n        <MonthPicker value={date} hasClear onChange={handleChange} onClear={handleClear} />\n        <RangePicker value={dateRage} hasClear onChange={handleRangeChange} onClear={handleClear} />\n        <RangePicker\n          value={dateTimeRage}\n          hasClear\n          onChange={handleTimeRangeChange}\n          showTime={true}\n          validRange={validRange}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Dialog",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "对话框",
    "importStatement": "import { Dialog } from '@alifd/meet';",
    "body": "\n# Dialog\n\n用作显示系统的重要信息，并请求用户进行操作反馈;\n\n## Locale\n\n```json\n{\n  \"Dialog\": {\n    \"ok\": \"确定\",\n    \"cancel\": \"取消\"\n  }\n}\n```\n\n API\n\n### Dialog\n\n| 参数          | 说明                                                                                                                    | 类型                            | 默认值                            |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------- | ------------------------------- | --------------------------------- |\n| visible       | 是否显示                                                                                                                | bool                            | false                             |\n| type          | 对话框类型 <br/> 可选值： <br/> `normal`,`alert`,`confirm`                                                              | Enum                            | false                             |\n| title         | 对话框的标题内容                                                                                                        | String                          |                                   |\n| content       | 对话框内容                                                                                                              | String or RaxNode               |                                   |\n| closeMode     | 关闭对话框模式 <br/> 可选值： <br/> `close-关闭图标`<br/> `mask-遮罩`<br/> `ok-确认按钮`<br/>`cancel-取消按钮` 任意组合 | `Array<String>`                 | `['close','mask','ok', 'cancel']` |\n| centered      | 是否居中展示                                                                                                            | Boolean                         | false                             |\n| footer        | 底部内容，传入 false 时可禁不显示底部                                                                                   | RaxNode                         | Boolean                           | true |\n| footerActions | 按钮数组 <br/> 可选值： <br/> `['ok']`<br/>`['cancel']`<br/>`['ok', 'cancel']`<br/>`['cancel', 'ok']`                   | `Array<String>`                 | `['cancel', 'ok']`                |\n| okProps       | 确认按钮的属性，参见 Button 组件, 可通过 `{text:'okText'}` 额外修改按钮文案                                             | ButtonProps                     |                                   |\n| cancelProps   | 取消按钮的属性，参见 Button 组件, 可通过 `{text:'cancelText'}` 额外修改按钮文案                                         | ButtonProps                     |                                   |\n| onOk          | 确定按钮被点击时回调                                                                                                    | (e) => void;                    |                                   |\n| onCancel      | 取消按钮被点击时回调                                                                                                    | (e) => void;                    |                                   |\n| onClose       | 关闭时调用                                                                                                              | (reason: string,e?:any) => void |                                   |\n\n### Quick\n\n#### Dialog.show(options) => {hide:()=>void}\n\n弹出一个对话框\n\n#### Dialog.alert(options: DialogProps) => {hide:()=>void}\n\n弹出一个提醒框\n\n#### Dialog.confirm(options: DialogProps) => {hide:()=>void}\n\n弹出一个确认操作框\n\n### CSS Variables\n\n| 名称                           | 说明               | 默认值                              |\n| :----------------------------- | :----------------- | :---------------------------------- |\n| `--dialog-bg-color`            | 背景色             | `--color-white`                     |\n| `--dialog-padding`             | 内边距             | `--box-medium-padding`              |\n| `--dialog-title-font-color`    | 标题颜色           | `--color-text1-4`                   |\n| `--dialog-title-font-size`     | 标题字号           | `--p-title-font-size`               |\n| `--dialog-header-padding`      | 顶部内边距         | `--s-4`                             |\n| `--dialog-header-spacing`      | 顶部内容间隙       | `--box-medium-spacing`              |\n| `--dialog-confirm-icon-color`  | `confirm` 图标颜色 | `--color-warning-3`                 |\n| `--dialog-alert-icon-color`    | `alert` 图标颜色   | `--color-help-3`                    |\n| `--dialog-icon-size`           | 图标尺寸           | `--s-5`                             |\n| `--dialog-close-icon-color`    | 关闭图标颜色       | `--color-text1-2`                   |\n| `--dialog-close-icon-size`     | 关闭图标颜色       | `--p-body-2-font-size`              |\n| `--dialog-close-icon-padding`  | 关闭图标间隙       | `--s-4`                             |\n| `--dialog-content-min-height`  | 最小高             | `100`                               |\n| `--dialog-content-font-size`   | 字体大小           | `--p-body-1-font-size`              |\n| `--dialog-content-font-color`  | 字体颜色(文本模式) | `--color-text1-3`                   |\n| `--dialog-content-padding-tb`  | 上下间距           | `--s-2`                             |\n| `--dialog-footer-padding`      | 底部按钮内边距     | `--box-medium-padding`              |\n| `--dialog-footer-border-width` | 顶部边框宽度       | `--line-1`                          |\n| `--dialog-footer-border-color` | 顶部边框颜色       | `--box-normal-outline-border-color` |\n| `--dialog-footer-spacing`      | 底部按钮间隙       | `--box-medium-spacing`              |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Dialog, Radio, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [dialog1, setDialog1] = useState(false);\n  const [dialog2, setDialog2] = useState(false);\n  const [dialog3, setDialog3] = useState(false);\n  const [dialog4, setDialog4] = useState(false);\n  const [dialog5, setDialog5] = useState(false);\n  const [dialog6, setDialog6] = useState(false);\n  const [dialog7, setDialog7] = useState(false);\n  const [dialog8, setDialog8] = useState(false);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">bottom(default)</Text>\n      <View className=\"demo-content\">\n        <Button className=\"btn\" type=\"primary\" onClick={() => setDialog1(true)}>\n          Normal\n        </Button>\n        <Button className=\"btn\" type=\"primary\" onClick={() => setDialog3(true)}>\n          Confirm\n        </Button>\n        <Button className=\"btn\" type=\"primary\" onClick={() => setDialog2(true)}>\n          Alert\n        </Button>\n        <Button className=\"btn\" type=\"primary\" onClick={() => setDialog4(true)}>\n          no Title\n        </Button>\n      </View>\n      <Text className=\"demo-title\">centered</Text>\n      <View className=\"demo-content\">\n        <Button className=\"btn\" type=\"primary\" model=\"outline\" onClick={() => setDialog5(true)}>\n          Normal\n        </Button>\n        <Button className=\"btn\" type=\"primary\" model=\"outline\" onClick={() => setDialog6(true)}>\n          Confirm\n        </Button>\n        <Button className=\"btn\" type=\"primary\" model=\"outline\" onClick={() => setDialog7(true)}>\n          Alert\n        </Button>\n        <Button className=\"btn\" type=\"primary\" model=\"outline\" onClick={() => setDialog8(true)}>\n          no Title\n        </Button>\n      </View>\n\n      <Dialog visible={dialog1} title=\"标题\" onClose={() => setDialog1(false)}>\n        <Text>自定义弹窗内容</Text>\n        <Button\n          type=\"primary\"\n          model=\"outline\"\n          size=\"small\"\n          className=\"btn\"\n          onClick={() =>\n            Dialog.alert({\n              title: 'alert',\n              content: 'alert content',\n            })\n          }\n        >\n          再显示一个弹窗\n        </Button>\n      </Dialog>\n      <Dialog visible={dialog2} title=\"已移除\" content=\"移除成功\" type=\"alert\" onClose={() => setDialog2(false)} />\n      <Dialog\n        visible={dialog3}\n        title=\"请确认\"\n        content=\"是否要移除此项目\"\n        type=\"confirm\"\n        onClose={() => setDialog3(false)}\n      />\n      <Dialog visible={dialog4} content=\"无标题\" onClose={() => setDialog4(false)} />\n\n      <Dialog visible={dialog5} centered title=\"标题\" onClose={() => setDialog5(false)}>\n        <Text>自定义弹窗内容</Text>\n        <Button\n          type=\"primary\"\n          model=\"text\"\n          size=\"small\"\n          className=\"btn\"\n          onClick={() =>\n            Dialog.alert({\n              title: 'alert',\n              centered: true,\n              content: 'alert content',\n            })\n          }\n        >\n          再显示一个弹窗\n        </Button>\n      </Dialog>\n      <Dialog\n        visible={dialog6}\n        centered\n        title=\"已移除\"\n        content=\"移除成功\"\n        type=\"alert\"\n        onClose={() => setDialog6(false)}\n      />\n      <Dialog\n        visible={dialog7}\n        centered\n        title=\"请确认\"\n        content=\"是否要移除此项目\"\n        type=\"confirm\"\n        onClose={() => setDialog7(false)}\n      />\n      <Dialog visible={dialog8} centered content=\"无标题\" onClose={() => setDialog8(false)} />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Dialog, Checkbox, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [dialog1, setDialog1] = useState(false);\n  const [modes, setModes] = useState(['mask', 'close', 'ok', 'cancel']);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Base Dialog</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">关闭模式</View>\n          <View className=\"demo-item-content\">\n            <Checkbox.Group\n              dataSource={['mask', 'close', 'ok', 'cancel']}\n              value={modes}\n              onChange={(v) => setModes(v)}\n            />\n          </View>\n        </View>\n        <Button\n          onClick={() => {\n            setDialog1(true);\n          }}\n        >\n          open dialog\n        </Button>\n      </View>\n\n      <Dialog\n        visible={dialog1}\n        title=\"标题\"\n        closeMode={modes}\n        onClose={(reason) => {\n          console.log('closed by ', reason);\n          setDialog1(false);\n        }}\n      >\n        <Text>自定义弹窗内容</Text>\n      </Dialog>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Dialog, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [dialog1, setDialog1] = useState(false);\n  const [dialog2, setDialog2] = useState(false);\n  const [dialog3, setDialog3] = useState(false);\n  const [dialog4, setDialog4] = useState(false);\n  const [dialog5, setDialog5] = useState(false);\n  const [dialog6, setDialog6] = useState(false);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Footer</Text>\n      <View className=\"demo-content\">\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog1(true);\n          }}\n        >\n          no footer\n        </Button>\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog2(true);\n          }}\n        >\n          ok\n        </Button>\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog3(true);\n          }}\n        >\n          ok,cancel\n        </Button>\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog4(true);\n          }}\n        >\n          cancel, ok\n        </Button>\n      </View>\n      <Text className=\"demo-title\">Custom Button</Text>\n      <View className=\"demo-content\">\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog5(true);\n          }}\n        >\n          custom button type\n        </Button>\n        <Button\n          className=\"btn\"\n          type=\"primary\"\n          onClick={() => {\n            setDialog6(true);\n          }}\n        >\n          custom button text\n        </Button>\n      </View>\n\n      <Dialog visible={dialog1} title=\"no footer\" footer={false} content=\"[]\" onClose={() => setDialog1(false)} />\n      <Dialog visible={dialog2} title=\"ok\" footerActions={['ok']} content=\"[ok]\" onClose={() => setDialog2(false)} />\n      <Dialog\n        visible={dialog3}\n        title=\"ok,cancel\"\n        footerActions={['ok', 'cancel']}\n        content=\"['ok', 'cancel']\"\n        onClose={() => setDialog3(false)}\n      />\n      <Dialog\n        visible={dialog4}\n        title=\"cancel, ok\"\n        footerActions={['cancel', 'ok']}\n        content=\"default\"\n        onClose={() => setDialog4(false)}\n      />\n      <Dialog\n        visible={dialog5}\n        title=\"custom button props\"\n        content=\"okProps,cancelProps 接受所有 Button 参数\"\n        okProps={{\n          type: 'warning',\n          model: 'outline',\n        }}\n        cancelProps={{\n          type: 'primary',\n          model: 'solid',\n        }}\n        onClose={() => setDialog5(false)}\n      />\n      <Dialog\n        visible={dialog6}\n        title=\"custom button text\"\n        content=\"在多语言优先级之上， 业务自定义按钮文案\"\n        okProps={{\n          text: '自定义确认',\n        }}\n        cancelProps={{\n          text: '自定义取消',\n        }}\n        onClose={() => setDialog6(false)}\n      />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Dialog, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const showDialog = () => {\n    Dialog.show({\n      title: 'Dialog.show',\n      centered: true,\n      content: '便捷调用 Dialog ',\n      onOk: () => {\n        console.log('ok');\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n      onClose: () => {\n        console.log('onClose');\n      },\n    });\n  };\n  const showAlertDialog = () => {\n    Dialog.alert({\n      title: 'alert',\n      centered: true,\n      content: 'alert content',\n      onOk() {\n        console.log('alert ok');\n      },\n      onClose() {\n        console.log('alert close');\n      },\n    });\n  };\n  const showConfirmDialog = () => {\n    Dialog.confirm({\n      title: 'confirm',\n      centered: true,\n      content: 'confirm content',\n      onOk() {\n        console.log('confirm  ok');\n      },\n      onCancel() {\n        console.log('confirm cancel');\n      },\n      onClose() {\n        console.log('confirm close');\n      },\n    });\n  };\n\n  const showCloseModeDialog = () => {\n    const d = Dialog.show({\n      title: 'click Ok to close',\n      centered: true,\n      content: '只有点击 Ok 才能关闭',\n      closeMode: ['ok'], // 禁止默认关闭逻辑\n      onOk: () => {\n        d.hide();\n      },\n    });\n  };\n\n  const showCustomCloseDialog = () => {\n    const d = Dialog.show({\n      title: 'click close icon to close',\n      centered: true,\n      content: '通过 closeMode 参数定制，只有 close Icon 才能关闭',\n      closeMode: ['close'],\n    });\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Base Dialog</Text>\n      <View className=\"demo-content \">\n        <Button type=\"primary\" model=\"outline\" className=\"btn\" onClick={showDialog}>\n          Dialog.show(config)\n        </Button>\n        <Button type=\"primary\" model=\"outline\" className=\"btn\" onClick={showAlertDialog}>\n          Dialog.alert(config)\n        </Button>\n        <Button type=\"primary\" model=\"outline\" className=\"btn\" onClick={showConfirmDialog}>\n          Dialog.confirm(config)\n        </Button>\n      </View>\n      <Text className=\"demo-title\">Feature</Text>\n      <View className=\"demo-content \">\n        <Button type=\"primary\" model=\"outline\" className=\"btn\" onClick={showCloseModeDialog}>\n          custom close\n        </Button>\n        <Button type=\"primary\" model=\"outline\" className=\"btn\" onClick={showCustomCloseDialog}>\n          custom close mode\n        </Button>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Dialog, Checkbox, Button, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport Image from 'rax-image';\n\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">pop</Text>\n      <View className=\"demo-content\">\n        <Button type=\"primary\" onClick={() => setVisible(true)}>\n          open pop\n        </Button>\n      </View>\n      <Dialog\n        visible={visible}\n        closeMode={['mask']}\n        footer={false}\n        centered\n        header={false}\n        onClose={(reason) => {\n          setVisible(false);\n        }}\n        style={{\n          width: '750rpx',\n          background: 'transparent',\n        }}\n      >\n        <Image\n          source={{ uri: 'https://gw.alicdn.com/tfs/TB16doMLXXXXXc.XXXXXXXXXXXX-750-660.png' }}\n          style={{ width: '750rpx', height: '660rpx' }}\n        />\n        <Icon name=\"error\" style={{ color: 'white', marginTop: '20rpx' }} onClick={() => setVisible(false)} />\n      </Dialog>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Divider",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "分割线",
    "importStatement": "import { Divider } from '@alifd/meet';",
    "body": "\n# Divider\n\n对不同的章节或者文本进行分割\n\n API\n\n### Props\n\n| 名称        | 说明                                                                      | 类型    | 默认值 |\n| :---------- | :------------------------------------------------------------------------ | :------ | :----- |\n| dashed      | 是否为虚线                                                                | boolean | false  |\n| direction   | 线是水平还是垂直类型 <br/> 可选值：<br/> `hoz`, `ver`                     | enum    | hoz    |\n| orientation | 标题位置， `direction=hoz` <br/> 可选值： <br/> `left`, `center`, `right` | enum    | center |\n\n### CSS Variables\n\n| 名称                   | 说明       | 默认值                 |\n| :--------------------- | :--------- | :--------------------- |\n| `--divider-ver-margin` | 上下外边距 | `--s-2`                |\n| `--divider-hoz-margin` | 左右外边距 | `--s-2`                |\n| `--divider-font-color` | 字体颜色   | `--color-text1-3`      |\n| `--divider-font-size`  | 字体尺寸   | `--p-body-1-font-size` |\n| `--divider-spacing`    | 标题间隙   | `--box-medium-spacing` |\n| `--divider-color`      | 分割线颜色 | `--color-line1-2`      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Divider } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <Text>文本</Text>\n        <Divider>分割线</Divider>\n        <Text>文本</Text>\n        <Divider />\n        <Text>文本</Text>\n      </View>\n      <Text className=\"demo-title\">orientation</Text>\n      <View className=\"demo-content\">\n        <Divider orientation=\"left\">left</Divider>\n        <Divider>center</Divider>\n        <Divider orientation=\"right\">right</Divider>\n      </View>\n      <Text className=\"demo-title\">dashed</Text>\n      <View className=\"demo-content\">\n        <Divider />\n        <Divider dashed />\n      </View>\n\n      <Text className=\"demo-title\">direction</Text>\n      <View className=\"demo-content\">\n        <View className=\"divider-paragraph\">\n          <Text className=\"divider-demo-text\">文本</Text>\n          <Divider direction=\"ver\" />\n          <Text className=\"divider-demo-text\">文本</Text>\n          <Divider direction=\"ver\" />\n          <Text className=\"divider-demo-text\">文本</Text>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Drawer",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "抽屉",
    "importStatement": "import { Drawer } from '@alifd/meet';",
    "body": "\n# Drawer\n\n抽屉式弹出\n\n API\n\n| 参数            | 说明                                                                  | 类型                       | 默认值              |\n| --------------- | --------------------------------------------------------------------- | -------------------------- | ------------------- |\n| visible         | 是否显示                                                              | Boolean                    | false               |\n| placement       | 抽屉放置的位置 <br/>可选值:<br/> `top` `bottom` `left` `right`        | Enum                       | `right`             |\n| width           | 宽度（left/right 时配置）                                             | Number                     | auto                |\n| height          | 高度（top/bottom 时配置）                                             | Number                     | auto                |\n| title           | 标题                                                                  | String                     | -                   |\n| closeMode       | 关闭模式 <br/>可选值:<br/> `['mask', 'close']` `['mask']` `['close']` | Enum                       | `['mask', 'close']` |\n| onClose         | 隐藏时回调                                                            | (reason) => void           |                     |\n| onMaskClick     | 遮盖背景被点击时调用                                                  | () => void                 |                     |\n| onVisibleChange | 遮盖背景被点击时调用                                                  | (visible?:boolean) => void |                     |\n\n### CSS Variables\n\n| 名称                          | 说明             | 默认值                              |\n| :---------------------------- | :--------------- | :---------------------------------- |\n| `--drawer-content-bg-color`   | 内容背景色       | `--color-white`                     |\n| `--drawer-content-shadow`     | 阴影             | `--shadow-zero`                     |\n| `--drawer-content-corner`     | 圆角             | `--corner-zero`                     |\n| `--drawer-title-padding`      | 标题内边距       | `--box-medium-padding`              |\n| `--drawer-title-border-width` | 标题底部边框宽度 | `--box-medium-border-width`         |\n| `--drawer-title-border-color` | 标题底部边框颜色 | `--box-normal-outline-border-color` |\n| `--drawer-title-font-color`   | 标题字体颜色     | `--color-black`                     |\n| `--drawer-title-font-size`    | 标题字体大小     | `--p-subhead-font-size`             |\n| `--drawer-close-icon-size`    | 关闭图标尺寸     | `--p-caption-icon-size`             |\n| `--drawer-close-icon-color`   | 关闭图标颜色     | `--color-text1-2`                   |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Drawer, Radio, Checkbox, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('bottom');\n  const [showTitle, setShowTitle] = useState(false);\n  const [closeMode, setCloseMode] = useState(['mask']);\n\n  const open = (p) => {\n    setPlacement(p);\n    setVisible(true);\n  };\n\n  const close = () => {\n    setVisible(false);\n  };\n\n  const sizeProps = {};\n\n  if (['top', 'bottom'].indexOf(placement) !== -1) {\n    sizeProps.height = '600rpx';\n  } else {\n    sizeProps.width = '400rpx';\n  }\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Direction</Text>\n      <View className=\"demo-content btn-container\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">Title</View>\n          <View className=\"demo-item-content\">\n            <Radio.Group\n              direction=\"hoz\"\n              value={showTitle}\n              dataSource={[\n                {\n                  label: 'yes',\n                  value: true,\n                },\n                {\n                  label: 'no',\n                  value: false,\n                },\n              ]}\n              onChange={(v) => {\n                setShowTitle(v);\n              }}\n            />\n          </View>\n        </View>\n\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">close</View>\n          <View className=\"demo-item-content\">\n            <Checkbox.Group\n              direction=\"hoz\"\n              value={closeMode}\n              dataSource={['close', 'mask']}\n              onChange={(v) => {\n                setCloseMode(v);\n              }}\n            />\n          </View>\n        </View>\n        <Button type=\"primary\" className=\"btn\" onClick={() => open('left')}>\n          Open Left Drawer\n        </Button>\n        <Button type=\"primary\" className=\"btn\" onClick={() => open('right')}>\n          Open Right Drawer\n        </Button>\n        <Button type=\"primary\" className=\"btn\" onClick={() => open('top')}>\n          Open Top Drawer\n        </Button>\n        <Button type=\"primary\" className=\"btn\" onClick={() => open('bottom')}>\n          Open Bottom Drawer\n        </Button>\n      </View>\n\n      <Drawer\n        title={showTitle ? 'Title' : ''}\n        closeMode={closeMode}\n        placement={placement}\n        {...sizeProps}\n        visible={visible}\n        containerClassName=\"drawer-container\"\n        onClose={(reason) => {\n          console.log('closed by ', reason);\n          close();\n        }}\n        onVisibleChange={(visible) => {\n          console.log('visible change', visible);\n        }}\n        onMaskClick={() => {\n          console.log('mask click');\n        }}\n      >\n        <View className=\"drawer-content\" />\n      </Drawer>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Field",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "表单域",
    "importStatement": "import { Field } from '@alifd/meet';",
    "body": "\n# Field\n\n涉及到表单数据操作、校验的地方都可以用 Field 来管理数据。和组件关联后可以自动对表单数据进行回写、读取、校验。\n\n### 使用注意\n\n- 使用 Field `init` 过的组件, `value` `onChange` 必须放在 init 的第三个参数, 否则有可能被 init 覆盖。\n- `Form`已经和`Field` 在`数据获取`和`自动校验提示`方面做了深度优化，建议在`Form`中使用`Field`, 请查看 Form demo。\n- initValue 类似组件的 defaultValue 只有在组件第一次 render 的时候才生效(ajax 异步调用设置 initValue 可能已经错过了第一次 render)\n- autoUnmount 默认打开的，如果需要保留会 `自动卸载的组件` 数据请关闭此项\n- `parseName=true` 可以通过 `getValues` 获取到结构化的数据, 但是 getValue 还是必须传完整 key 值\n\n API\n\n### 初始化\n\n```\nlet myfield = new Field(this [,options]);\n```\n\n| 参数    | 说明                       | 类型            | 可选值   | 默认值 |\n| ------- | -------------------------- | --------------- | -------- | ------ |\n| this    | 传入调用 class 的 this     | React.Component | 必须设置 |        |\n| options | 一些事件配置, 详细参数如下 | Object          | 非必须   |        |\n\n`options` 配置项\n\n| 参数               | 说明                                                                                                                                    | 类型                 | 默认值 |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | ------ |\n| onChange           | 所有组件的 change 都会到达这里[setValue 不会触发该函数]                                                                                 | Function(name,value) |        |\n| parseName          | 是否翻译`init(name)`中的`name`(getValues 会把带`.`的字符串转换成对象)                                                                   | Boolean              | false  |\n| forceUpdate        | 仅建议 PureComponent 的组件打开此强制刷新功能，会带来性能问题(500 个组件为例：打开的时候 render 花费 700ms, 关闭时候 render 花费 400ms) | Boolean              | false  |\n| scrollToFirstError | field.validate 的时候滚动到第一个出错的组件, 如果是整数会进行偏移                                                                       | Boolean/Number       | true   |\n| autoUnmount        | 自动删除 Unmout 元素，如果想保留数据可以设置为 false                                                                                    | Boolean              | true   |\n| autoValidate       | 是否修改数据的时候就自动触发校验, 设为 false 后只能通过 validate() 来触发校验                                                           | Boolean              | true   |\n| values             | 初始化数据                                                                                                                              | Object               |        |\n\n#### API 接口\n\n`new`之后的对象提供的 api 接口 （例：`myfield.getValues()`）(`set` 开头的 api 函数不要在 render 里面操作, 可能会触发死循环)\n\n| 参数           | 说明                                                                     | 类型                                                            | 可选值                         | 默认值 |\n| -------------- | ------------------------------------------------------------------------ | --------------------------------------------------------------- | ------------------------------ | ------ |\n| init           | 初始化每个组件，[详细参数如下](#init)）                                  | Function(name:String, option:Object)                            |                                |        |\n| getValues      | 获取一组输入控件的值，如不传入参数，则获取全部组件的值                   | Function([names: String[]])                                     |                                |        |\n| getValue       | 获取单个输入控件的值                                                     | Function(name: String)                                          |                                |        |\n| setValues      | 设置一组输入控件的值（会触发 render，请遵循 react 时机使用)              | Function(obj: Object)                                           |                                |        |\n| setValue       | 设置单个输入控件的值 （会触发 render，请遵循 react 时机使用)             | Function(name: String, value)                                   |                                |        |\n| validate       | 校验并获取一组输入域的值与 Error                                         | Function([names: String[]], callback: Function(errors, values)) |                                |        |\n| getError       | 获取单个输入控件的 Error                                                 | Function(name: String)                                          |                                |        |\n| getErrors      | 获取一组输入控件的 Error                                                 | Function([name: String])                                        |                                |        |\n| setError       | 设置单个输入控件的 Error                                                 | Function(name: String, errors:String/Array[String])             |                                |        |\n| setErrors      | 设置一组输入控件的 Error                                                 | Function(obj: Object)                                           |                                |        |\n| reset          | 重置一组输入控件的值、清空校验                                           | Function([names: String[]])                                     |                                |        |\n| resetToDefault | 重置一组输入控件的值为默认值                                             | Function([names: String[]])                                     |                                |        |\n| getState       | 判断校验状态                                                             | Function(name: String)                                          | 'error' 'success' 'loading' '' | ''     |\n| getNames       | 获取所有组件的 key                                                       | Function()                                                      |                                |        |\n| remove         | 删除某一个或者一组控件的数据，删除后与之相关的 validate/value 都会被清空 | Function(name: String/String[])                                 |                                |        |\n| spliceArray    | 删除 name 是数组格式的数据, 并且自动处理其他 name 的数组错位问题         | Function(keyMatch: String, index: Number)                       |                                |        |\n\n#### init\n\n```\ninit(name, options, props)\n```\n\n| 参数                      | 说明                                                                                          | 类型                                               | 可选值 | 默认值     |\n| ------------------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------- | ------ | ---------- |\n| name                      | 必填输入控件唯一标志                                                                          | String                                             |        |            |\n| options.valueName         | 组件值的属性名称，如 Checkbox 的是 `checked`，Input 是 `value`                                | String                                             |        | 'value'    |\n| options.initValue         | 组件初始值(组件第一次 render 的时候才会读取，后面再修改此值无效),类似 defaultValue            | any                                                |        |            |\n| options.trigger           | 触发数据变化的事件名称                                                                        | String                                             |        | 'onChange' |\n| options.rules             | 校验规则                                                                                      | Array/Object                                       |        |            |  |\n| options.getValueFromEvent | 自定义从`onChange`事件中获取 value 的方式，一般不需要设置. 详细用法查看 demo `自定义数据获取` | Function(value,...args) 参数顺序和组件是完全一致的 |        |            |  |\n| props                     | 组件自定义的事件可以写在这里                                                                  | Object                                             |        |            |  |\n| autoValidate              | 是否修改数据的时候自动触发校验单个组件的校验, 设为 false 后只能通过 validate() 来触发校验     | Boolean                                            | true   |\n\n返回值\n\n```\n{id,value,onChange}\n```\n\n#### rules\n\n```\n{\n    rules:[{ required: true }]\n}\n```\n\n多个 rule\n\n```\n{\n    rules:[{required:true,trigger:'onBlur'},{pattern:/abcd/,message:'abcd不能缺'},{validator:(rule, value, callback)=>{callback('出错了')}}]\n}\n```\n\n| 参数      | 说明                                                                  | 类型                          | 可选值                  | 使用类型                             |\n| --------- | --------------------------------------------------------------------- | ----------------------------- | ----------------------- | ------------------------------------ |\n| required  | 不能为空                                                              | Boolean                       | true                    | `undefined/null/“”/[]` 会触发此规则) |\n| pattern   | 校验正则表达式                                                        | 正则                          |                         |                                      |\n| minLength | 字符串最小长度 / 数组最小个数                                         | Number                        |                         | String/Number/Array                  |\n| maxLength | 字符串最大长度 / 数组最大个数                                         | Number                        |                         | String/Number/Array                  |\n| length    | 字符串精确长度 / 数组精确个数                                         | Number                        |                         | String/Number/Array                  |\n| min       | 最小值                                                                | Number                        |                         | String/Number                        |\n| max       | 最大值                                                                | Number                        |                         | String/Number                        |\n| format    | 对常用 pattern 的总结                                                 | String                        | url、email、tel、number | String                               |\n| validator | 自定义校验,(校验成功的时候不要忘记执行 `callback()`,否则会校验不返回) | Function(rule,value,callback) |                         |                                      |\n| trigger   | 触发校验的事件名称                                                    | String/Array                  | onChange/onBlur/...     | onChange                             |\n| message   | 出错时候信息                                                          | String                        |                         |                                      |\n\n## 自定义组件接入 Field 标准\n\n- 支持受控模式(value+onChange) `必须`\n\n  - value 控制组件数据展现\n  - onChange 组件发生变化时候的回调函数（第一个参数可以给到 value)\n\n- 一次完整操作抛一次 onChange 事件 `建议`\n  比如有 Process 表示进展中的状态，建议增加 API `onProcess`；如果有 Start 表示启动状态，建议增加 API `onStart`\n\n- `value={undefined}`的时候清空数据, field 的 reset 函数会给所有组件下发 undefined 数据 `建议`\n\n```\ncomponentWillReceiveProps(nextProps) {\n    if ('value' in nextProps ) {\n        this.setState({\n           value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n        })\n    }\n}\n```\n\n## 已知问题\n\n- 为何手动调用`this.field.validate`的时候进不了回调函数？ 答: 是不是自定义了 validator 方法,确保`callback`在任何分支下都能被执行到。\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  state = {\n    display: '',\n  };\n\n  field = Field.create(this, { values: { input: 0 } });\n\n  onGetValue() {\n    const val = this.field.getValue('input');\n    this.setState({\n      display: val,\n    });\n\n    console.log(val);\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>Basic</Text>\n          <View style={styles.row}>\n            <input {...init('input')} />\n          </View>\n          <View style={styles.row}>\n            <Button size=\"small\" type=\"primary\" onClick={this.onGetValue.bind(this)}>\n              getValue\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => setValue('input', 'set me by click')}>\n              setValue\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => reset()}>\n              reset\n            </Button>\n          </View>\n          <View style={styles.row}>\n            <Text>{this.state.display}</Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "关联控制 - controlled",
        "order": 1,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  field = Field.create(this, {\n    onChange: (name, value) => {\n      console.log(this.field.getValues());\n\n      switch (name) {\n        case 'input':\n          this.field.setValue('sync', `change to: ${value}`);\n          break;\n      }\n    },\n  });\n\n  render() {\n    const { init, getValue } = this.field;\n    const layout = {\n      marginBottom: 10,\n      width: 400,\n    };\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>onChange</Text>\n          <View style={styles.row}>\n            <input placeholder=\"controlled by onChange\" {...init('input')} style={layout} />\n            <br />\n          </View>\n          <View style={styles.row}>\n            <input placeholder=\"under control\" {...init('input')} style={layout} />\n            <br />\n          </View>\n          <View style={styles.row}>\n            <input placeholder=\"everyone can control me\" {...init('sync')} style={layout} />\n            <br />\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "自定义返回值 - custom event value",
        "order": 2,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  field = Field.create(this);\n\n  normFile(list) {\n    if (Array.isArray(list)) {\n      return list;\n    }\n    return list && list.fileList;\n  }\n\n  normDate(date, strdate) {\n    console.log('normDate:', date, strdate);\n    return strdate;\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>Normalize</Text>\n          <View style={styles.row}>\n            <input\n              {...init('name', {\n                getValueFromEvent: (e) => {\n                  const value = (e.target && e.target.value) || '';\n                  if (value.match(/##/)) {\n                    return value;\n                  } else {\n                    return `## title-${value}`;\n                  }\n                },\n              })}\n            />\n            <Button\n              type=\"small\"\n              type=\"primary\"\n              onClick={() => {\n                console.log(this.field.getValues());\n              }}\n            >\n              getValues\n            </Button>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "自定义错误 - custom errors",
        "order": 3,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  field = new Field(this);\n\n  validate = () => {\n    console.log(this.field.getErrors());\n    this.field.validate((error, values) => {\n      // eslint-disable-next-line no-alert\n      alert(JSON.stringify(error));\n    });\n  };\n\n  render() {\n    const { init, getError, setError, setErrors } = this.field;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>setError</Text>\n          <View style={styles.row}>\n            <input\n              {...init('input', {\n                rules: [\n                  {\n                    required: true,\n                    pattern: /hello/,\n                    message: 'must be hello',\n                  },\n                ],\n              })}\n            />\n          </View>\n          <View style={styles.row}>\n            <span style={{ color: 'red' }}>{getError('input')}</span>\n          </View>\n          <View style={styles.row}>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => {\n                setError('input', 'set error 1');\n              }}\n            >\n              setError\n            </Button>\n\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => {\n                setErrors({ input: 'set error 2' });\n              }}\n            >\n              setErrors\n            </Button>\n\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => {\n                setErrors({ input: '' });\n              }}\n            >\n              clear\n            </Button>\n          </View>\n          <View style={styles.row}>\n            <input {...init('input2')} />\n          </View>\n          <View style={styles.row}>\n            <span style={{ color: 'red' }}>{getError('input2')}</span>\n          </View>\n          <View style={styles.row}>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => {\n                setError('input2', 'errors will be removed by onChange and shown on validate');\n              }}\n            >\n              setError\n            </Button>\n\n            <Button type=\"primary\" size=\"small\" onClick={this.validate}>\n              validate\n            </Button>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "校验 - validatePromise",
        "order": 4,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  field = Field.create(this, { scrollToFirstError: -10 });\n\n  userName(rule, value) {\n    if (value === 'frank') {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => reject('name existed'), 200);\n      });\n    } else {\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(null), 200);\n      });\n    }\n  }\n\n  render() {\n    const init = this.field.init;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>validate</Text>\n          <View style={styles.row}>\n            <input {...init('input', { initValue: 'delete all', rules: { required: true } })} />\n            {this.field.getError('input') ? (\n              <span style={{ color: 'red' }}>{this.field.getError('input').join(',')}</span>\n            ) : (\n              ''\n            )}\n          </View>\n          <View style={styles.row}>\n            <input\n              placeholder=\"try onBlur\"\n              {...init('input1', {\n                rules: [\n                  {\n                    required: true,\n                    message: 'can not be empty',\n                    trigger: ['onBlur', 'onChange'],\n                  },\n                ],\n              })}\n            />\n            {this.field.getError('input1') ? (\n              <span style={{ color: 'red' }}>{this.field.getError('input1').join(',')}</span>\n            ) : (\n              ''\n            )}\n          </View>\n          <View style={styles.row}>\n            <input\n              defaultValue=\"\"\n              placeholder=\"try frank\"\n              {...init('username', {\n                rules: [\n                  {\n                    validator: this.userName,\n                    trigger: ['onBlur', 'onChange'],\n                  },\n                ],\n              })}\n            />\n            {this.field.getState('username') === 'loading' ? 'validating...' : ''}\n            {this.field.getError('username') ? (\n              <span style={{ color: 'red' }}>{this.field.getError('username').join(',')}</span>\n            ) : (\n              ''\n            )}\n          </View>\n\n          <View style={styles.row}>\n            <Button\n              size=\"small\"\n              type=\"primary\"\n              onClick={() => {\n                this.field.validate().then(({ errors, values }) => {\n                  console.log(errors, values);\n                });\n              }}\n            >\n              validate\n            </Button>\n            <Button\n              size=\"small\"\n              type=\"primary\"\n              onClick={() => {\n                this.field.reset();\n              }}\n            >\n              reset\n            </Button>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "自动卸载 - auto unmount",
        "order": 6,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  state = {\n    show: true,\n    show2: true,\n  };\n  field = new Field(this);\n  field2 = new Field(this, { autoUnmount: false });\n\n  render() {\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>Auto Unmount</Text>\n          <View style={styles.row}>\n            {this.state.show ? <input {...this.field.init('name', { initValue: 'autoUnmount = true' })} /> : null}\n            <Button\n              size=\"small\"\n              type=\"primary\"\n              onClick={() => {\n                console.log('value auto delete', this.field.getValues());\n              }}\n            >\n              print\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => this.setState({ show: false })}>\n              delete\n            </Button>\n          </View>\n          <View style={styles.row}>\n            {this.state.show2 ? <input {...this.field2.init('name2', { initValue: 'autoUnmount = false' })} /> : null}\n            <Button\n              size=\"small\"\n              type=\"primary\"\n              onClick={() => {\n                console.log('value always exist', this.field2.getValues());\n              }}\n            >\n              print\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => this.setState({ show2: false })}>\n              delete\n            </Button>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 10,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass Custom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: typeof props.value === 'undefined' ? [] : props.value,\n    };\n  }\n\n  // update value\n  componentWillReceiveProps(nextProps) {\n    if ('value' in nextProps) {\n      this.setState({\n        value: typeof nextProps.value === 'undefined' ? [] : nextProps.value,\n      });\n    }\n  }\n\n  onAdd = () => {\n    const value = this.state.value.concat([]);\n    value.push('new');\n\n    this.setState({\n      value,\n    });\n    this.props.onChange(value);\n  };\n\n  render() {\n    return (\n      <div className=\"custom\">\n        {this.state.value.map((v, i) => {\n          return (\n            <Button size=\"small\" key={i}>\n              {v}\n            </Button>\n          );\n        })}\n        <Button size=\"small\" type=\"primary\" onClick={this.onAdd.bind(this)}>\n          Add ＋{' '}\n        </Button>\n      </div>\n    );\n  }\n}\n\n/* eslint-disable react/no-multi-comp */\nclass DemoComponent extends Component {\n  field = Field.create(this, {\n    deepReset: true,\n  });\n\n  onGetValue() {\n    console.log(this.field.getValue('custom'));\n  }\n\n  render() {\n    const { init, setValue, reset } = this.field;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>Custom</Text>\n          <View style={styles.row}>\n            <Custom {...init('custom', { initValue: ['test'] })} />\n          </View>\n          <View style={styles.row}>\n            <Button size=\"small\" type=\"primary\" onClick={this.onGetValue.bind(this)}>\n              getValue\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => setValue('custom', ['test', 'setValue'])}>\n              setValue\n            </Button>\n            <Button size=\"small\" onClick={() => reset()}>\n              reset\n            </Button>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "结构化解析 - Parse Array or Object",
        "order": 11,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nclass DemoComponent extends Component {\n  field = new Field(this, {\n    parseName: true,\n    values: {\n      objWithDefaults: {\n        a: 1,\n        b: 2,\n      },\n    },\n  });\n\n  onGetValue() {\n    console.log(this.field.getValues());\n  }\n\n  onSetValue() {\n    this.field.setValues({\n      obj: {\n        b: 'b',\n        c: 'c',\n      },\n      arr: ['first', 'second'],\n    });\n  }\n\n  render() {\n    const { init, reset, resetToDefault } = this.field;\n\n    return (\n      <View style={styles.wrap}>\n        <View style={styles.block}>\n          <Text>toPath</Text>\n          <View style={styles.row}>\n            <h3>Object transfer</h3>\n            obj.b: <input {...init('obj.b', { initValue: 'test1' })} /> &nbsp; obj.c: <input {...init('obj.c', { initValue: 'test2' })} />\n          </View>\n          <View style={styles.row}>\n            <h3>Array transfer</h3>\n            arr.0: <input {...init('arr.0', { initValue: '0' })} /> &nbsp; arr.1: <input {...init('arr.1', { initValue: '1' })} />\n          </View>\n          <View style={styles.row}>\n            <h3>Object with Defaults</h3>\n            objWithDefaults.a: <input {...init('objWithDefaults.a')} /> &nbsp; objWithDefaults.b: <input {...init('objWithDefaults.b')} />\n          </View>\n          <View style={styles.row}>\n            <Button size=\"small\" type=\"primary\" onClick={this.onGetValue.bind(this)}>\n              getValues\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={this.onSetValue.bind(this)}>\n              setValues\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => reset()}>\n              reset\n            </Button>\n            <Button size=\"small\" type=\"primary\" onClick={() => resetToDefault()}>\n              resetToDefault\n            </Button>\n          </View>\n          <View style={styles.row}>\n            <pre>{JSON.stringify(this.field.getValues(), null, 2)}</pre>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "title": "Functional Component with React Hooks",
        "order": 12,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, Field, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  wrap: {\n    padding: '16rpx',\n  },\n  block: {\n    marginBottom: '20rpx',\n  },\n  row: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: '20rpx',\n    paddingBottom: '20rpx',\n    marginTop: '20rpx',\n  },\n};\n\nfunction DemoComponent() {\n  const field = Field.useField();\n\n  const { init, setValue, reset } = field;\n\n  function onGetValue() {\n    console.log(field.getValue('input'));\n  }\n\n  function onSetValue() {\n    field.setValue('input', 'xyz');\n  }\n\n  return (\n    <View style={styles.wrap}>\n      <View style={styles.block}>\n        <Text>useField</Text>\n        <View style={styles.row}>\n          <input {...init('input', { initValue: 'test' })} />\n          <Button size=\"small\" type=\"primary\" onClick={onSetValue}>\n            {' '}\n            setValue{' '}\n          </Button>\n          <Button size=\"small\" type=\"primary\" onClick={onGetValue}>\n            {' '}\n            getValue{' '}\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nrender(<DemoComponent />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Form",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "表单",
    "importStatement": "import { Form } from '@alifd/meet';",
    "body": "\n# Form\n\n用于表单布局\n\n API\n\n### Form\n\n| 属性                    | 含义                                                                                  | 类型                             | 默认值 | 备注                                                       |\n| ----------------------- | ------------------------------------------------------------------------------------- | -------------------------------- | ------ | ---------------------------------------------------------- |\n| labelWidth              | label 宽度                                                                            | Number                           | 100    |                                                            |\n| labelAlign              | label 对齐方式 <br/> 可选值： <br/> `top`, `inset`                                    | Enum                             | top    | 移动端暂不实现 left                                        |\n| labelTextAlign          | label 的水平文本对齐方式,labelAlign 为 top 时无效 <br/> 可选值: <br/> `left`, `right` | Enum                             | left   |                                                            |\n| contentAlign            | 内容区域对齐方式                                                                      | Enum                             | left   |                                                            |\n| size                    | Form 的 size。                                                                        | Enum                             | medium |                                                            |\n| field                   | field 实例，不传会自动创建                                                            | Field                            | \\-     |                                                            |\n| saveField               | 保存自动创建的 Field 对象                                                             | \\(field: Field\\) => void         | \\-     |                                                            |\n| autoUnmount             | 自动删除 Unmout 元素                                                                  | Boolean                          | TRUE   |                                                            |\n| autoValidate            | 修改数据时自动校验                                                                    | Boolean                          | TRUE   |                                                            |\n| value                   | 表单数值                                                                              | Object                           | \\-     | 如果 field 来自外界，请务必提前调用 field\\.setValue 设置值 |\n| defaultValue            | 表单数值                                                                              | Object                           | \\-     |                                                            |\n| onSubmit                | 表单提交回调，Form\\.Submit 或 htmlType=\"sumit\" 的元素会触发                           | \\(error, value, field \\) => void | \\-     |                                                            |\n| onChange                | 表单变化回调                                                                          | \\(value\\) => void                | \\-     |                                                            |\n| isPreview               | 是否开启预览态                                                                        | Boolean                          | FALSE  |                                                            |\n| useLabelForErrorMessage | 使用 label 作为错误信息                                                               | Boolean                          | TRUE   |                                                            |\n\n#### Form.Item\n\n| 属性                | 含义                                                                                                          | 类型                            | 默认值 | 备注                    |\n| ------------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------- | ------ | ----------------------- |\n| label               | 标签文本                                                                                                      | RaxNode                         |        |                         |\n| labelWidth          | label 宽度                                                                                                    | Number                          | 100    |                         |\n| labelAlign          | label 对齐方式                                                                                                | Enum                            | top    | 移动端暂不实现 left     |\n| labelTextAlign      | label 的水平文本对齐方式,labelAlign 为 top 时无效 <br/> 可选值: <br/> `left`, `right`                         | Enum                            | left   |                         |\n| textAlign           | 内容区域对齐方式                                                                                              | Enum                            | left   |                         |\n| size                | 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。 | Enum                            |        |                         |\n| help                | 自定义提示信息                                                                                                | RaxNode                         |        |                         |\n| validateState       | 校验状态，如不设置，则会根据校验规则自动生成                                                                  | Enum                            | \\-     | normal 代表无特殊状态。 |\n| hasFeedback         | 配合 validateState 属性使用，是否展示校验状态图标, 目前只有 Input 支持                                        | Boolean                         | false  |                         |\n| required            | \\[校验\\]是否必填                                                                                              | Boolean                         | FALSE  |                         |\n| requiredMessage     | \\[校验\\]必填自定义错误信息                                                                                    | String                          | \\-     |                         |\n| minLength           | \\[校验\\]字符串最小长度                                                                                        | Number                          |        |                         |\n| maxLength           | \\[校验\\]字符串最大长度                                                                                        | Number                          |        |                         |\n| minmaxLengthMessage | \\[校验\\]长度自定义错误信息                                                                                    | String                          |        |                         |\n| pattern             | \\[校验\\]正则校验                                                                                              | RegExp                          |        |                         |\n| patternMessage      | \\[校验\\]正则自定义错误信息                                                                                    | String                          |        |                         |\n| format              | \\[校验\\]几种常用 format                                                                                       | Enum                            |        |                         |\n| formatMessage       | \\[校验\\]format 自定义错误信息                                                                                 | String                          |        |                         |\n| validator           | \\[校验\\]自定义校验函数。                                                                                      | `(value: any) => Promise<void>` |        |                         |\n| isPreview           | 是否开启预览态                                                                                                | Boolean                         | FALSE  |                         |\n| renderPreview       | 预览态模式下渲染内容                                                                                          | \\(value\\) => RaxNode            |        |                         |\n| valuePropName       | 自定义子元素的 value 名称（如 checked）                                                                       | String                          |        |                         |\n\n#### Form.Submit\n\n用于提交表单。除支持 Button 所有 Props 外，额外支持：\n\n| 属性     | 含义         | 类型                             | 默认值 | 备注 |\n| -------- | ------------ | -------------------------------- | ------ | ---- |\n| onClick  | 点击后回调   | \\(error, value, field \\) => void |        |      |\n| validate | 是否需要校验 | boolean                          | true   |      |\n\n#### Form.Reset\n\n用于重置表单。除支持 Button 所有 Props 外，额外支持：\n\n| 属性      | 含义             | 类型     | 默认值 | 备注 |\n| --------- | ---------------- | -------- | ------ | ---- |\n| names     | 需要重置的表单项 | string[] |        |      |\n| toDefault | 是否重置回默认值 | boolean  | true   |      |\n\n### CSS Variables\n\n| 名称                                  | 说明             | 默认值                    |\n| :------------------------------------ | :--------------- | :------------------------ |\n| `--form-bg-color`                     | 表单背景色       | `--color-white`           |\n| `--form-label-font-size`              | 标签字号         | `--p-caption-font-size`   |\n| `--form-label-inset-large-font-size`  | 内嵌标签字号(大) | `--p-subhead-font-size`   |\n| `--form-label-inset-medium-font-size` | 内嵌标签字号(中) | `--p-body-2-font-size`    |\n| `--form-label-inset-small-font-size`  | 内嵌标签字号(小) | `--p-body-1-font-size`    |\n| `--form-label-inset-margin-right`     | 内嵌标签右边距   | `--s-3`                   |\n| `--form-label-color`                  | 标签颜色         | `--color-text1-4`         |\n| `--form-label-color`                  | 标签颜色         | `--color-text1-4`         |\n| `--form-help-color`                   | 辅助文案颜色     | `--color-text1-2`         |\n| `--form-error-color`                  | 错误文案颜色     | `--color-error-3`         |\n| `--form-border-color`                 | 边框颜色         | `--color-line1-3`         |\n| `--form-required-font-size`           | 星号字号         | `--s-2`                   |\n| `--form-required-inset-font-size`     | 内嵌星号字号     | `--s-1`                   |\n| `--form-required-color`               | 星号颜色         | `--color-error-3`         |\n| `--form-item-spacing`                 | item 边距        | `--box-medium-margin-top` |\n| `--form-item-spacing-inset`           | 内嵌 item 边距   | `--box-medium-margin-top` |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Text from 'rax-text';\nimport View from 'rax-view';\nimport dayjs from 'dayjs';\nimport { Form, Button, Input, Radio, Switch, DatePicker, Select, Checkbox, NumberPicker } from '@alifd/meet';\n\n\nconst Demo = () => {\n  const [opts, setOpts] = useState({\n    labelAlign: 'top',\n    contentAlign: 'left',\n    labelWidth: 'auto',\n    labelTextAlign: 'left',\n    size: 'medium',\n    isPreview: 0,\n  });\n  const handleSubmit = (values, errors) => console.log(values, errors);\n  const handleChange = (values) => setOpts({ ...opts, ...values });\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Form</Text>\n      <View className=\"demo-content\" style={{ padding: 0 }}>\n        <Form {...opts} onSubmit={handleSubmit}>\n          <Form.Item hasFeedback label=\"用户名\" required={true} requiredMessage=\"Must Input User Name\">\n            <Input outline={false} name=\"username\" placeholder=\"Please Input User Name\" />\n          </Form.Item>\n          <Form.Item\n            label=\"密码\"\n            required={true}\n            requiredMessage=\"Must Input Password\"\n            minLength={6}\n            maxLength={16}\n            hasFeedback\n            minmaxMessage=\"Password must between 6 and 16\"\n          >\n            <Input name=\"password\" isPassword hasClear placeholder=\"Please Input Password\" />\n          </Form.Item>\n          <Form.Item label=\"地址\">\n            <Input\n              outline={false}\n              name=\"address\"\n              placeholder=\"Please input address\"\n              onChange={(value) => console.log('Test onChange', value)}\n            />\n          </Form.Item>\n          <Form.Item label=\"城市(只读)\" help=\"此为只读项\">\n            <Input readOnly outline={false} name=\"city\" placeholder=\"readOnly\" value={'杭州'} />\n          </Form.Item>\n          <Form.Item label=\"性别\">\n            <Switch name=\"gender\" />\n          </Form.Item>\n\n          <Form.Item label=\"年龄\">\n            <NumberPicker name=\"age\" />\n          </Form.Item>\n          <Form.Item\n            label=\"日期\"\n            renderPreview={(v) => {\n              return dayjs(v).format('YYYY/MM/DD');\n            }}\n          >\n            <DatePicker name=\"date\" placeholder=\"Please select a date\" />\n          </Form.Item>\n          <Form.Item label=\"省份\">\n            <Radio.Group name=\"province\" dataSource={['浙江', '江苏', '山东']} />\n          </Form.Item>\n          <Form.Item label=\"学科\">\n            <Checkbox.Group name=\"discipline\" direction=\"hoz\" dataSource={['语文', '数学', '英语']} />\n          </Form.Item>\n          <View className=\"form-footer\">\n            <Form.Reset className=\"form-btn\" block type=\"warning\" model=\"outline\">\n              Reset\n            </Form.Reset>\n            <Form.Submit className=\"form-btn\" block type=\"primary\">\n              Submit\n            </Form.Submit>\n          </View>\n        </Form>\n      </View>\n      <View className=\"control-panel\">\n        <Form labelAlign=\"inset\" value={opts} onChange={handleChange} labelWidth=\"200rpx\">\n          <Form.Item label=\"labelAlign\">\n            <Radio.Group direction=\"hoz\" dataSource={['top', 'inset']} name=\"labelAlign\" />\n          </Form.Item>\n          <Form.Item label=\"labelTextAlign\">\n            <Radio.Group direction=\"hoz\" dataSource={['left', 'right']} name=\"labelTextAlign\" />\n          </Form.Item>\n          <Form.Item label=\"labelWidth\">\n            <Radio.Group direction=\"hoz\" dataSource={['auto', 200]} name=\"labelWidth\" />\n          </Form.Item>\n          <Form.Item label=\"contentAlign\">\n            <Radio.Group direction=\"hoz\" dataSource={['left', 'right']} name=\"contentAlign\" />\n          </Form.Item>\n          <Form.Item label=\"size\">\n            <Radio.Group direction=\"hoz\" dataSource={['small', 'medium', 'large']} name=\"size\" />\n          </Form.Item>\n          <Form.Item label=\"isPreview\" valuePropName=\"checked\">\n            <Switch name=\"isPreview\" />\n          </Form.Item>\n        </Form>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 1,
        "jsx": "import { createElement, render, useState, useRef } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport {\n  Form,\n  Button,\n  InputField,\n  SwitchField,\n  SelectField,\n  NumberPickerField,\n  DatePickerField,\n  UploadField,\n  Radio,\n  Switch,\n} from '@alifd/meet';\n\n\nconst evaluate = [\n  {\n    label: '很好',\n    value: 'good',\n  },\n  {\n    label: '一般',\n    value: 'normal',\n  },\n  {\n    label: '很差',\n    value: 'bad',\n  },\n];\n\nconst Demo = () => {\n  const formInstance = useRef(null);\n  const [opts, setOpts] = useState({\n    labelAlign: 'top',\n    contentAlign: 'left',\n    size: 'medium',\n    isPreview: 0,\n  });\n  const handleSubmit = (values, errors) => console.log(values, errors);\n  const handleChange = (values) => setOpts({ ...opts, ...values });\n\n  const doSubmit = () => {\n    if (formInstance.current) {\n      formInstance.current.submit((data, errors) => {\n        console.log(data, errors);\n      });\n    }\n  };\n\n  const onSetValue = () => {\n    if (formInstance.current) {\n      formInstance.current.setValue({\n        name: 'Jack',\n        email: 'example@example.com',\n        score: 5,\n        evaluate: 'good',\n        anonymous: true,\n        remark: '我是备注信息',\n      });\n    }\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Form</Text>\n      <View className=\"demo-content\" style={{ padding: 0 }}>\n        <Form {...opts} onSubmit={handleSubmit} ref={formInstance}>\n          <InputField name=\"name\" label=\"用户名\" placeholder=\"请输入用户名\" required={true} />\n          <InputField name=\"email\" label=\"EMail\" placeholder=\"请输入邮箱地址\" format=\"email\" />\n          <DatePickerField name=\"date\" label=\"消费日期\" />\n          <NumberPickerField name=\"score\" min=\"1\" max=\"5\" defaultValue=\"5\" label=\"打几分\" />\n          <SelectField name=\"evaluate\" label=\"评价\" placeholder=\"选择您的评价\" dataSource={evaluate} />\n          <SwitchField name=\"anonymous\" label=\"匿名评价\" />\n          <InputField\n            name=\"remark\"\n            label=\"备注\"\n            multiline={true}\n            rows={3}\n            placeholder=\"如果您有其他需求，请在这里备注\"\n          />\n          <UploadField name=\"photo\" label=\"上传图片\" limit=\"5\" />\n        </Form>\n      </View>\n      <Text className=\"demo-title\">Form options</Text>\n      <View className=\"demo-content\">\n        <Form labelAlign=\"inset\" value={opts} onChange={handleChange} labelWidth=\"100px\">\n          <Form.Item label=\"labelAlign\">\n            <Radio.Group direction=\"hoz\" dataSource={['top', 'inset']} name=\"labelAlign\" />\n          </Form.Item>\n          <Form.Item label=\"contentAlign\">\n            <Radio.Group direction=\"hoz\" dataSource={['left', 'right']} name=\"contentAlign\" />\n          </Form.Item>\n          <Form.Item label=\"size\">\n            <Radio.Group direction=\"hoz\" dataSource={['small', 'medium', 'large']} name=\"size\" />\n          </Form.Item>\n          <Form.Item label=\"isPreview\" valuePropName=\"checked\">\n            <Switch name=\"isPreview\" />\n          </Form.Item>\n          <Form.Item label=\"actions\">\n            <Button onClick={doSubmit}>Submit</Button>\n            <Button onClick={onSetValue}>Set Value</Button>\n          </Form.Item>\n        </Form>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useRef } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Text from 'rax-text';\nimport View from 'rax-view';\nimport { Form, Button, DatePickerField } from '@alifd/meet';\n\n\nconst Demo = () => {\n  const form = useRef(null);\n\n  const today = new Date();\n  const sevenDays = new Date(today.getTime() + 7 * 24 * 3600 * 1000);\n\n  const handleClick = () => {\n    const rand = Math.floor(Math.random() * 7) * 24 * 3600 * 1000;\n    const newDate = new Date(today.getTime() + rand);\n    form.current.setValue({\n      date: newDate,\n    });\n  };\n\n  return (\n    <View>\n      <Form ref={form}>\n        <DatePickerField name=\"date\" label=\"选择日期\" validRange={[today, sevenDays]} showTime={true} />\n      </Form>\n      <Button onClick={handleClick}>设置</Button>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Text from 'rax-text';\nimport View from 'rax-view';\nimport { Form, Input, InputField, Field } from '@alifd/meet';\n\n\nclass Demo extends Component {\n  field = new Field(this);\n\n  render() {\n    return (\n      <View>\n        <Text className=\"demo-title\">Form</Text>\n        <View className=\"demo-content\" style={{ padding: 0 }}>\n          <Form field={this.field} onSubmit={(values, errors) => console.log(values, errors)}>\n            <Form.Item label=\"UserName\" required={true} requiredMessage=\"Must Input User Name\">\n              <Input outline={false} name=\"username\" placeholder=\"Please Input User Name\" />\n            </Form.Item>\n            <InputField name=\"email\" label=\"EMail\" placeholder=\"请输入邮箱地址\" format=\"email\" />\n            <View style={{ marginTop: '10px' }}>\n              <Form.Submit block type=\"primary\">\n                Submit\n              </Form.Submit>\n            </View>\n          </Form>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Icon",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "图标",
    "importStatement": "import { Icon } from '@alifd/meet';",
    "body": "\n# 图标\n\n基础图标组件\n\n API\n\n#### props\n\n| 参数 | 说明                                                                                         | 类型 | 默认值 |\n| ---- | -------------------------------------------------------------------------------------------- | ---- | ------ |\n| name | 图标名，可选列表见下方                                                                       | Enum |        |\n| size | 尺寸 <br/> 可选值： <br/> `xxs`,`xs`，`small`，`s`，`medium`，`m`，`large`，`l`，`xl`，`xxl` | Enum | m      |\n\n> [Fusion Mobile Iconfont 地址](https://www.iconfont.cn/manage/index?manage_type=myprojects&projectId=1273696)\n\n**支持图标列表**\n\n- add\n- minus\n- select\n- close\n- search\n- ashbin\n- semi-select\n- error\n- prompt\n- success\n- warning\n- help\n- arrow-left\n- arrow-right\n- arrow-up\n- arrow-down\n- arrow-double-left\n- arrow-double-right\n- triangle-arrow-up\n- triangle-arrow-down\n- triangle-arrow-left\n- triangle-arrow-right\n- toggle-left\n- toggle-right\n- loading\n- asterisk\n- upload\n- download\n- exit\n- ellipsis\n- calendar\n- list\n- chart-pie\n- chart-bar\n- detail\n- dashboard\n- unlock\n- lock\n- set\n- filter\n- eye\n- eye-close\n- copy\n- email\n- attachment\n- edit\n- account\n- refresh\n- smile\n- cry\n- switch\n- ascending\n- descending\n- sorting\n- picture\n- form\n- add-square\n- play-filling\n- heart-filling\n- prompt-filling\n- favorites-filling\n- warning-filling\n- success-filling\n- delete-filling\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst ICON_LIST = [\n  'add',\n  'minus',\n  'select',\n  'close',\n  'search',\n  'ashbin',\n  'semi-select',\n  'error',\n  'prompt',\n  'success',\n  'warning',\n  'help',\n  'arrow-left',\n  'arrow-right',\n  'arrow-up',\n  'arrow-down',\n  'arrow-double-left',\n  'arrow-double-right',\n  'triangle-arrow-up',\n  'triangle-arrow-down',\n  'triangle-arrow-left',\n  'triangle-arrow-right',\n  'toggle-left',\n  'toggle-right',\n  'loading',\n  'asterisk',\n  'upload',\n  'download',\n  'exit',\n  'picture',\n  'ellipsis',\n  'calendar',\n  'list',\n  'chart-pie',\n  'chart-bar',\n  'detail',\n  'dashboard',\n  'unlock',\n  'lock',\n  'set',\n  'filter',\n  'eye',\n  'eye-close',\n  'copy',\n  'email',\n  'attachment',\n  'edit',\n  'account',\n  'refresh',\n  'smile',\n  'cry',\n  'switch',\n  'ascending',\n  'descending',\n  'sorting',\n  'form',\n  'add-square',\n  'play-filling',\n  'heart-filling',\n  'prompt-filling',\n  'favorites-filling',\n  'warning-filling',\n  'success-filling',\n  'delete-filling',\n];\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">icon</Text>\n      <View className=\"demo-content icon-list\">\n        {ICON_LIST.map((icon) => {\n          return (\n            <View className=\"icon-item\" key={icon}>\n              <Icon className=\"icon\" size=\"large\" type={icon} />\n              <Text numberOfLines={2} className=\"icon-name\">\n                {icon}\n              </Text>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Input",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "文本输入框",
    "importStatement": "import { Input } from '@alifd/meet';",
    "body": "\n# Input\n\n单行/多行文本输入\n\n API\n\n### Props\n\n#### Input\n\n| 名称           | 说明                                                      | 类型                    | 默认值 |\n| :------------- | :-------------------------------------------------------- | :---------------------- | :----- |\n| size           | 尺寸 <br/>可选值<br/> `small`,`medium`,`large`            | Enum                    | medium |\n| type           | 展示状态<br/>可选值<br/>`normal`,`inverse`                | Enum                    | normal |\n| value          | 输入值（受控）                                            | String                  | -      |\n| defaultValue   | 默认输入值 （非受控）                                     | String                  | -      |\n| placeholder    | 输入提示文案                                              | String                  | -      |\n| keyboardType   | 输入框键盘类型<br/> 可选值参看 rax-textinput              | Enum                    |        |\n| isPassword     | 是否为密码                                                | Boolean                 | false  |\n| state          | 状态<br/>可选值<br/>`loading`,`success`,`warning`,`error` | Enum                    | -      |\n| maxLength      | 最大长度                                                  | Number                  | -      |\n| showLimitHint  | 是否展现最大长度样式                                      | Boolean                 | false  |\n| readOnly       | 文本框为只读态                                            | Boolean                 | false  |\n| hasClear       | 显示清空输入按钮                                          | Boolean                 | false  |\n| disabled       | 是否为禁用态                                              | Boolean                 | false  |\n| autoFocus      | 初始化时自动获得焦点                                      | Boolean                 | false  |\n| controlled     | 是否为受控模式                                            | Boolean                 | false  |\n| align          | 文本对齐方式<br/>可选值<br/>`left`,`right`                | Enum                    | left   |\n| addonBefore    | 文字前附加内容（与 innerBefore 相同）                     | RaxNode                 | null   |\n| innerBefore    | 文字前附加内容                                            | RaxNode                 | null   |\n| addonAfter     | 文字后附加内容（与 innerAfter 相同）                      | RaxNode                 | null   |\n| innerAfter     | 文字后附加内容                                            | RaxNode                 | null   |\n| useOriginalRef | 是否使用初始的 ref 值                                     | Boolean                 | false  |\n| onFocus        | focus 事件回调                                            | (e): void               |        |\n| onBlur         | blur 事件的回调                                           | (e): void               |        |\n| onChange       | change 事件的回调                                         | (value: string,e)=>void |        |\n| onClear        | 点击清空按钮 事件回调                                     | (value: string,e)=>void |        |\n| onConfirm      | 键盘确认按钮点击事件回调                                  | (value: string,e)=>void |        |\n\n#### Input.TextArea\n\n| 名称          | 说明                                                      | 类型                    | 默认值 |\n| :------------ | :-------------------------------------------------------- | :---------------------- | :----- |\n| size          | 尺寸 <br/>可选值<br/> `small`,`medium`,`large`            | Enum                    | medium |\n| type          | 展示状态<br/>可选值<br/>`normal`,`inverse`                | Enum                    | normal |\n| value         | 输入值（受控）                                            | String                  | -      |\n| defaultValue  | 默认输入值 （非受控）                                     | String                  | -      |\n| placeholder   | 输入提示文案                                              | String                  | -      |\n| keboardType   | 输入框键盘类型<br/> 可选值参看 rax-textinput              | Enum                    |        |\n| rows          | 行数                                                      | Number                  | 3      |\n| state         | 状态<br/>可选值<br/>`loading`,`success`,`warning`,`error` | Enum                    | -      |\n| maxLength     | 最大长度                                                  | Number                  | -      |\n| showLimitHint | 是否展现最大长度样式                                      | Boolean                 | false  |\n| readOnly      | 文本框为只读态                                            | Boolean                 | false  |\n| hasClear      | 显示清空输入按钮                                          | Boolean                 | false  |\n| disabled      | 是否为禁用态                                              | Boolean                 | false  |\n| autoFocus     | 自动获得焦点                                              | Boolean                 | false  |\n| controlled    | 是否为受控模式                                            | Boolean                 | false  |\n| align         | 文本对齐方式<br/>可选值<br/>`left`,`right`                | Enum                    | left   |\n| onFocus       | focus 事件回调                                            | (e): void               |        |\n| onBlur        | blur 事件的回调                                           | (e): void               |        |\n| onChange      | change 事件的回调                                         | (value: string,e)=>void |        |\n| onConfirm     | 键盘确认按钮点击事件回调                                  | (value: string,e)=>void |        |\n\n### CSS Variables\n\n| 名称                                  | 说明                     | 默认值                       |\n| :------------------------------------ | :----------------------- | :--------------------------- |\n| `--input-small-min-height`            | small-最小高             | `--box-small-min-height`     |\n| `--input-small-corner`                | small-圆角               | `--box-small-border-radius`  |\n| `--input-small-padding-tb`            | small-内间距             | `--box-small-padding`        |\n| `--input-small-spacing`               | small-内部间隙           | `--box-small-spacing`        |\n| `--input-small-border-width`          | small-边框宽度           | 0                            |\n| `--input-small-icon-size`             | small-icon 尺寸          | `--s-3`                      |\n| `--input-small-font-size`             | small 字体大小           | `--p-body-1-font-size`       |\n| `--input-medium-min-height`           | medium-最小高            | `--box-medium-min-height`    |\n| `--input-medium-corner`               | medium-圆角              | `--box-medium-border-radius` |\n| `--input-medium-padding-tb`           | medium-内间距            | `--box-medium-padding`       |\n| `--input-medium-spacing`              | medium-内部间隙          | `--box-medium-spacing`       |\n| `--input-medium-border-width`         | medium-边框宽度          | 0                            |\n| `--input-medium-icon-size`            | medium-icon 尺寸         | -                            |\n| `--input-medium-font-size`            | medium-字体大小          | `--p-body-2-font-size`       |\n| `--input-large-min-height`            | large-最小高             | `--box-large-min-height`     |\n| `--input-large-corner`                | large-圆角               | `--box-large-border-radius`  |\n| `--input-large-padding-tb`            | large-内间距             | `--box-large-padding`        |\n| `--input-large-spacing`               | large-内部间隙           | `--box-large-spacing`        |\n| `--input-large-border-width`          | large-边框宽度           | 0                            |\n| `--input-large-icon-size`             | large-icon 尺寸          | `--s-4`                      |\n| `--input-large-font-size`             | large-字体大小           | `--p-subhead-font-size`      |\n| `--input-padding-lr`                  | 统一左右内间距           | `--s-4`                      |\n| `--input-loading-icon-color`          | 加载 icon 颜色           | `--color-brand-3`            |\n| `--input-clear-icon-color`            | 清空 icon 颜色           | `--color-text1-2`            |\n| `--input-normal-bg-color`             | normal 态背景颜色        | `--color-fill1-1`            |\n| `--input-normal-border-color`         | normal 态边框颜色        | `--color-transparent`        |\n| `--input-normal-text-color`           | normal 态文字颜色        | `--color-text1-4`            |\n| `--input-normal-placeholder-color`    | normal 态提示文字颜色    | `--color-text1-2`            |\n| `--input-normal-text-color-disabled`  | normal 态禁用态文字颜色  | `--color-text1-1`            |\n| `--input-normal-limit-hint-color`     | normal 态提示文字颜色    | `--color-text1-2`            |\n| `--input-inverse-bg-color`            | inverse 态背景颜色       | `--color-fill2-1`            |\n| `--input-inverse-border-color`        | inverse 态边框颜色       | `--color-transparent`        |\n| `--input-inverse-text-color`          | inverse 态文字颜色       | `--color-white`              |\n| `--input-inverse-placeholder-color`   | inverse 态提示文字颜色   | `--color-text2-2`            |\n| `--input-inverse-text-color-disabled` | inverse 态禁用态文字颜色 | `--color-text2-1`            |\n| `--input-inverse-limit-hint-color`    | inverse 态提示文字颜色   | `--color-text2-2`            |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">normal</Text>\n      <View className=\"demo-content\">\n        <Input className=\"my-input\" placeholder=\"please input something\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" state=\"loading\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" state=\"warning\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" state=\"success\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" state=\"error\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"password\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" isPassword />\n        <Input className=\"my-input\" defaultValue=\"clear Input\" hasClear />\n        <Input\n          className=\"my-input\"\n          placeholder=\"readOnly placeholder\"\n          value=\"readOnly input long long long text long long long text long long long text long long long text\"\n          readOnly\n        />\n        <Input\n          className=\"my-input\"\n          placeholder=\"disabled placeholder\"\n          value=\"disabled input long long long text long long long text long long long text\"\n          disabled\n        />\n        <Input className=\"my-input\" placeholder=\"max length 11\" maxLength={11} />\n        <Input className=\"my-input\" placeholder=\"controlled\" value=\"123\" controlled />\n      </View>\n\n      <Text className=\"demo-title\">inverse</Text>\n      <View className=\"container--inverse demo-content\">\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" state=\"loading\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" state=\"warning\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" state=\"success\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" state=\"error\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" keyboardType=\"password\" />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" isPassword />\n        <Input className=\"my-input\" type=\"inverse\" defaultValue=\"clear Input\" hasClear />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"readOnly placeholder\" value=\"readOnly input\" readOnly />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"disabled placeholder\" value=\"disabled input\" disabled />\n        <Input className=\"my-input\" type=\"inverse\" placeholder=\"max length 11\" maxLength={11} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Radio } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [value, setValue] = useState('search');\n  const [size, setSize] = useState('medium');\n  return (\n    <View>\n      <Text className=\"demo-title\">Size</Text>\n      <View className=\"demo-content\">\n        <Radio.Group\n          dataSource={['small', 'medium', 'large']}\n          direction=\"hoz\"\n          value={size}\n          onChange={(sz) => setSize(sz)}\n        />\n      </View>\n      <View className=\"demo-content\">\n        <Input className=\"my-input\" state=\"success\" placeholder=\"input something\" size={size} />\n        <Input className=\"my-input\" state=\"warning\" placeholder=\"input something\" size={size} />\n        <Input className=\"my-input\" state=\"error\" placeholder=\"input something\" size={size} />\n        <Input\n          className=\"my-input\"\n          hasClear\n          value={value}\n          placeholder=\"search something\"\n          onChange={(val) => setValue(val)}\n          size={size}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <Input.TextArea className=\"my-input\" placeholder=\"please input something\" />\n        <Input.TextArea className=\"my-input\" placeholder=\"max length 11\" maxLength={11} />\n        <Input.TextArea className=\"my-input\" placeholder=\"disabled\" disabled />\n      </View>\n\n      <Text className=\"demo-title\">inverse</Text>\n      <View className=\"container--inverse demo-content\">\n        <Input.TextArea className=\"my-input\" type=\"inverse\" placeholder=\"please input something\" />\n        <Input.TextArea className=\"my-input\" type=\"inverse\" placeholder=\"max length 11\" maxLength={11} />\n        <Input.TextArea className=\"my-input\" type=\"inverse\" placeholder=\"disabled\" disabled />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">Align</Text>\n      <View className=\"demo-content\">\n        <Input className=\"my-input\" placeholder=\"please input something\" align=\"left\" />\n        <Input className=\"my-input\" placeholder=\"please input something\" align=\"right\" />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [val, setVal] = useState('initvalue');\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Align</Text>\n      <View className=\"demo-content\">\n        <View className=\"input-action\">\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              setVal('new value');\n            }}\n          >\n            set valid value\n          </Button>\n          <Button\n            type=\"warning\"\n            onClick={() => {\n              setVal(undefined);\n            }}\n          >\n            set undefined\n          </Button>\n        </View>\n        <Input className=\"my-input\" placeholder=\"please input something\" value={val} controlled autoFocus />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 6,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">web</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">number-pad</View>\n          <View className=\"demo-item-content\">\n            <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"number-pad\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">phone-pad</View>\n          <View className=\"demo-item-content\">\n            <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"phone-pad\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">url</View>\n          <View className=\"demo-item-content\">\n            <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"url\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">email</View>\n          <View className=\"demo-item-content\">\n            <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"email-address\" />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">number</View>\n          <View className=\"demo-item-content\">\n            <Input className=\"my-input\" placeholder=\"please input something\" keyboardType=\"numeric\" />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 8,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Input, Badge } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst _evts = [];\n\nconst Demo = () => {\n  const [evts, setEvts] = useState([]);\n\n  const addEvt = (type, value = '') => {\n    _evts.push({ type, value });\n    setEvts([..._evts]);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">event</Text>\n      <View className=\"demo-content\">\n        <Input\n          className=\"my-input\"\n          placeholder=\"please input something\"\n          hasClear\n          onFocus={() => {\n            addEvt('focus');\n          }}\n          onBlur={() => {\n            addEvt('blur');\n          }}\n          onConfirm={(val) => {\n            addEvt('confirm', val);\n          }}\n          onClear={() => {\n            addEvt('clear');\n          }}\n          onChange={(val) => {\n            addEvt('change', val);\n          }}\n        />\n      </View>\n      <View className=\"demo-content\">\n        {evts.map((item, index) => {\n          return (\n            <View key={`evt-${index}`} className=\"evt-item\">\n              <Badge count={item.type} />\n              <Text>{' ' + item.value || ''}</Text>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "List",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "列表",
    "importStatement": "import { List } from '@alifd/meet';",
    "body": "\n# List\n\n列表作为一个单一的连续元素来以垂直排列的方式显示多行条目。\n\n API\n\n### <List.Item>\n\n| 名称        | 说明                                             | 类型    | 默认值   |\n| :---------- | :----------------------------------------------- | :------ | :------- |\n| media       | 媒体容器                                         | RaxNode | 左侧节点 |\n| title       | 标题                                             | string  | 标题     |\n| description | 描述                                             | string  | 描述文案 |\n| extra       | 额外内容                                         | RaxNode | 附加信息 |\n| arrow       | 箭头, <br/> 可选值： <br/> `right`, `up`, `down` | Enum    | 附加信息 |\n\n> ps: 特殊情况，可以通过制定子节点方式完成内部布局\n>\n> 如：\n\n```jsx\n<List>\n  <List.Item>\n    <List.ItemAction />\n    <List.ItemContent />\n    <List.ItemTitle />\n    <List.ItemCaption />\n  </List.Item>\n</List>\n```\n\n### CSS Variables\n\n| 名称                                 | 说明                      | 默认值                 |\n| :----------------------------------- | :------------------------ | :--------------------- |\n| `--list-bg-color`                    | 列表背景色                | `--color-white`        |\n| `--list-border-color`                | 列表边框色                | `--color-line1-3`      |\n| `--list-item-height`                 | 列表项的最小高度          | `--s-14`               |\n| `--list-item-padding-tb`             | 列表项的上、下内边距      | `--s-3`                |\n| `--list-item-padding-lr`             | 列表项的左、右内边距      | `--s-4`                |\n| `--list-title-color`                 | 列表项的默认文字颜色      | `--color-text1-4`      |\n| `--list-divider-border-bottom-color` | 列表项之间的边线颜色      | `--color-line1-2`      |\n| `--list-item-spacing`                | 列表项图标/图片容器的边距 | `--box-medium-spacing` |\n| `--list-divider-border-bottom-color` | 列表项之间的边线颜色      | `--color-line1-2`      |\n| `--list-title-font-size`             | 列表项主文本字号          | `--s-4`                |\n| `--list-label-color`                 | 列表项主文本颜色          | `--color-text1-4`      |\n| `--list-caption-font-size`           | 列表项次要文本字号        | `28rpx`                |\n| `--list-caption-color`               | 列表项次要文本颜色        | `--color-text1-2`      |\n| `--list-icon-font-size`              | 列表图标大小              | `--icon-s`             |\n| `--list-icon-color`                  | 列表图标颜色              | `--color-text1-2`      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Icon, List, Checkbox, Avatar } from '@alifd/meet';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View>\n        <List>\n          <List.Item title=\"主标题文字\" action />\n          <List.Item title=\"主标题文字\" description=\"副标题文字\" />\n          <List.Item title=\"主标题文字\" description=\"副标题文字\" extra=\"说明文字\" />\n        </List>\n      </View>\n\n      <Text className=\"demo-title\">arrow</Text>\n      <View>\n        <List>\n          <List.Item\n            media={<Avatar src={'https://gw.alicdn.com/tfs/TB13_8dhsieb18jSZFvXXaI3FXa-500-500.png'} />}\n            arrow=\"up\"\n            title=\"标题\"\n            description=\"上箭头\"\n            caption={'caption'}\n            extra={'extra'}\n          />\n          <List.Item\n            media={<Avatar src={'https://gw.alicdn.com/tfs/TB13_8dhsieb18jSZFvXXaI3FXa-500-500.png'} />}\n            arrow=\"right\"\n            title=\"标题\"\n            description=\"右箭头\"\n            caption={'caption'}\n            extra={'extra'}\n          />\n          <List.Item\n            media={<Avatar src={'https://gw.alicdn.com/tfs/TB13_8dhsieb18jSZFvXXaI3FXa-500-500.png'} />}\n            arrow=\"down\"\n            title=\"标题\"\n            description=\"下箭头\"\n            caption={'caption'}\n            extra={'extra'}\n          />\n          <List.Item\n            media={<Avatar src={'https://gw.alicdn.com/tfs/TB13_8dhsieb18jSZFvXXaI3FXa-500-500.png'} />}\n            title=\"标题\"\n            description=\"无箭头\"\n            caption={'caption'}\n            extra={'extra'}\n          />\n        </List>\n      </View>\n\n      <Text className=\"demo-title\">title</Text>\n      <View>\n        <List>\n          <List.Item title=\"主标题文字\" />\n          <List.Item title=\"主标题文字\" />\n          <List.Item title=\"主标题文字\" />\n        </List>\n      </View>\n      <Text className=\"demo-title\">title with custom icon</Text>\n      <View>\n        <List>\n          <List.Item title=\"主标题文字\" extra={<Icon name=\"prompt\" />} />\n          <List.Item title=\"主标题文字\" extra={<Icon name=\"select\" />} />\n          <List.Item title=\"主标题文字\" extra={<Icon name=\"warning\" />} />\n        </List>\n      </View>\n\n      <Text className=\"demo-title\">with checkbox</Text>\n      <View>\n        <List>\n          <List.Item media={<Checkbox className=\"list-checkbox\" />} title=\"主标题文字\" />\n          <List.Item media={<Checkbox className=\"list-checkbox\" />} title=\"主标题文字\" />\n          <List.Item media={<Checkbox className=\"list-checkbox\" />} title=\"主标题文字\" />\n        </List>\n      </View>\n      <Text className=\"demo-title\">with description</Text>\n      <View>\n        <List>\n          <List.Item title=\"主标题文字\" extra=\"说明文字\" arrow=\"right\" />\n          <List.Item title=\"主标题文字\" extra=\"说明文字\" arrow=\"right\" />\n          <List.Item title=\"主标题文字\" extra=\"说明文字\" arrow=\"right\" />\n        </List>\n      </View>\n      <Text className=\"demo-title\">custom</Text>\n      <View>\n        <List>\n          <List.Item>\n            <List.ItemContent>\n              <List.ItemTitle>主标题文字</List.ItemTitle>\n              <List.ItemCaption>副标题文字</List.ItemCaption>\n            </List.ItemContent>\n            <List.ItemAction>\n              <Icon name=\"arrow-right\" size=\"s\" />\n            </List.ItemAction>\n          </List.Item>\n          <List.Item>\n            <List.ItemContent>\n              <List.ItemTitle>主标题文字</List.ItemTitle>\n              <List.ItemCaption>副标题文字</List.ItemCaption>\n            </List.ItemContent>\n            <List.ItemAction>\n              <Icon name=\"arrow-right\" size=\"s\" />\n            </List.ItemAction>\n          </List.Item>\n          <List.Item>\n            <List.ItemContent>\n              <List.ItemTitle>主标题文字</List.ItemTitle>\n              <List.ItemCaption>二级标题文字</List.ItemCaption>\n              <List.ItemCaption>三级标题文字</List.ItemCaption>\n            </List.ItemContent>\n            <List.ItemAction>\n              <Icon name=\"arrow-right\" size=\"s\" />\n            </List.ItemAction>\n          </List.Item>\n        </List>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Menu",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "菜单",
    "importStatement": "import { Menu } from '@alifd/meet';",
    "body": "\n# Menu\n\n菜单，支持多级嵌套。单选、多选。\n\n API\n\n### Props\n\n#### Menu\n\n| 名称                | 说明                                                                                                                                                                                                                                                                                                                                                                 | 类型         | 默认值   |\n| :------------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :----------- | :------- |\n| children            | 菜单项和子菜单                                                                                                                                                                                                                                                                                                                                                       | ReactNode    |          |\n| selectMode          | 选中模式，单选还是多选，默认无值，不可选。可选值: 'single', 'multiple'                                                                                                                                                                                                                                                                                               | Enum         |          |\n| onItemClick         | 点击菜单项触发的回调函数 Function(key: String, item: Object, event: Object) => void 参数: key: {String} 点击的菜单项的 key 值，item: {Object} 点击的菜单项对象，event: {Object} 点击的事件对象                                                                                                                                                                       | Function     | () => {} |\n| defaultOpenKeys     | 初始打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                            | String/Array | []       |\n| openKeys            | 当前打开的子菜单的 key 值                                                                                                                                                                                                                                                                                                                                            | String/Array | []       |\n| onOpen              | 打开或关闭子菜单触发的回调函数 Function(key: Array, extra: Object) => void 参数: key: {Array} 打开的所有子菜单的 key 值 extra: {Object} 额外参数 extra.key: {String} 当前操作子菜单的 key extra.open: {Boolean} 是否是打开                                                                                                                                           | Function     | () => {} |\n| inlineIndent        | 内连子菜单缩进距离                                                                                                                                                                                                                                                                                                                                                   | Number       | 20       |\n| defaultSelectedKeys | 初始选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                              | String/Array | []       |\n| selectedKeys        | 当前选中菜单项的 key 值                                                                                                                                                                                                                                                                                                                                              | String/Array | []       |\n| onSelect            | 选中或取消选中菜单项触发的回调函数 Function(selectedKeys: Array, item: Object, extra: Object) => void 参数: selectedKeys: {Array} 选中的所有菜单项的值 item: {Object} 选中或取消选中的菜单项 extra: {Object} 额外参数 extra.select: {Boolean} 是否是选中 extra.key: {Array} 菜单项的 key extra.label: {Object} 菜单项的文本 extra.keyPath: {Array} 菜单项 key 的路径 | Function     | () => {} |\n\n#### Menu.SubMenu\n\n| 名称     | 说明             | 类型      | 默认值 |\n| :------- | :--------------- | :-------- | :----- |\n| label    | 标签内容         | ReactNode |        |\n| children | 菜单项和子菜单   | ReactNode |        |\n| loading  | 是否为加载中状态 | Boolean   | false  |\n\n#### Menu.Item\n\n| 名称     | 说明           | 类型      | 默认值 |\n| :------- | :------------- | :-------- | :----- |\n| children | 菜单项和子菜单 | ReactNode |        |\n| disabled | 是否禁用       | Boolean   | false  |\n\n### CSS Variables\n\n| 名称                    | 说明                  | 默认值                                  |\n| :---------------------- | :-------------------- | :-------------------------------------- |\n| `--menu-disabled-color` | 禁用项的颜色          | `--box-normal-text-font-color-disabled` |\n| `--menu-loading-color`  | loading 的颜色        | `--box-primary-text-font-color`         |\n| `--menu-selected-color` | 选中 icon 的颜色      | `--box-primary-text-font-color`         |\n| `--menu-arrow-color`    | 展开/收起 icon 的颜色 | `--box-normal-text-icon-color-active`   |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Menu } from '@alifd/meet';\n\n\nconst Demo = () => {\n  const [openKeys, setOpenKeys] = useState(['0']);\n  const [selectedSingleKeys, setSelectedSingleKeys] = useState(['0-0']);\n  const [selectedKeys, setSelectedKeys] = useState(['0-0', '0-3']);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Basic Select</Text>\n      <View className=\"demo-content\">\n        <Menu\n          onItemClick={(key, item, e) => {\n            console.log('onItemClick: ', key, item, e);\n          }}\n        >\n          <Menu.Item key=\"option1\">Option</Menu.Item>\n          <Menu.Item key=\"option2\">Option2</Menu.Item>\n          <Menu.Item key=\"option3\">Option3</Menu.Item>\n          <Menu.Item key=\"option4\">Option4</Menu.Item>\n        </Menu>\n      </View>\n      <Text className=\"demo-title\">Single Select</Text>\n      <View className=\"demo-content\">\n        <Menu\n          inlineIndent={16}\n          defaultOpenKeys={openKeys}\n          selectMode=\"single\"\n          selectedKeys={selectedSingleKeys}\n          onSelect={(selectedKeys, item, extra) => {\n            console.log('onSelect: ', selectedKeys, item, extra);\n            setSelectedSingleKeys(selectedKeys);\n          }}\n        >\n          <Menu.SubMenu label={<View>Option</View>}>\n            <Menu.Item>Option1-1</Menu.Item>\n            <Menu.Item>Option1-2</Menu.Item>\n            <Menu.Item>Option1-3</Menu.Item>\n            <Menu.Item>Option1-4</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu label={<View>Option2</View>} loading>\n            <Menu.Item>Option2-1</Menu.Item>\n            <Menu.Item loading>Option2-2</Menu.Item>\n            <Menu.Item disabled>Option2-3</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu label={<View>Option3</View>}>\n            <Menu.Item>Option3-1</Menu.Item>\n            <Menu.Item>Option3-2</Menu.Item>\n            <Menu.Item>Option3-3</Menu.Item>\n            <Menu.SubMenu label={<View>Option3-4</View>}>\n              <Menu.Item>Option3-4-1</Menu.Item>\n              <Menu.Item>Option3-4-2</Menu.Item>\n              <Menu.Item>Option3-4-3</Menu.Item>\n            </Menu.SubMenu>\n          </Menu.SubMenu>\n        </Menu>\n      </View>\n      <Text className=\"demo-title\">Multiple Select</Text>\n      <View className=\"demo-content\">\n        <Menu\n          inlineIndent={16}\n          defaultOpenKeys={openKeys}\n          selectMode=\"multiple\"\n          selectedKeys={selectedKeys}\n          onSelect={(selectedKeys, item, extra) => {\n            console.log('onSelect: ', selectedKeys, item, extra);\n            setSelectedKeys(selectedKeys);\n          }}\n        >\n          <Menu.SubMenu label={<View>Option</View>}>\n            <Menu.Item>Option1-1</Menu.Item>\n            <Menu.Item>Option1-2</Menu.Item>\n            <Menu.Item>Option1-3</Menu.Item>\n            <Menu.Item disabled>Option1-4</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu label={<View>Option2</View>} loading>\n            <Menu.Item>Option2-1</Menu.Item>\n            <Menu.Item loading>Option2-2</Menu.Item>\n            <Menu.Item disabled>Option2-3</Menu.Item>\n          </Menu.SubMenu>\n          <Menu.SubMenu label={<View>Option3</View>}>\n            <Menu.Item>Option3-1</Menu.Item>\n            <Menu.Item>Option3-2</Menu.Item>\n            <Menu.Item>Option3-3</Menu.Item>\n            <Menu.SubMenu label={<View>Option3-4</View>}>\n              <Menu.Item>Option3-4-1</Menu.Item>\n              <Menu.Item>Option3-4-2</Menu.Item>\n              <Menu.Item>Option3-4-3</Menu.Item>\n            </Menu.SubMenu>\n          </Menu.SubMenu>\n        </Menu>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Message",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "信息反馈",
    "importStatement": "import { Message } from '@alifd/meet';",
    "body": "\n# Message\n\n一种轻量级的信息反馈方式\n\n API\n\n### Message\n\n| 名称             | 说明                                                                                  | 类型       | 默认值     |\n| :--------------- | :------------------------------------------------------------------------------------ | :--------- | :--------- |\n| `type`           | 反馈类型 <br/> 可选值： <br/> `success`,`warning`,`error` ,`notice` ,`help`,`loading` | `enum`     |            |\n| `shape`          | 显示形式，inline 或 toast                                                             | `enum`     | `inline`   |\n| `visible`        | 是否显示                                                                              | `boolean`  | `false`    |\n| `defaultVisible` | 默认显示                                                                              | `boolean`  | `false`    |\n| `title`          | 标题                                                                                  | `any`      | `-`        |\n| `iconType`       | 显示的图标类型，默认显示内置图标 iconType                                             | `string`   | `-`        |\n| `closable`       | 是否显示关闭按钮，仅 inline 有效                                                      | `boolean`  | `false`    |\n| `onClose`        | 关闭按钮点击回调                                                                      | `function` | `() => {}` |\n\n### CSS Variables\n\n| 名称                        | 说明           | 默认值                 |\n| :-------------------------- | :------------- | :--------------------- |\n| `--message-spacing`         | 元素间距       | --box-medium-spacing   |\n| `--message-font-large`      | 标题字号       | --p-body-2-font-size   |\n| `--message-font-small`      | 内容字号       | --p-body-1-font-size   |\n| `--message-title-color`     | 标题颜色       | --color-text1-4        |\n| `--message-bg-success`      | 成功背景色     | --color-success-1      |\n| `--message-bg-warning`      | 警告背景色     | --color-warning-1      |\n| `--message-bg-error`        | 错误背景色     | --color-error-1        |\n| `--message-bg-notice`       | 提示背景色     | --color-notice-1       |\n| `--message-bg-help`         | 帮助背景色     | --color-help-1         |\n| `--message-bg-loading`      | 加载中背景色   | --color-loading-1      |\n| `--message-icon-success`    | 成功图标色     | --color-success-3      |\n| `--message-icon-warning`    | 警告图标色     | --color-warning-4      |\n| `--message-icon-error`      | 错误图标色     | --color-error-3        |\n| `--message-icon-notice`     | 提示图标色     | --color-notice-3       |\n| `--message-icon-help`       | 帮助图标色     | --color-help-3         |\n| `--message-icon-loading`    | 加载中图标色   | --color-loading-3      |\n| `--message-toast-bg`        | Toast 背景色   | rgba(0, 0, 0, 0.6)     |\n| `--message-toast-min-width` | Toast 最小宽度 | --s-20                 |\n| `--message-toast-color`     | Toast 文本色   | --color-white          |\n| `--message-toast-spacing`   | Toast 边距     | --s-3                  |\n| `--message-toast-corner`    | Toast 圆角     | --corner-2             |\n| `--message-toast-icon-size` | Toast 图标大小 | --p-headline-icon-size |\n\n### 快捷调用方式\n\n#### Message.show(options)\n\noptions 继承于 MessageProp，所有 MessageProp 属性（如 iconType、className 等）均可以在 options 中使用。下方仅列出额外的可用参数。\n\n| 属性名     | 说含义                                    | 类型     | 默认值 |\n| :--------- | :---------------------------------------- | :------- | :----- |\n| `content`  | 消息内容（建议优先使用 title）            | `any`    |        |\n| `duration` | 自动隐藏时间（ms）。传入 0 则不自动隐藏。 | `number` | 3000   |\n\n返回一个函数，用于关闭本次消息。\n\n#### Message.hide()\n\n关闭最后一个消息\n\n#### Message.[success|error|notice|help|loading](options)\n\n快捷调用 show。options 可以为 string 或 object。返回内容与 show 相同。如：\n\n```\nMessage.success('成功提示');\n// 相当于：\nMessage.show({\n  type: 'success',\n  title: '成功提示',\n});\n\n\nconst options = {\n  /* ... */\n};\nMessage.success(options);\n// 相当于\nMessage.show({\n  ...options,\n  type: 'success',\n});\n```\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState, useRef, useEffect, useCallback } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Message, Button } from '@alifd/meet';\n\nfunction Demo() {\n  return (\n    <View>\n      <Text className=\"demo-title\">Inline Message</Text>\n      <View className=\"demo-content\">\n        <Message type=\"success\" title=\"成功提示\" visible={true} closable={true} onClose={() => console.log('close')}>\n          这是一个成功的提示这是一个成功的提示这是一个成功的提示这是一个成功的提示\n        </Message>\n        <Message type=\"warning\" title=\"警告提示\" visible={true} closable={true} onClose={() => console.log('close')}>\n          这是一个成功的提示这是一个成功的提示这是一个成功的提示这是一个成功的提示\n        </Message>\n        <Message type=\"error\" title=\"错误提示\" visible={true}>\n          这是一个成功的提示这是一个成功的提示这是一个成功的提示这是一个成功的提示\n        </Message>\n        <Message type=\"notice\" title=\"Notice提示\" visible={true}>\n          这是一个成功的提示这是一个成功的提示这是一个成功的提示这是一个成功的提示\n        </Message>\n        <Message type=\"loading\" visible={true} closable={true} onClose={() => console.log('close')}>\n          这是一个Notice提示这是一个Notice提示这是一个Notice提示\n        </Message>\n      </View>\n      <Text className=\"demo-title\">Toast Message</Text>\n      <View className=\"demo-content toast-buttons\">\n        <Button onClick={() => Message.success('成功提示')}>成功提示</Button>\n        <Button\n          onClick={() =>\n            Message.show({\n              type: 'warning',\n              title: '警告提示',\n            })\n          }\n        >\n          警告提示\n        </Button>\n        <Button onClick={() => Message.error('错误提示')}>错误提示</Button>\n        <Button onClick={() => Message.notice('信息提示')}>信息提示</Button>\n        <Button onClick={() => Message.help('帮助提示')}>帮助提示</Button>\n        <Button\n          onClick={() =>\n            Message.loading({\n              title: '加载中',\n              duration: 10000,\n            })\n          }\n        >\n          加载中\n        </Button>\n        <Button onClick={() => Message.hide()}>隐藏</Button>\n      </View>\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Modal",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "模态框",
    "importStatement": "import { Modal } from '@alifd/meet';",
    "body": "\n# Modal\n\nModal 提供了弹出遮罩层的能力，为 `Dialog`、`Drawer` 等组件提供了底层能力。 (Web)\n\n API\n\n### Props\n\n| 名称               | 说明                 | 类型                     | 默认值              |\n| :----------------- | :------------------- | :----------------------- | :------------------ |\n| visible            | 对话框是否显示       | boolean                  | false               |\n| container          | 对话框的容器         |                          | () => document.body |\n| disablePortal      | 禁用 `portal` 功能   | boolean                  | false               |\n| hideMask           | 是否隐藏遮盖背景     | boolean                  | false               |\n| disableMaskClose   | 是否禁用背景点击关闭 | boolean                  | false               |\n| containerClassName | 内容样式             | string                   |                     |\n| maskClassName      | 背景样式             | string                   |                     |\n| containerStyle     | 内容自定义样式       | {}                       |                     |\n| onEnter            | 开始进入时回调函数   | () => void               |                     |\n| onExit             | 开始退出时回调函数   | () => void               |                     |\n| onEntering         | 正在进入时回调函数   | () => void               |                     |\n| onExiting          | 正在退出时回调函数   | () => void               |                     |\n| onEntered          | 进入后回调函数       | () => void               |                     |\n| onExited           | 退出后回调函数       | () => void               |                     |\n| onMaskClick        | 遮盖背景被点击时调用 | () => void               |                     |\n| onClose            | 关闭时调用           | (reason: string) => void |                     |\n\n### CSS Variables\n\n| 名称                       | 说明             | 默认值               |\n| :------------------------- | :--------------- | :------------------- |\n| `--modal-elevation`        | 默认海拔高度     | `1000`               |\n| `--modal-content-bg-color` | 内容框默认背景色 | `--color-white`      |\n| `--modal-mask-bg-color`    | 弹层默认背景色   | `rgba(0, 0, 0, 0.5)` |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Modal, Button, Radio } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [visible, setVisible] = useState(false);\n  const [placement, setPlacement] = useState('top');\n\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content btn-container\">\n        <Radio.Group\n          direction=\"hoz\"\n          value={placement}\n          dataSource={['top', 'bottom', 'left', 'right', 'center']}\n          onChange={(v) => {\n            setPlacement(v);\n          }}\n        />\n        <Button\n          type=\"primary\"\n          style={{ marginTop: '32rpx', marginLeft: '32rpx', marginRight: '32rpx' }}\n          onClick={() => setVisible(true)}\n        >\n          <Text>open</Text>\n        </Button>\n      </View>\n\n      <Modal\n        placement={placement}\n        visible={visible}\n        maskClosable={true}\n        containerClassName={'modal'}\n        onClose={(reason) => {\n          setVisible(false);\n          console.log(`closed by ${reason}`);\n        }}\n        onMaskClick={() => {\n          console.log('mask click');\n        }}\n        onShow={() => {\n          console.log('modal show');\n        }}\n      >\n        <Text>modal content</Text>\n      </Modal>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Nav",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "导航",
    "importStatement": "import { Nav } from '@alifd/meet';",
    "body": "\n# Nav\n\n导航\n\n API\n\n`<Nav>`\n`<Nav.Item>`\n`<Nav.Icon>`\n`<Nav.Label>`\n\n### Props\n\n#### Nav\n\n| 名称                | 说明                                                 | 类型                                        | 默认值    |\n| :------------------ | :--------------------------------------------------- | :------------------------------------------ | :-------- |\n| size                | 大小 <br>可选值：<br> `small`, `medium`, `large`     | enum                                        | `medium`  |\n| type                | 类型 <br>可选值：<br> `normal`, `primary`, `inverse` | enum                                        | `primary` |\n| model               | 外观 <br>可选值：<br> `solid`, `text`.               | enum                                        | `solid`   |\n| defaultSelectedKeys | 初始选中值                                           | string                                      |           |\n| selectedKeys        | 选中值                                               | string                                      |           |\n| dataSource          | 渲染数据源                                           | array                                       | `[]`      |\n| onSelect            | 选中时回调函数                                       | Function(selectedKey: string, event: Event) |           |\n\n#### Nav.SubNav\n\n| 名称     | 说明         | 类型                 | 默认值 |\n| :------- | :----------- | :------------------- | :----- |\n| key      | 自定义 key   | `string` ,`number`   |        |\n| icon     | 自定义 icon  | `string` , `RaxNode` |        |\n| label    | 文案         | `string` , `RaxNode` |        |\n| expanded | 是否默认展开 | boolean              | false  |\n| onClick  | 点击回调     | （key）=> void       |        |\n\n> children 接收 Nav.Item\n\n#### Nav.Item\n\n| 名称    | 说明        | 类型                 | 默认值 |\n| :------ | :---------- | :------------------- | :----- |\n| key     | 自定义 key  | `string` ,`number`   |        |\n| icon    | 自定义 icon | `string` , `RaxNode` |        |\n| label   | 文案        | `string` , `RaxNode` |        |\n| onClick | 点击回调    | （key）=> void       |        |\n\n> 会作为 label 传入\n\n```js\n// datasource example, label is required\nconst dataSource = [\n  { label: 'Nav1' },\n  { key: 'nav2', label: 'Nav2', icon: 'search' },\n  { key: 'nav3', label: 'Nav3', iconUri: 'https://gw.alicdn.com/tfs/TB1j9QlMrr1gK0jSZFDXXb9yVXa-48-48.png' },\n  {\n    key: 'nav3',\n    label: 'Nav3',\n    children: [\n      {\n        key: 'nav31',\n        label: 'Nav31',\n        icon: 'play',\n      },\n      // ...\n    ],\n  },\n];\n```\n\n### CSS Variables\n\n| 名称                                                    | 说明         | 默认值                                           |\n| :------------------------------------------------------ | :----------- | :----------------------------------------------- |\n| `--nav-item-small-height`                               | 导航项宽度   | `s-8`                                            |\n| `--nav-item-medium-height`                              | 导航项宽度   | `s-12`                                           |\n| `--nav-item-large-height`                               | 导航项宽度   | `s-14`                                           |\n| `--nav-item-padding`                                    | 导航项内边距 | `s-4`                                            |\n| `--nav-item-base-font-size`                             | 基础字体大小 | `s-4`                                            |\n| `--nav-item-#{$type}-#{$model}-background-color`        | 背景色       | `box-#{$type}-#{$model}-background-color`        |\n| `--nav-item-#{$type}-#{$model}-background-color-hover`  | 背景色       | `box-#{$type}-#{$model}-background-color-hover`  |\n| `--nav-item-#{$type}-#{$model}-background-color-active` | 背景色       | `box-#{$type}-#{$model}-background-color-active` |\n| `--nav-item-#{$type}-#{$model}-font-color`              | 字体颜色     | `box-#{$type}-#{$model}-font-color`              |\n| `--nav-item-#{$type}-#{$model}-font-color-hover`.       | 字体颜色     | `box-#{$type}-#{$model}-font-color-hover`        |\n| `--nav-item-#{$type}-#{$model}-font-color-active`       | 字体颜色     | `box-#{$type}-#{$model}-font-color-active`       |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  const [selectedKeys, setSelectedKeys] = useState('');\n\n  // on select\n  const onSelect = (itemKey, e) => {\n    console.log('onselect', itemKey, e);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">controlled</Text>\n      <Nav onSelect={onSelect} selectedKeys={'6-4-2'}>\n        <Nav.Item icon=\"account\" label=\"Nav 1\" />\n        <Nav.Item icon=\"account\" label=\"Nav 2\" />\n        <Nav.Item icon=\"account\" label=\"Nav 3\" />\n        <Nav.Item icon=\"account\" label=\"Nav 4\" />\n        <Nav.SubNav icon=\"account\" label=\"Nav 5\" expanded>\n          <Nav.Item icon=\"account\" label=\"Nav 51\" />\n          <Nav.Item icon=\"account\" label=\"Nav 52\" />\n          <Nav.Item icon=\"account\" label=\"Nav 53\" />\n          <Nav.SubNav icon=\"account\" label=\"Nav 54\" expanded>\n            <Nav.Item icon=\"account\" label=\"Nav 541\" />\n            <Nav.Item key={'6-4-2'} icon=\"account\" label=\"Nav 542\" />\n            <Nav.Item icon=\"account\" label=\"Nav 543\" />\n          </Nav.SubNav>\n        </Nav.SubNav>\n      </Nav>\n\n      <Text className=\"demo-title\">uncontrolled</Text>\n      <Nav>\n        <Nav.Item icon=\"account\" label=\"Nav 1\" />\n        <Nav.Item icon=\"account\" label=\"Nav 2\" />\n        <Nav.Item icon=\"account\" label=\"Nav 3\" />\n        <Nav.Item icon=\"account\" label=\"Nav 5\" />\n        <Nav.SubNav icon=\"account\" label=\"Nav 5\">\n          <Nav.Item icon=\"account\" label=\"Nav 51\" />\n          <Nav.Item icon=\"account\" label=\"Nav 52\" />\n          <Nav.Item icon=\"account\" label=\"Nav 53\" />\n          <Nav.SubNav icon=\"account\" label=\"Nav 54\">\n            <Nav.Item icon=\"account\" label=\"Nav 541\" />\n            <Nav.Item icon=\"account\" label=\"Nav 542\" />\n            <Nav.Item icon=\"account\" label=\"Nav 543\" />\n          </Nav.SubNav>\n        </Nav.SubNav>\n      </Nav>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n// on select\nconst onSelect = (itemKey, e) => {\n  console.log(itemKey);\n};\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  return (\n    <View className=\"app\">\n      <Text className=\"demo-title\">normal</Text>\n\n      <View className=\"demo-content\">\n        <Text className=\"demo-sub-title\">Solid</Text>\n        <Nav size=\"medium\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n\n        <Text className=\"demo-sub-title\">Text</Text>\n        <Nav size=\"medium\" model=\"text\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n      </View>\n\n      <Text className=\"demo-title\">Primary</Text>\n      <View className=\"demo-content\">\n        <Text className=\"demo-sub-title\">Solid</Text>\n        <Nav size=\"medium\" type=\"primary\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n\n        <Text className=\"demo-sub-title\">Text</Text>\n        <Nav size=\"medium\" type=\"primary\" model=\"text\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n      </View>\n\n      <Text className=\"demo-title\">invserse</Text>\n      <View className=\"demo-content--inverse\">\n        <Text className=\"demo-sub-title demo-sub-title--inverse\">Solid</Text>\n        <Nav size=\"medium\" type=\"inverse\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n\n        <Text className=\"demo-sub-title demo-sub-title--inverse\">text</Text>\n        <Nav size=\"medium\" type=\"inverse\" model=\"text\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\">Nav1</Nav.Item>\n          <Nav.Item icon=\"account\">Nav2</Nav.Item>\n          <Nav.SubNav icon=\"account\" label=\"Nav 3\">\n            <Nav.Item icon=\"account\">Nav3-1</Nav.Item>\n          </Nav.SubNav>\n        </Nav>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n// on select\nconst onSelect = (itemKey, e) => {\n  console.log(itemKey);\n};\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  return (\n    <View className=\"app\">\n      <Text className=\"demo-title\">Size</Text>\n\n      <View className=\"demo-content\">\n        <Text className=\"demo-sub-title\">large</Text>\n        <Nav size=\"large\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\" label=\"normal\" />\n          <Nav.Item icon=\"account\" label=\"normal\" selected />\n        </Nav>\n\n        <Text className=\"demo-sub-title\">medium</Text>\n        <Nav size=\"medium\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\" label=\"normal\" />\n          <Nav.Item icon=\"account\" label=\"normal\" selected />\n        </Nav>\n\n        <Text className=\"demo-sub-title\">small</Text>\n        <Nav size=\"small\" onSelect={onSelect}>\n          <Nav.Item icon=\"account\" label=\"normal\" />\n          <Nav.Item icon=\"account\" label=\"normal\" selected />\n        </Nav>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav, Button, Drawer } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n// on select\nconst onSelect = (itemKey, e) => {\n  console.log(itemKey);\n};\n\nconst options = ['Nav 1', 'Nav 2', 'Nav 3', 'Nav 4', 'Nav 5'];\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  return (\n    <View className=\"app\">\n      <Text className=\"demo-title\">side nav</Text>\n      <View className=\"demo-content\">\n        <Button type=\"primary\" model=\"outline\" onClick={() => setDrawerShow(true)}>\n          show side nav\n        </Button>\n        <Drawer\n          visible={showDrawer}\n          placement=\"left\"\n          width={500}\n          onClose={() => {\n            setDrawerShow(false);\n          }}\n        >\n          <Nav onSelect={() => setDrawerShow(false)}>\n            {options.map((op) => {\n              return (\n                <Nav.Item icon={'arrow-right'} key={op}>\n                  {op}\n                </Nav.Item>\n              );\n            })}\n          </Nav>\n        </Drawer>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst dataSource = [\n  { key: 'nav1', label: 'Nav 1', icon: 'account' },\n  { key: 'nav2', label: 'Nav 2', icon: 'account' },\n  { key: 'nav3', label: 'Nav 3', icon: 'account' },\n  { key: 'nav4', label: 'Nav 4', icon: 'account' },\n  {\n    label: 'Nav 5',\n    icon: 'account',\n    children: [\n      {\n        key: 'nav51',\n        label: 'Nav 5-1',\n        icon: 'account',\n      },\n      {\n        key: 'nav52',\n        label: 'Nav 5-2',\n        icon: 'account',\n        children: [\n          {\n            key: 'nav521',\n            label: 'Nav 5-2-1',\n            icon: 'account',\n          },\n          {\n            key: 'nav522',\n            label: 'Nav 5-2-2',\n            icon: 'account',\n          },\n          {\n            key: 'nav523',\n            label: 'Nav 5-2-3',\n            icon: 'account',\n          },\n        ],\n      },\n    ],\n  },\n];\n\n// on select\nconst onSelect = (itemKey, e) => {\n  console.log(itemKey);\n};\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  return (\n    <View className=\"app\">\n      <Text className=\"demo-title\">By DataSource</Text>\n      <View className=\"demo-content\">\n        <Nav defaultSelectedKeys=\"nav2\" selectedKeys={'nav3'} dataSource={dataSource} onSelect={onSelect} />\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 6,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Nav, Icon } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n// on select\nconst onSelect = (itemKey, e) => {\n  console.log(itemKey);\n};\n\nconst Demo = () => {\n  const [showDrawer, setDrawerShow] = useState(false);\n  return (\n    <View className=\"app\">\n      <Text className=\"demo-title\">Custom</Text>\n      <View className=\"demo-content\">\n        <Nav defaultSelectedKeys=\"nav1\" onSelect={onSelect}>\n          <Nav.Item key=\"nav1\">no icon</Nav.Item>\n          <Nav.Item label=\"label text\" />\n          <Nav.Item icon={<Icon className=\"custom-icon\" name=\"search\" />}>Custom Icon By Icon Node</Nav.Item>\n          <Nav.Item icon={<Icon uri={'https://gw.alicdn.com/tfs/TB1j9QlMrr1gK0jSZFDXXb9yVXa-48-48.png'} />}>\n            Custom Icon By Uri\n          </Nav.Item>\n        </Nav>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "NumberPicker",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "数字输入框",
    "importStatement": "import { NumberPicker } from '@alifd/meet';",
    "body": "\n# NumberPicker\n\n数字选择器\n\n API\n\n### Props\n\n| 名称           | 说明                                             | 类型                          | 默认值    |\n| :------------- | :----------------------------------------------- | :---------------------------- | :-------- |\n| size           | 大小 <br>可选值：<br> `small`, `medium`, `large` | string                        | medium    |\n| value          | 当前值                                           | number                        |           |\n| defaultValue   | 初始值                                           | number                        | 1         |\n| max            | 最大值                                           | number                        | Infinity  |\n| min            | 最小值                                           | number                        | -Infinity |\n| step           | 步数                                             | number                        | 1         |\n| precision      | 保留小数点后位数                                 | number                        | 0         |\n| readOnly       | 是否只读                                         | boolean                       | false     |\n| disabled       | 是否被禁用                                       | boolean                       | false     |\n| onBeforeChange | 变化前回调函数                                   | `(v: number): Promise<any>`   |           |\n| onChange       | 变化时回调函数                                   | `(v: number, e: Event): void` |           |\n| onFoucs        | 获得焦点回调函数                                 | `(e: Event): void`            |           |\n| onBlur         | 失去焦点回调函数                                 | `(e: Event): void`            |           |\n\n### CSS Variables\n\n| 名称                                        | 说明                          | 默认值                   |\n| :------------------------------------------ | :---------------------------- | :----------------------- |\n| `--numberpicker-large-font-size`            | `large` 尺寸输入框、图标字号  | `--p-body-2-font-size`   |\n| `--numberpicker-medium-font-size`           | `medium` 尺寸输入框、图标字号 | `--p-body-1-font-size`   |\n| `--numberpicker-small-font-size`            | `small` 尺寸输入框、图标字号  | `--p-overline-font-size` |\n| `--numberpicker-small-input-width`          | `large` 尺寸输入框宽度        | `--s-3`                  |\n| `--numberpicker-medium-input-width`         | `large` 尺寸输入框宽度        | `--s-2`                  |\n| `--numberpicker-large-input-width`          | `large` 尺寸输入框宽度        | `--p-subhead-font-size`  |\n| `--numberpicker-height`                     | 输入框、图标高度              | `--s-4`                  |\n| `--numberpicker-input-border-color`         | 输入框边框颜色                | `--color-line1-4`        |\n| `--numberpicker-input-color`                | 输入框文字颜色                | `--color-text1-4`        |\n| `--numberpicker-button-corner`              | 按钮圆角                      | `--corner-1`             |\n| `--numberpicker-button-border-width`        | 按钮边框线宽度                | `--line-1`               |\n| `--numberpicker-button-border-color`        | 按钮边框线颜色                | `--color-line1-4`        |\n| `--numberpicker-button-icon-color`          | 按钮图标颜色                  | `--color-text1-4`        |\n| `--numberpicker-disabled-input-color`       | 输入框文字颜色（禁用状态）    | `--color-text1-1`        |\n| `--numberpicker-disabled-button-icon-color` | 按钮图标颜色（禁用状态）      | `--color-text1-1`        |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { NumberPicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [value, setValue] = useState(50);\n\n  return (\n    <View className=\"app\">\n      <View className=\"line\">\n        <Text className=\"label\">normal</Text>\n        <NumberPicker min={0} max={100} />\n      </View>\n      <View className=\"line\">\n        <Text className=\"label\">diabled</Text>\n        <NumberPicker min={0} max={100} disabled={true} />\n      </View>\n      <View className=\"line\">\n        <Text className=\"label\">readOnly</Text>\n        <NumberPicker min={0} max={100} readOnly={true} />\n      </View>\n      <View className=\"line\">\n        <Text className=\"label\">受控</Text>\n        <NumberPicker min={10} max={100} value={value} onChange={(value) => setValue(value)} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { NumberPicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  return (\n    <View className=\"app\">\n      <View>\n        {sizes.map((size) => {\n          return (\n            <View key={size} className=\"line\">\n              <Text className=\"label\">{size}</Text>\n              <NumberPicker size={size} min={-100} max={100} />\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { NumberPicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [value, setValue] = useState(-1.99);\n\n  return (\n    <View className=\"app\">\n      <View className=\"line\">\n        <Text className=\"label\">precision</Text>\n        <NumberPicker\n          value={value}\n          min={-2}\n          max={10}\n          precision={1}\n          step={0.1}\n          onChange={setValue}\n          onCorrect={(value, oldValue) => {\n            console.log({ value, oldValue });\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Pagination",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "分页",
    "importStatement": "import { Pagination } from '@alifd/meet';",
    "body": "\n# Pagination\n\n分页器，用于数据列表分页展示\n\n API\n\n### Props\n\n#### Pagination\n\n| 名称               | 说明                                                                                                                                                                                   | 默认值   | 类型     |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | -------- |\n| size               | 分页组件大小<br /><br />**可选值**:<br />'small', 'medium', 'large'                                                                                                                    | 'medium' | Enum     |\n| type               | 分页组件类型<br /><br />**可选值**:<br />'normal', 'mini'                                                                                                                              | 'normal' | Enum     |\n| current            | （受控）当前页码                                                                                                                                                                       | -        | Number   |\n| defaultCurrent     | （非受控）初始页码                                                                                                                                                                     | 1        | Number   |\n| total              | 总记录数                                                                                                                                                                               | 100      | Number   |\n| pageSize           | 一页中的记录数                                                                                                                                                                         | 10       | Number   |\n| previousButtonText | 上一页按钮文案 (优先级大于 locale )                                                                                                                                                    | Previous | String   |\n| nextButtonText     | 下一页按钮文案 (优先级大于 locale )                                                                                                                                                    | Next     | String   |\n| onChange           | 页码发生改变时的回调函数<br /><br />**签名**:<br />Function(current: Number, e: Object) => void<br />**参数**:<br />_current_: {Number} 改变后的页码数<br />_e_: {Object} 点击事件对象 | () =>{}  | Function |\n\n### CSS Variables\n\n| 名称                                        | 说明                      | 默认值                 |\n| :------------------------------------------ | :------------------------ | :--------------------- |\n| `--pagination-small-text-mini-width`        | small 类型 mini 中间宽度  | `var(--s-3)`           |\n| `--pagination-small-text-padding-left`      | small 类型 文字左边距     | `20rpx`                |\n| `--pagination-small-text-padding-right`     | small 类型 文字右边距     | `20rpx`                |\n| `--pagination-small-text-number-font-size`  | small 类型 数字字体大小   | `28rpx`                |\n| `--pagination-small-icon-font-size`         | small 类型 icon 字体大小  | `36rpx`                |\n| `--pagination-medium-text-mini-width`       | medium 类型 mini 中间宽度 | `var(--s-4)`           |\n| `--pagination-medium-text-padding-left`     | medium 类型 文字左边距    | `var(--s-3)`           |\n| `--pagination-medium-text-padding-right`    | medium 类型 文字右边距    | `var(--s-3)`           |\n| `--pagination-medium-text-number-font-size` | medium 类型 数字字体大小  | `var(--s-4)`           |\n| `--pagination-medium-icon-font-size`        | medium 类型 icon 字体大小 | `var(--s-5)`           |\n| `--pagination-large-text-mini-width`        | large 类型 mini 中间宽度  | `var(--s-6)`           |\n| `--pagination-large-text-padding-left`      | large 类型 文字左边距     | `28rpx`                |\n| `--pagination-large-text-padding-right`     | large 类型 文字右边距     | `28rpx`                |\n| `--pagination-large-text-number-font-size`  | large 类型 数字字体大小   | `36rpx`                |\n| `--pagination-large-icon-font-size`         | large 类型 icon 字体大小  | `44rpx`                |\n| `--pagination-text-current-color`           | 文字当前色值              | `var(--color-brand-3)` |\n| `--pagination-icon-color`                   | icon 颜色                 | `var(--color-text1-4)` |\n| `--pagination-icon-disabled-color`          | icon 禁用颜色             | `var(--color-text1-1)` |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Pagination } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [currnet, setCurrent] = useState(1);\n\n  const handleFirstChange = (page) => {\n    setCurrent(page);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Small</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} pageSize={5} size=\"small\" onChange={handleFirstChange} />\n      </View>\n      <Text className=\"demo-title\">Medium</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} pageSize={6} size=\"medium\" onChange={handleFirstChange} />\n      </View>\n      <Text className=\"demo-title\">Large</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} size=\"large\" onChange={handleFirstChange} />\n      </View>\n      <Text className=\"demo-title\">Mini-Small</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} type=\"mini\" size=\"small\" onChange={handleFirstChange} />\n      </View>\n      <Text className=\"demo-title\">Mini-Medium</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} type=\"mini\" size=\"medium\" onChange={handleFirstChange} />\n      </View>\n      <Text className=\"demo-title\">Mini-Large</Text>\n      <View className=\"demo-content\">\n        <Pagination current={currnet} total={100} type=\"mini\" size=\"large\" onChange={handleFirstChange} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { ConfigProvider, Pagination } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst locale = {\n  Pagination: {\n    prev: '上一頁',\n    next: '下一頁',\n  },\n};\n\nconst Demo = () => {\n  const [currnet, setCurrent] = useState(1);\n\n  const handleFirstChange = (page) => {\n    setCurrent(page);\n  };\n\n  return (\n    <ConfigProvider locale={locale}>\n      <View>\n        <Text className=\"demo-title\">Locale</Text>\n        <View className=\"demo-content\">\n          <Pagination current={currnet} onChange={handleFirstChange} />\n        </View>\n      </View>\n    </ConfigProvider>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Picker",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "选择框",
    "importStatement": "import { Picker } from '@alifd/meet';",
    "body": "\n# Picker\n\n滑动选择器\n\n API\n\n### Props\n\n| 名称           | 说明                                                           | 类型                                   | 默认值 |\n| :------------- | :------------------------------------------------------------- | :------------------------------------- | :----- |\n| data           | 数据源                                                         | array<{value, label, children: Array}> |        |\n| value          | 值, 格式是[value1, value2, value3], 对应数据源的相应级层 value | array                                  |        |\n| defaultValue   | 默认值, 格式与 value 相同                                      | array                                  |        |\n| cascade        | 是否联动                                                       | bool                                   | false  |\n| maskStyle      | 小程序有效，定制 mask 样式                                     | CSS properties                         | {}     |\n| indicatorStyle | 小程序有效，定时 indicator 样式                                | CSS properties                         | {}     |\n| onChange       | 选中后的回调                                                   | (value, colunmnIndex): void            |        |\n\n### CSS Variables\n\n| 名称                        | 说明                           | 默认值                  |\n| :-------------------------- | :----------------------------- | :---------------------- |\n| `--picker-height`           | 选择框宽度                     | `s-9`                   |\n| `--picker-font-size`        | 选择框内选项的默认字号         | `--p-subhead-font-size` |\n| `--picker-select-font-size` | 选择框内选中状态选项的字号     | `--p-subhead-font-size` |\n| `--picker-select-color`     | 选择框内选中状态选项的文字颜色 | `--color-text1-4`       |\n| `--picker-disabled-color`   | 选择框内禁用状态选项的文字颜色 | `--color-text1-1`       |\n| `--picker-color`            | 选择框内选项的默认文字颜色     | `--color-text1-4`       |\n| `--picker-divider-color`    | 中间指示器的边框线颜色         | `--color-line1-2`       |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Picker, Button } from '@alifd/meet';\n\n\nconst seasons = [\n  [\n    {\n      label: '2013',\n      value: '2013',\n    },\n    {\n      label: '2014',\n      value: '2014',\n    },\n  ],\n  [\n    {\n      label: '春',\n      value: '春',\n    },\n    {\n      label: '夏',\n      value: '夏',\n    },\n  ],\n];\n\nconst province = [\n  {\n    label: '北京',\n    value: '01',\n    children: [\n      {\n        label: '东城区',\n        value: '01-1',\n      },\n      {\n        label: '西城区',\n        value: '01-2',\n      },\n      {\n        label: '崇文区',\n        value: '01-3',\n      },\n      {\n        label: '宣武区',\n        value: '01-4',\n      },\n    ],\n  },\n  {\n    label: '浙江',\n    value: '02',\n    children: [\n      {\n        label: '杭州',\n        value: '02-1',\n        children: [\n          {\n            label: '西湖区',\n            value: '02-1-1',\n          },\n          {\n            label: '上城区',\n            value: '02-1-2',\n          },\n          {\n            label: '江干区',\n            value: '02-1-3',\n          },\n          {\n            label: '下城区',\n            value: '02-1-4',\n          },\n        ],\n      },\n      {\n        label: '宁波',\n        value: '02-2',\n        children: [\n          {\n            label: 'xx区',\n            value: '02-2-1',\n          },\n          {\n            label: 'yy区',\n            value: '02-2-2',\n          },\n        ],\n      },\n      {\n        label: '温州',\n        value: '02-3',\n      },\n      {\n        label: '嘉兴',\n        value: '02-4',\n      },\n      {\n        label: '湖州',\n        value: '02-5',\n      },\n      {\n        label: '绍兴',\n        value: '02-6',\n      },\n    ],\n  },\n];\n\nconst Demo = () => {\n  const [value, setValue] = useState(['02']);\n  const [season, setSeason] = useState([]);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Cascade</Text>\n      <View className=\"demo-content\">\n        <Picker\n          onChange={(v, index) => {\n            setValue(v);\n            console.log(v, index);\n          }}\n          cascade\n          data={province}\n          value={value}\n        />\n        <Button type=\"primary\" onClick={() => setValue(['02', '02-3'])}>\n          Change\n        </Button>\n      </View>\n      <Text className=\"demo-title\">受控模式</Text>\n      <View className=\"demo-content\">\n        <Picker data={seasons} value={season} onChange={setSeason} />\n      </View>\n      <Text className=\"demo-title\">非受控模式</Text>\n      <View className=\"demo-content\">\n        <Picker data={seasons} onChange={(v) => console.log(v)} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Progress",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "进度条",
    "importStatement": "import { Progress } from '@alifd/meet';",
    "body": "\n# Progress\n\n用于展示操作的当前进度。\n\n API\n\n### Props\n\n| 名称            | 说明                                                              | 类型        | 默认值   |\n| :-------------- | :---------------------------------------------------------------- | :---------- | :------- |\n| shape           | 形态 <br>可选值：<br>`circle` (小程序暂不支持), `line`            | enum        | `line`   |\n| percent         | 所占百分比, <br>可选值：<br> 0 - 100                              | number      | 0        |\n| size            | 进度条大小 `small`,`medium`,`large` ,可设置为 number 表示特定高度 | enum/number | `medium` |\n| color           | 颜色                                                              | string      |          |\n| text            | 文字，（仅在 `shape='circle'` 时生效）                            | string      | -        |\n| backgroundColor | 进度槽背景色                                                      | string      | -        |\n| state           | 进度条状态：`normal`, `error`, `success`                          | enum        | `normal` |\n| progressive     | 进度状态区分                                                      | boolean     | false    |\n\n### CSS API\n\n| 名称                         | 说明                                                  | 默认值  |\n| :--------------------------- | :---------------------------------------------------- | :------ |\n| --progress-bar-large-corner  | `shape='linear'` 时`size='large'`的圆角度数           | `--s-3` |\n| --progress-bar-medium-corner | `shape='linear'` 时`size='medium'`的圆角度数          | `18rpx` |\n| --progress-bar-small-corner  | `shape='linear'` 时`size='small'`的圆角度数           | `12rpx` |\n| --progress-margin            | 上下 margin 距离                                      | `--s-2` |\n| --progress-small-spacing     | `shape='linear'` 时`size='small'`的上下 padding 距离  | `--s-3` |\n| --progress-medium-spacing    | `shape='linear'` 时`size='medium'`的上下 padding 距离 | `--s-4` |\n| --progress-large-spacing     | `shape='linear'` 时`size='large'`的上下 padding 距离  | `--s-5` |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Progress } from '@alifd/meet';\n\n\nconst Demo = () => {\n  const [percent, setPercent] = useState(66);\n  const [color, setColor] = useState('#209BFA');\n  const [size, setSize] = useState('small');\n  const [backgroundColor, setBackgroundColor] = useState('#EB2F2F');\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      clearTimeout(timer);\n      if (percent + 1 <= 100) {\n        setPercent(percent + 1);\n      } else {\n        setPercent(0);\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [percent]);\n  useEffect(() => {\n    setTimeout(() => {\n      setColor('#EB2F2F');\n      setSize('large');\n      setBackgroundColor('#209BFA');\n    }, 1000);\n  }, []);\n  return (\n    <View>\n      <Text className=\"demo-title\">Progress</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Progress size=\"large\" percent={percent} />\n            <Progress\n              size=\"large\"\n              percent={percent}\n              shape=\"circle\"\n              color={color}\n              size={size}\n              backgroundColor={backgroundColor}\n            />\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Size</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Progress size=\"small\" percent={percent} />\n            <Progress size=\"medium\" percent={percent} />\n            <Progress size=\"large\" percent={percent} />\n            <View className=\"demo-items\">\n              <Progress size=\"small\" percent={percent} shape=\"circle\" />\n              <Progress size=\"medium\" percent={percent} shape=\"circle\" />\n              <Progress size=\"large\" percent={percent} shape=\"circle\" />\n            </View>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Progressive</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Progress size=\"large\" percent={22} progressive />\n            <Progress size=\"large\" percent={55} progressive />\n            <Progress size=\"large\" percent={88} progressive />\n            <View className=\"demo-items\">\n              <Progress size=\"large\" percent={22} shape=\"circle\" progressive />\n              <Progress size=\"large\" percent={55} shape=\"circle\" progressive />\n              <Progress size=\"large\" percent={88} shape=\"circle\" progressive />\n            </View>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Color</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Progress size=\"large\" percent={percent} color=\"#209BFA\" />\n            <Progress size=\"large\" percent={percent} color=\"#EB2F2F\" />\n            <Progress size=\"large\" percent={percent} color=\"#05D161\" />\n            <View className=\"demo-items\">\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#000\" />\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#EB2F2F\" />\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#05D161\" />\n            </View>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">BackgroundColor</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-content\">\n            <Progress size=\"large\" percent={percent} color=\"#209BFA\" backgroundColor=\"#ffdcd6\" />\n            <Progress size=\"large\" percent={percent} color=\"#EB2F2F\" backgroundColor=\"#ffdcd6\" />\n            <Progress size=\"large\" percent={percent} color=\"#05D161\" backgroundColor=\"#ffdcd6\" />\n            <View className=\"demo-items\">\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#209BFA\" backgroundColor=\"#ffdcd6\" />\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#EB2F2F\" backgroundColor=\"#ffdcd6\" />\n              <Progress size=\"large\" percent={percent} shape=\"circle\" color=\"#05D161\" backgroundColor=\"#ffdcd6\" />\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Radio",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "单选框",
    "importStatement": "import { Radio } from '@alifd/meet';",
    "body": "\n# Radio\n\n单选框\n\n API\n\n### Props\n\n#### Radio\n\n| 名称           | 说明                       | 类型     | 默认值  |\n| :------------- | :------------------------- | :------- | :------ |\n| size           | 尺寸'small'                | 'medium' | 'large' | string | medium |\n| defaultChecked | 初始选中状态（非受控模式） | bool     |         |\n| checked        | 是否选中（受控模式）       | bool     |         |\n| disabled       | 是否禁用                   | bool     | false   |\n| readOnly       | 只读模式                   | boolean  | false   |\n| onChange       | Radio 改变回调             | func     |         |\n\n#### Radio.Group\n\n| 名称             | 说明                                                            | 类型                           | 默认值 |\n| :--------------- | :-------------------------------------------------------------- | :----------------------------- | :----- |\n| defaultValue     | 初始选中的选项（非受控模式）                                    | string/number                  | -      |\n| value            | 指定选中的选项                                                  | string/number                  | -      |\n| disabled         | 是否禁用                                                        | bool                           | false  |\n| readOnly         | 只读模式                                                        | boolean                        | false  |\n| direction        | 排布方向 <br/> 可选值：`hoz`,`ver`                              | enum                           | `ver`  |\n| dataSource       | 数据源                                                          | RadioProps[]/number[]/string[] |        |\n| isPreview        | 是否为预览态                                                    | Boolean                        | false  |\n| renderPreview    | 自定义预览样式 ,`value` 参数格式为 `[{label:string,value:any}]` | (value)=>RaxNode               |        |\n| previewClassName | 预览态自定义样式类                                              | string                         |        |\n| previewStyle     | 预览态自定义样式                                                | CSS Properties                 |        |\n| onChange         | 改变时回调函数                                                  | Function(checkedValue)         |        |\n\n### CSS Variables\n\n| 名称                                        | 说明                                                           | 默认值                                 |\n| :------------------------------------------ | :------------------------------------------------------------- | :------------------------------------- |\n| `--radio-small-padding`                     | 单选框间隙-small                                               | `--box-small-padding`                  |\n| `--radio-medium-padding`                    | 单选框间隙-medium                                              | `--box-medium-padding`                 |\n| `--radio-large-padding`                     | 单选框间隙-large                                               | `--box-large-padding`                  |\n| `--radio-hoz-margin`                        | 单选框水平间隙（`Radio.Group` direction 设置为 `hoz` 时生效 ） | `--s-2`                                |\n| `--radio-circle-large-size`                 | 单选框尺-large 寸                                              | `--s-12`                               |\n| `--radio-circle-medium-size`                | 单选框尺-medium                                                | `--s-10`                               |\n| `--radio-circle-small-size`                 | 单选框尺-small                                                 | `--s-8`                                |\n| `--radio-circle-corner`                     | 单选框圆角                                                     | `--corner-circle`                      |\n| `--radio-circle-border-small-width`         | 单选框边框宽度-small                                           | `--box-small-border-width`             |\n| `--radio-circle-border-medium-width`        | 单选框边框宽度-medium                                          | `--box-medium-border-width`            |\n| `--radio-circle-border-large-width`         | 单选框边框宽度-large                                           | `--box-large-border-width`             |\n| `--radio-circle-border-color`               | 单选框边框颜色                                                 | `--color-line1-3`                      |\n| `--radio-circle-bg-color`                   | 单选框背景颜色                                                 | `--color-white`                        |\n| `--radio-circle-selected-border-width`      | 选中时单选框边框宽度                                           | `--line-1`                             |\n| `--radio-circle-selected-border-color`      | 选中时单选框边框颜色                                           | `--box-primary-solid-background-color` |\n| `--radio-circle-disabled-border-color`      | 禁用时单选框边框颜色                                           | `--color-fill1-4`                      |\n| `--radio-circle-disabled-border-color`      | 选中并禁用时单选框边框颜色                                     | `--color-brand-1`                      |\n| `--radio-circle-selected-bg-color`          | 选中时单选框背景颜色                                           | `--box-primary-solid-background-color` |\n| `--radio-circle-disabled-bg-color`          | 禁用时单选框背景颜色                                           | `--color-fill1-1`                      |\n| `--radio-circle-selected-disabled-bg-color` | 选中并禁用时单选框背景颜色                                     | `--color-brand-1`                      |\n| `--radio-point-small-size`                  | 内部圆点尺-small 寸                                            | `--s-2`                                |\n| `--radio-point-medium-size`                 | 内部圆点尺-medium                                              | `--s-3`                                |\n| `--radio-point-large-size`                  | 内部圆点尺-large                                               | `--s-4`                                |\n| `--radio-point-selected-bg-color`           | 选中时内部圆点背景颜色                                         | `--box-primary-solid-icon-color`       |\n| `--radio-point-selected-disabled-bg-color`  | 选中并禁止时内部圆点的背景颜色                                 | `--box-primary-solid-icon-color`       |\n| `--radio-text-font-small-size`              | 文字字体大小-small                                             | `--s-7`                                |\n| `--radio-text-font-medium-size`             | 文字字体大小-medium                                            | `--s-8`                                |\n| `--radio-text-font-large-size`              | 文字字体大小-large                                             | `--s-9`                                |\n| `--radio-text-left-small-margin`            | 文字左侧间隙-small                                             | `--box-small-spacing`                  |\n| `--radio-text-left-medium-margin`           | 文字左侧间隙-medium                                            | `--box-medium-spacing`                 |\n| `--radio-text-left-large-margin`            | 文字左侧间隙-large                                             | `--box-large-spacing`                  |\n| `--radio-text-color`                        | 字体颜色                                                       | `--color-text1-3`                      |\n| `--radio-text-selected-color`               | 选中时字体颜色                                                 | `--color-text1-3`                      |\n| `--radio-text-disbled-color`                | 禁用时字体颜色                                                 | `--color-text1-1`                      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Radio } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"small\">basic radio</Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"medium\">basic radio</Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"large\">basic radio</Radio>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">checked</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"small\" checked>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"medium\" checked>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"large\" checked>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"small\" disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"medium\" disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"large\" disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">checked disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"small\" checked disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"medium\" checked disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n        <View className=\"demo-item\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Radio size=\"large\" checked disabled>\n              basic radio\n            </Radio>\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">Fuction</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <Radio\n            onChange={(value) => {\n              alert(`select value:${value}`);\n            }}\n          >\n            Normal\n          </Radio>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Radio, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [groupValue, setGroupValue] = useState(2);\n  const [isDisabled, setDisabled] = useState(true);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Group Usage</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item\">\n          <Radio.Group\n            defaultValue={2}\n            dataSource={[\n              {\n                label: 'Radio 1',\n                value: 1,\n              },\n              {\n                label: 'Radio 2',\n                value: 2,\n              },\n              {\n                label: 'Radio 3',\n                value: 3,\n              },\n            ]}\n          />\n        </View>\n      </View>\n      <Text className=\"demo-title\">Controlled</Text>\n      <View className=\"demo-content\">\n        <View style={{ display: 'flex', flexDirection: 'row', marginBottom: 20 }}>\n          <Button\n            style={{\n              width: 250,\n              height: 60,\n              marginRight: 20,\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n            }}\n            type=\"primary\"\n            size=\"small\"\n            onClick={() => {\n              setGroupValue(1);\n            }}\n          >\n            change value\n          </Button>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            style={{\n              width: 250,\n              height: 60,\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n            }}\n            onClick={() => {\n              setDisabled(!isDisabled);\n            }}\n          >\n            toggleDisable\n          </Button>\n        </View>\n\n        <View className=\"demo-item\">\n          <Radio.Group\n            value={groupValue}\n            direction=\"horizontal\"\n            onChange={(value) => {\n              console.log('selected radio is:', value);\n            }}\n            disabled={isDisabled}\n            dataSource={[\n              {\n                label: 'Radio 1',\n                value: 1,\n              },\n              {\n                label: 'Radio 2',\n                value: 2,\n              },\n              {\n                label: 'Radio 3',\n                value: 3,\n              },\n            ]}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Radio, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">preview</Text>\n      <View className=\"demo-content\">\n        <Radio.Group\n          isPreview\n          size=\"large\"\n          value={2}\n          dataSource={[\n            {\n              label: 'Radio 1',\n              value: 1,\n            },\n            {\n              label: 'Radio 2',\n              value: 2,\n            },\n            {\n              label: 'Radio 3',\n              value: 3,\n            },\n          ]}\n        />\n\n        <Radio.Group\n          isPreview\n          size=\"small\"\n          renderPreview={(item) => {\n            return <Text>{item.label}</Text>;\n          }}\n          value={'b'}\n        >\n          <Radio value={'a'}>Apple</Radio>\n          <Radio value={'b'}>Banana</Radio>\n          <Radio value={'c'}>Cherry</Radio>\n        </Radio.Group>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Range",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "区域选择",
    "importStatement": "import { Range } from '@alifd/meet';",
    "body": "\n# Range\n\n滑动选择器。\n\n- 注：此组件依赖 onTouchStart、onTouchMove、onTouchEnd 事件。\n\n API\n\n### Props\n\n| 名称           | 说明                                                                                                                      | 类型                                   | 默认值   |\n| :------------- | :------------------------------------------------------------------------------------------------------------------------ | :------------------------------------- | :------- |\n| size           | range 大小，可选值：`small`, `medium`，`large`                                                                            | Enum                                   | `medium` |\n| min            | 最小值                                                                                                                    | number                                 | 0        |\n| max            | 最大值                                                                                                                    | number                                 | 100      |\n| step           | 步长                                                                                                                      | number                                 | 1        |\n| value          | 值                                                                                                                        | number/number[]                        | 0        |\n| mode           | 拖动的点的个数, 1 或 2 【不支持小程序】                                                                                   | number                                 | 1        |\n| defaultValue   | 默认值                                                                                                                    | number/number[]                        | 0        |\n| previewed      | 只读模式                                                                                                                  | boolean                                | false    |\n| disabled       | 是否禁用                                                                                                                  | boolean                                | false    |\n| marksPosition  | 刻度数值显示位置，可选值 'above', 'below'                                                                                 | Enum                                   | `below`  |\n| marks          | 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示） | `Boolean/Number/Array<Number\\>/Object` | false    |\n| tooltipVisible | 是否显示气泡提示,`true`一直显示，`false`一直不显示，默认拖动时显示 【不支持小程序】                                       | boolean                                |          |\n| onChange       | 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了 value, 要配合此函数做受控使用       | (value: String/number) => void         | noop     |\n| onProcess      | 滑块拖动的时候触发的事件,不建议在这里 setState, 一般情况下不需要用, 滑动时有特殊需求时使用                                | (value: String/number) => void         | noop     |\n\n### CSS API\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, Component, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Range } from '@alifd/meet';\n\n\nfunction Demo() {\n  const [single, setSingle] = useState(0.4);\n  const [double, setDouble] = useState([25, 87]);\n\n  const marks = {\n    '0': '0m',\n    '0.2': '0.2m',\n    '0.5': '0.5m',\n    '1': '1m',\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Size</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range size={'large'} value={single} marks={marks} step={0.1} max={1} onChange={setSingle} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range size={'medium'} value={single} marks={marks} step={0.1} max={1} onChange={setSingle} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range size={'small'} value={single} marks={marks} step={0.1} max={1} onChange={setSingle} />\n        </View>\n      </View>\n      <Text className=\"demo-title\">Mode</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range value={single} marks={marks} step={0.1} max={1} onChange={setSingle} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range value={double} max={100} min={0} step={1} onChange={setDouble} mode=\"double\" marks={10} />\n        </View>\n      </View>\n      <Text className=\"demo-title\">marksPosition</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range value={double} max={100} min={0} step={1} onChange={setDouble} mode=\"double\" marks={10} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range\n            value={double}\n            max={100}\n            min={0}\n            step={1}\n            onChange={setDouble}\n            mode=\"double\"\n            marks={10}\n            marksPosition=\"above\"\n          />\n        </View>\n      </View>\n      <Text className=\"demo-title\">marks</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range value={double} max={100} min={0} step={1} onChange={setDouble} mode=\"double\" marks={10} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range size={'large'} value={single} marks={marks} step={0.1} max={1} onChange={setSingle} />\n        </View>\n        <View className=\"range__wrap\">\n          <Range value={double} max={100} min={0} step={1} onChange={setDouble} mode=\"double\" marks={[25, 50, 75]} />\n        </View>\n      </View>\n      <Text className=\"demo-title\">disabled</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range value={single} marks={marks} step={0.1} max={1} onChange={setSingle} disabled />\n        </View>\n        <View className=\"range__wrap\">\n          <Range value={double} max={100} min={0} step={1} onChange={setDouble} mode=\"double\" marks={10} disabled />\n        </View>\n      </View>\n      <Text className=\"demo-title\">tooltip</Text>\n      <View className=\"demo-content\">\n        <View className=\"range__wrap\">\n          <Range value={single} marks={marks} step={0.1} max={1} onChange={setSingle} tooltipVisible />\n        </View>\n        <View className=\"range__wrap\">\n          <Range\n            value={double}\n            max={100}\n            min={0}\n            step={1}\n            onChange={setDouble}\n            mode=\"double\"\n            marks={10}\n            tooltipVisible={false}\n          />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Rating",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "评分",
    "importStatement": "import { Rating } from '@alifd/meet';",
    "body": "\n# Rating\n\n评分组件\n\n API\n\n### Props\n\n| 名称         | 说明                                        | 类型                    | 默认值      |\n| :----------- | :------------------------------------------ | :---------------------- | :---------- |\n| defaultValue | 默认分数                                    | number                  | `0`         |\n| value        | 分数（受控）                                | number                  | `undefined` |\n| count        | 最高分数                                    | number                  | `5`         |\n| size         | 大小 <br>可选值：`large`, `medium`, `small` | enum                    | `medium`    |\n| iconType     | 图标类型                                    | string                  | `star`      |\n| disabled     | 是否被禁用                                  | boolean                 | `false`     |\n| readOnly     | 是否只读                                    | boolean                 | `false`     |\n| onChange     | 分数改变时回调                              | (value: number) => void | `undefined` |\n\n### CSS Variables\n\n| 名称                        | 说明                         | 默认值                                  |\n| :-------------------------- | :--------------------------- | :-------------------------------------- |\n| `--rating-color`            | 普通状态（非活动图标）的颜色 | `--box-normal-solid-background-color`   |\n| `--rating-low-grade-color`  | 分数较低时，活动图标的颜色   | `--box-normal-outline-icon-color-hover` |\n| `--rating-high-grade-color` | 分数较高时，活动图标的颜色   | `--box-primary-outline-icon-color`      |\n| `--rating-medium-icon-size` | `medium`尺寸图标大小         | `--icon-l`                              |\n| `--rating-medium-padding`   | `medium`尺寸上下内边距       | `--box-medium-padding`                  |\n| `--rating-medium-spacing`   | `medium`尺寸元素间隙         | `--box-medium-spacing`                  |\n| `--rating-small-icon-size`  | `small`尺寸图标大小          | `--icon-m`                              |\n| `--rating-small-padding`    | `small`尺寸上下内边距        | `--box-small-padding`                   |\n| `--rating-small-spacing`    | `small`尺寸元素间隙          | `--box-small-spacing`                   |\n| `--rating-large-icon-size`  | `large`尺寸图标大小          | `--icon-xl`                             |\n| `--rating-large-padding`    | `large`尺寸上下内边距        | `--box-large-padding`                   |\n| `--rating-large-spacing`    | `large`尺寸元素间隙          | `--box-large-spacing`                   |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { Rating } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"small\" defaultValue={3} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"medium\" defaultValue={3} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"large\" defaultValue={3} />\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Low Grade</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"small\" defaultValue={1} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"medium\" defaultValue={1} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content\">\n            <Rating size=\"large\" defaultValue={1} />\n          </View>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Custom icon</Text>\n      <View className=\"demo-content\">\n        <Rating size=\"large\" iconType=\"favorite\" defaultValue={3.3} />\n      </View>\n      <Text className=\"demo-title\">Half score</Text>\n      <View className=\"demo-content\">\n        <Rating size=\"large\" defaultValue={3.3} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "RichText",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "富文本",
    "importStatement": "import { RichText } from '@alifd/meet';",
    "body": "\n# RichText\n\n富文本组件\n\n API\n\n### Props\n\n| 名称 | 说明       | 类型   | 默认值      |\n| :--- | :--------- | :----- | :---------- |\n| text | 富文本内容 | String | `undefined` |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { RichText } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst RichTextDemo = () => {\n  const richDataText = `<div class=\"div_class\">\n                <h1>Title</h1>\n                <p class=\"p\">\n                  Life is&nbsp;<i>like</i>&nbsp;a box of\n                  <b>&nbsp;chocolates</b>.\n                </p>\n                <img src=\"https://gw.alicdn.com/tfs/TB142saXKbviK0jSZFNXXaApXXa-548-635.png\" style='width:100px'/>\n              </div>`;\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content\">\n            <RichText text={richDataText} />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<RichTextDemo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Search",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "搜索",
    "importStatement": "import { Search } from '@alifd/meet';",
    "body": "\n# Search\n\n搜索框组件\n\n API\n\n### Props\n\n| 名称         | 说明                                                                                                                                                               | 类型                               | 默认值 |\n| :----------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------- | :----- |\n| size         | 搜索框的大小，可选值：`small`, `medium`, `large`                                                                                                                   | Enum                               | medium |\n| value        | 搜索框数值                                                                                                                                                         | String/Number                      | -      |\n| placeholder  | 设置文本框占位符                                                                                                                                                   | String                             | -      |\n| keyboardType | 设置键盘右下角按钮的文字，有效值：done（显示“完成”）、go（显示“前往”）、next（显示“下一个”）、search（显示“搜索”）、send（显示“发送”），平台不同显示的文字略有差异 | String                             | -      |\n| defaultValue | 搜索框默认值                                                                                                                                                       | String                             | -      |\n| searchText   | button 的内容                                                                                                                                                      | String                             | -      |\n| disabled     | 是否禁用                                                                                                                                                           | Boolean                            | false  |\n| focused      | 添加开启获取焦点                                                                                                                                                   | Boolean                            | false  |\n| maxLength    | 设置最大可输入值                                                                                                                                                   | Number                             | -      |\n| enableNative | 支付宝小程序是否使用原生组件渲染                                                                                                                                   | Boolean                            | false  |\n| hasIcon      | 是否显示搜索按钮                                                                                                                                                   | Boolean                            | true   |\n| icon         | icon 类头像的图标类型，可设为 Icon 的 type 或 ReactNode                                                                                                            | ReactNode/String                   | -      |\n| hasClear     | 是否显示清除按钮                                                                                                                                                   | Boolean                            | false  |\n| hasCancel    | 是否显示取消按钮                                                                                                                                                   | Boolean                            | false  |\n| cancelText   | 取消按钮文字                                                                                                                                                       | String                             | 取消   |\n| onChange     | 输入关键字时的回调                                                                                                                                                 | `(value: string, e?: any) => void` | -      |\n| onSearch     | 输入框点击键盘 `确认` 按钮的回调                                                                                                                                   | `(value: string, e?: any) => void` | -      |\n| onBlur       | 输入框失去焦点的回调                                                                                                                                               | `() => void`                       | -      |\n| onFocus      | 文本框获得焦点时调用此函数                                                                                                                                         | `() => void`                       | -      |\n| onCancel     | 点击取消的时候回调                                                                                                                                                 | `() => void`                       | -      |\n| onClear      | 点击清除的时候回调                                                                                                                                                 | `() => void`                       | -      |\n\n### CSS Variables\n\n| 名称                     | 说明                  | 默认值                            |\n| :----------------------- | :-------------------- | :-------------------------------- |\n| `--search-small-height`  | `small` 尺寸搜索宽度  | `--s-7`                           |\n| `--search-medium-height` | `medium` 尺寸搜索高度 | `--s-9`                           |\n| `--search-large-height`  | `large` 尺寸搜索高度  | `--s-11`                          |\n| `--search-border-width`  | 边框大小              | `--box-normal-solid-border-width` |\n| `--search-corner`        | 边框圆角              | `--s-1`                           |\n| `--search-border-color`  | 边框颜色              | `--box-normal-solid-border-color` |\n| `--search-bg-color`      | 背景色                | `--color-fill1-1`                 |\n| `--search-font-color`    | 字体颜色              | `--box-normal-solid-text-color`   |\n| `--search-icon-color`    | icon 颜色             | `--box-normal-solid-icon-color`   |\n\n## FAQ\n\n#### 1. 键盘为什么没有展示 \"搜索\" 按钮\n\ninput[type=search] 需要嵌套在 form 内部，才会展示 搜索 字样\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DU from 'driver-universal';\nimport { Search } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"small\" defaultValue={3} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"medium\" defaultValue={3} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"large\" defaultValue={3} />\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">ShowCancel</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"small\" defaultValue={3} hasCancel />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"medium\" defaultValue={3} hasCancel />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-search\">\n            <Search\n              size=\"large\"\n              defaultValue={3}\n              hasCancel\n              onChange={(value) => {\n                console.log(value);\n              }}\n            />\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">ShowClear</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">small</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"small\" value=\"clear\" defaultValue={3} hasClear hasCancel />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">medium</View>\n          <View className=\"demo-item-content-search\">\n            <Search size=\"medium\" value=\"clear\" defaultValue={3} hasClear hasCancel />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">large</View>\n          <View className=\"demo-item-content-search\">\n            <Search\n              size=\"large\"\n              value=\"clear\"\n              defaultValue={3}\n              hasClear\n              hasCancel\n              cancelText={'自定义'}\n              onChange={(value) => {\n                console.log(value);\n              }}\n              onCancel={() => {\n                console.log('onCancel');\n              }}\n              onBlur={() => {\n                console.log('onBlur');\n              }}\n              onFocus={() => {\n                console.log('onFocus');\n              }}\n              onConfirm={() => {\n                console.log('onConfirm');\n              }}\n              onClear={() => {\n                console.log('onClear');\n              }}\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Search, Badge } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst evts = [];\nconst Demo = () => {\n  const [curEvts, setEvt] = useState([]);\n  const addEvt = (type, value = '') => {\n    evts.push({ type, value });\n    setEvt([...evts]);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">event</Text>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">事件</View>\n          <View className=\"demo-item-content-search\">\n            <Search\n              value=\"init value\"\n              hasClear\n              hasCancel\n              autoFocus\n              cancelText={'取消'}\n              onChange={(value) => {\n                addEvt('onChange', value);\n              }}\n              onCancel={() => {\n                addEvt('onCancel');\n              }}\n              onBlur={() => {\n                addEvt('onBlur');\n              }}\n              onFocus={() => {\n                addEvt('onFocus');\n              }}\n              onConfirm={(value) => {\n                addEvt('onConfirm', value);\n              }}\n              onClear={() => {\n                addEvt('onClear');\n              }}\n            />\n          </View>\n        </View>\n      </View>\n      <View className=\"demo-content\">\n        {curEvts.map((evt, index) => {\n          return (\n            <View key={`evt-${index}`} className=\"evt-item\">\n              <Badge count={evt.type} />\n              <Text>{` ${evt.value}`}</Text>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "SelectDrawer",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "选择抽屉",
    "importStatement": "import { SelectDrawer } from '@alifd/meet';",
    "body": "\n# SelectDrawer\n\n用于选择内容的抽屉\n\n API\n\n### Props\n\n| 名称            | 说明                                                    | 类型                       | 默认值        |\n| :-------------- | :------------------------------------------------------ | :------------------------- | :------------ |\n| iconType        | 右侧图标                                                | String                     | `arrow-right` |\n| drawerClassName | 抽屉 className                                          | String                     |               |\n| drawerTitle     | 抽屉标题                                                | String                     |               |\n| content         | 主体内容                                                | String                     |               |\n| type            | 样式类型 <br/> 可选值： <br/> `normal` , `inverse`      | Enum                       | normal        |\n| placeholder     | 提示内容，当 content 为空时显示                         | String                     |               |\n| hasClear        | 是否展示清除按钮                                        | Boolean                    | false         |\n| align           | 主体对齐                                                | `left, right`              | `left`        |\n| notFoundContent | 无 children 时的弹出框提示内容                          | RaxNode                    |               |\n| size            | 大小尺寸 <br/> 可选值： <br/> `large`, `medium`,`small` | Enum                       | `medium`      |\n| onOk            | 点击确定按钮                                            | () => void                 |               |\n| onCancel        | 点击取消按钮或遮罩层                                    | () => void                 |               |\n| onClear         | 点击清除按钮                                            | () => void                 |               |\n| onVisibleChange | 抽屉显示/隐藏状态改变                                   | (visible: boolean) => void |               |\n\n### CSS Variables\n\n| 名称                                       | 说明                   | 默认值                  |\n| :----------------------------------------- | :--------------------- | :---------------------- |\n| `--select-drawer-normal-color`             | 内容颜色               | `--color-text1-4`       |\n| `--select-drawer-normal-icon-color`        | 箭头颜色               | `--color-text1-2`       |\n| `--select-drawer-title-color`              | 抽屉标题颜色           | `--color-text1-4`       |\n| `--select-drawer-normal-placeholder-color` | 提示文案颜色           | `--color-text1-2`       |\n| `--select-drawer-large-font-size`          | 字体大小               | `--p-subhead-font-size` |\n| `--select-drawer-medium-font-size`         | 字体大小               | `--p-body-2-font-size`  |\n| `--select-drawer-small-font-size`          | 字体大小               | `--p-body-1-font-size`  |\n| `--select-drawer-large-icon-size`          | 图标大小               | `--icon-s`              |\n| `--select-drawer-medium-icon-size`         | 图标大小               | `--icon-xs`             |\n| `--select-drawer-small-icon-size`          | 图标大小               | `--icon-xxs`            |\n| `--select-drawer-small-padding-tb`         | 小尺寸上下内间距       | `--s-1`                 |\n| `--select-drawer-medium-padding-tb`        | 中尺寸上下内间距       | `--s-2`                 |\n| `--select-drawer-large-padding-tb`         | 大尺寸上下内间距       | `--s-3`                 |\n| `--select-drawer-padding-lr`               | 左右内间距=            | `--s-3`                 |\n| `--select-drawer-empty-padding-lr`         | 空提示弹出抽屉左右边距 | `--s-5`                 |\n| `--select-drawer-empty-padding-tb`         | 空提示弹出抽屉上下边距 | `--s-10`                |\n| `--select-drawer-empty-font-color`         | 空提示弹出字体颜色     | `--color-text1-2`       |\n| `--select-drawer-empty-font-size`          | 空提示弹出字体大小     | `--p-body-1-font-size`  |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState, useRef, useEffect, useCallback } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { SelectDrawer } from '@alifd/meet';\n\n\nfunction Demo() {\n  return (\n    <View>\n      <Text className=\"demo-title\">Small</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer\n          size=\"small\"\n          drawerTitle=\"请选择\"\n          content=\"option 1\"\n          placeholder=\"请点击选择\"\n          style={{ width: '100%' }}\n        >\n          这里是一些内容\n        </SelectDrawer>\n        <SelectDrawer size=\"small\" drawerTitle=\"请选择\" content=\"\" placeholder=\"请点击选择\" style={{ width: '100%' }}>\n          这里是一些内容\n        </SelectDrawer>\n      </View>\n      <Text className=\"demo-title\">Medium</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer drawerTitle=\"请选择\" content=\"option 1\" placeholder=\"请点击选择\" style={{ width: '100%' }}>\n          这里是一些内容\n        </SelectDrawer>\n        <SelectDrawer drawerTitle=\"请选择\" content=\"\" placeholder=\"请点击选择\" style={{ width: '100%' }}>\n          这里是一些内容\n        </SelectDrawer>\n      </View>\n      <Text className=\"demo-title\">Large</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer\n          size=\"large\"\n          drawerTitle=\"请选择\"\n          content=\"option 1\"\n          placeholder=\"请点击选择\"\n          style={{ width: '100%' }}\n        >\n          这里是一些内容\n        </SelectDrawer>\n        <SelectDrawer size=\"large\" drawerTitle=\"请选择\" content=\"\" placeholder=\"请点击选择\" style={{ width: '100%' }}>\n          这里是一些内容\n        </SelectDrawer>\n      </View>\n      <Text className=\"demo-title\">右对齐</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer\n          align=\"right\"\n          drawerTitle=\"请选择\"\n          content=\"option 1\"\n          placeholder=\"请点击选择\"\n          style={{ width: '100%' }}\n        >\n          这里是一些内容\n        </SelectDrawer>\n      </View>\n      <Text className=\"demo-title\">右对齐</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer\n          content=\"清除功能\"\n          drawerTitle=\"自带清除按钮\"\n          placeholder=\"请点击选择\"\n          hasClear\n          onClear={() => {\n            console.log('onClear');\n          }}\n        >\n          内容\n        </SelectDrawer>\n      </View>\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState, useRef, useEffect, useCallback } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { SelectDrawer } from '@alifd/meet';\n\n\nfunction Demo() {\n  return (\n    <View>\n      <Text className=\"demo-title\">empty tip</Text>\n      <View className=\"demo-content\">\n        <SelectDrawer drawerTitle=\"请选择\" content=\"option1\" notFoundContent=\"无选项\" placeholder=\"请选择\" />\n        <SelectDrawer\n          drawerTitle=\"请选择\"\n          notFoundContent={\n            <View>\n              <Text style={{ color: '#ff9900' }}>无选项， 请确认</Text>\n            </View>\n          }\n          content=\"\"\n          placeholder=\"请选择\"\n        />\n      </View>\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Select",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "下拉选择框",
    "importStatement": "import { Select } from '@alifd/meet';",
    "body": "\n# Select\n\n选择器，用于从选择数据。\n\n API\n\n### Props\n\n| 名称             | 说明                                                                                                                               | 类型                                                                                                                        | 默认值   |\n| :--------------- | :--------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------- | :------- |\n| placeholder      | 选择框的提示文案                                                                                                                   | string                                                                                                                      |          |\n| mode             | 类型<br>可选值：<br> `single`, `muliple`                                                                                           | Enum                                                                                                                        | `single` |\n| showIcon         | 是否展示右侧图标                                                                                                                   | Boolean                                                                                                                     | true     |\n| iconType         | 自定义右侧箭头图标,从 icon 中选择                                                                                                  | String                                                                                                                      |          |\n| value            | 选择框的值（受控）, mode=multiple 时为数组                                                                                         | any                                                                                                                         |          |\n| defaultValue     | 选择框的值（非受控）,mode=multiple 时为数组                                                                                        | any                                                                                                                         |          |\n| hasClear         | 是否展示清除按钮                                                                                                                   | Boolean                                                                                                                     | false    |\n| disabled         | 是否被禁用                                                                                                                         | bool                                                                                                                        | false    |\n| type             | 选择框类型 <br/> 可选值： <br/> `normal` , `inverse`                                                                               | Enum                                                                                                                        | 'normal' |\n| size             | 尺寸 <br/> 可选值： <br/> `small`, `medium`,`large`                                                                                | Enum                                                                                                                        | medium   |\n| disabled         | 是否为禁用态                                                                                                                       | Boolean                                                                                                                     | false    |\n| readOnly         | 是否为只读态                                                                                                                       | Boolean                                                                                                                     | false    |\n| hasSearch        | 是否为 Search 模式                                                                                                                 | Boolean                                                                                                                     | false    |\n| align            | 对齐方式 <br/> 可选值： <br/> `left`, `right`                                                                                      | Enum                                                                                                                        | left     |\n| useDetailValue   | 是否使用详细 value 值 <br/> 设为 `true` 时，`value`、`defalutValue`、`onChange`回调的第一个参数，统一为`{label:string, value:any}` | Boolean                                                                                                                     | false    |\n| renderSelection  | 自定义选中项目渲染内容                                                                                                             | (selectedOptions, value)=>RaxNode                                                                                           |          |\n| filterLocal      | 开启本地搜索过滤 <br/> 当 hasSearch=true 时，filterLocal 默认为 `true` ，如果要处理远程数据源，须关闭此项                          | Boolean                                                                                                                     | false    |\n| isPreview        | 是否为预览态                                                                                                                       | Boolean                                                                                                                     | false    |\n| renderPreview    | 自定义预览样式 ,`value` 参数格式为 `[{label:string,value:any}]`                                                                    | (value)=>RaxNode                                                                                                            |          |\n| previewClassName | 预览态自定义样式类                                                                                                                 | string                                                                                                                      |          |\n| previewStyle     | 预览态自定义样式                                                                                                                   | CSS Properties                                                                                                              |          |\n| onSearch         | 用户搜索时回调，仅当 `hasSearch=true` 时，触发                                                                                     | (searchValue?:string)=>void                                                                                                 |          |\n| onClear          | 点击清除按钮回调                                                                                                                   | ()=>void                                                                                                                    |          |\n| onChange         | 值改变时触发回调 <br/> `value(s)` 当前选中项的值 <br/> `actionType` 区分值为 `change`、`clear` <br/> `item(s)` 选中项对象数据      | 单选时：(value, actionType:string, item)=> void <br/> 多选时： (values:array, actionType:string, items:array)=>void(多选时) |          |\n\n### CSS Variables\n\n| 名称                      | 说明       | 默认值                 |\n| :------------------------ | :--------- | :--------------------- |\n| `--select-search-padding` | 搜索框间隙 | `--box-medium-padding` |\n\n> select 组件的大量样式在依赖的组件中设置\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [];\nfor (let i = 0; i < 20; i++) {\n  data.push({\n    label: `Option ${i}`,\n    value: i,\n  });\n}\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  const [val, setVal] = useState([]);\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Sizes</Text>\n      <View>\n        {sizes.map((size) => (\n          <Select\n            key={size}\n            placeholder={size}\n            size={size}\n            onChange={(v) => {\n              console.log({\n                size,\n                v,\n              });\n            }}\n          >\n            <Select.Option value={1}>option 1</Select.Option>\n            <Select.Option value={2}>option 2</Select.Option>\n            <Select.Option value={3}>option 3</Select.Option>\n          </Select>\n        ))}\n      </View>\n\n      <Text className=\"demo-title\">No Arrow</Text>\n      <View>\n        <Select placeholder=\"no arrow\" showIcon={false}>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n\n      <Text className=\"demo-title\">Align</Text>\n      <View>\n        <Select placeholder=\"align right\" align=\"right\">\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n\n      <Text className=\"demo-title\">DataSource</Text>\n      <View>\n        <Select placeholder=\"Please Select...\" mode=\"multiple\" dataSource={data} />\n        <Select\n          placeholder=\"Please Select...\"\n          dataSource={[\n            {\n              label: 'True',\n              value: true,\n            },\n            {\n              label: 'False',\n              value: false,\n            },\n          ]}\n        />\n      </View>\n\n      <Text className=\"demo-title\">Multiple</Text>\n      <View>\n        <Select placeholder=\"Please Select...\" mode=\"multiple\" value={val} onChange={handleChange}>\n          {data.map((item) => (\n            <Select.Option key={item.value} value={item.value} disabled={item.disabled}>\n              {item.label}\n            </Select.Option>\n          ))}\n        </Select>\n        <Button\n          type=\"primary\"\n          model=\"outline\"\n          onClick={() => {\n            setVal(undefined);\n          }}\n        >\n          clear selection\n        </Button>\n      </View>\n\n      <Text className=\"demo-title\">Disabled & ReadOnly</Text>\n      <View>\n        <Select placeholder=\"disabled with value\" value={2} disabled>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n        <Select placeholder=\"disabled\" disabled>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n        <Select placeholder=\"readOnly\" readOnly>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  const [val, setVal] = useState(2);\n\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">with clear</Text>\n      <View>\n        <Select\n          value={val}\n          hasClear\n          onClear={() => {\n            setVal('');\n          }}\n          onChange={setVal}\n        >\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [];\nfor (let i = 0; i < 20; i++) {\n  data.push({\n    label: `Option ${i}`,\n    value: i,\n  });\n}\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  const [val, setVal] = useState([]);\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Sizes</Text>\n      <View className=\"demo-content--inverse\">\n        {sizes.map((size) => (\n          <Select\n            type=\"inverse\"\n            key={size}\n            placeholder={size}\n            size={size}\n            onChange={(v) => {\n              console.log({\n                size,\n                v,\n              });\n            }}\n          >\n            <Select.Option value={1}>option 1</Select.Option>\n            <Select.Option value={2}>option 2</Select.Option>\n            <Select.Option value={3}>option 3</Select.Option>\n          </Select>\n        ))}\n      </View>\n\n      <Text className=\"demo-title\">No Arrow</Text>\n      <View className=\"demo-content--inverse\">\n        <Select type=\"inverse\" placeholder=\"no arrow\" showIcon={false}>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n\n      <Text className=\"demo-title\">Align</Text>\n      <View className=\"demo-content--inverse\">\n        <Select type=\"inverse\" placeholder=\"align right\" align=\"right\">\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n\n      <Text className=\"demo-title\">Multiple</Text>\n      <View className=\"demo-content--inverse\">\n        <Select type=\"inverse\" placeholder=\"Please Select...\" mode=\"multiple\" value={val} onChange={handleChange}>\n          {data.map((item) => (\n            <Select.Option key={item.value} value={item.value} disabled={item.disabled}>\n              {item.label}\n            </Select.Option>\n          ))}\n        </Select>\n        <Button\n          type=\"inverse\"\n          model=\"outline\"\n          onClick={() => {\n            setVal(undefined);\n          }}\n        >\n          clear selection\n        </Button>\n      </View>\n\n      <Text className=\"demo-title\">Disabled & ReadOnly</Text>\n      <View className=\"demo-content--inverse\">\n        <Select type=\"inverse\" placeholder=\"disabled with value\" value={2} disabled>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n        <Select type=\"inverse\" placeholder=\"disabled\" disabled>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n        <Select type=\"inverse\" placeholder=\"readOnly\" readOnly>\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [];\nfor (let i = 0; i < 20; i++) {\n  data.push({\n    label: `Option ${i}`,\n    value: i,\n  });\n}\nconst sizes = ['small', 'medium', 'large'];\n\nconst Demo = () => {\n  const [val, setVal] = useState([]);\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Mode</Text>\n      <View className=\"demo-content\">\n        <Select\n          mode=\"single\"\n          placeholder={'单选'}\n          defaultValue={2}\n          hasClear\n          onChange={(val, actionType, items) => {\n            console.log(val, actionType, items);\n          }}\n        >\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n        </Select>\n        <Select\n          mode=\"multiple\"\n          placeholder={'多选'}\n          hasClear\n          defaultValue={[2, 3]}\n          onChange={(val, actionType, items) => {\n            console.log(val, actionType, items);\n          }}\n        >\n          <Select.Option value={1}>option 1</Select.Option>\n          <Select.Option value={2}>option 2</Select.Option>\n          <Select.Option value={3}>option 3</Select.Option>\n          <Select.Option value={4}>option 4</Select.Option>\n          <Select.Option value={5}>option 5</Select.Option>\n          <Select.Option value={6}>option 6</Select.Option>\n        </Select>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Badge } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [];\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    label: `Option ${i}`,\n    value: i,\n  });\n}\n\nconst Demo = () => {\n  const [val, setVal] = useState([]);\n  const handleChange = (v) => {\n    setVal(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Custom Select Content</Text>\n      <Select\n        placeholder=\"Please Select...\"\n        mode=\"multiple\"\n        value={val}\n        onChange={handleChange}\n        renderSelection={(options = []) => {\n          if (options.length === 0) {\n            return null;\n          }\n\n          return (\n            <View className=\"custom-content\">\n              <Text className=\"content-text\">{options.map((option) => option.label).join(',')}</Text>\n              <Badge count={options.length} />\n            </View>\n          );\n        }}\n      >\n        {data.map((item) => (\n          <Select.Option key={item.value} value={item.value} disabled={item.disabled}>\n            {item.label}\n          </Select.Option>\n        ))}\n      </Select>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 6,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">empty tip</Text>\n      <View>\n        <Select placeholder=\"空字符提示\" notFoundContent=\"无选项\" />\n        <Select placeholder=\"自定义提示\" notFoundContent={<Text style={{ color: '#ff9900' }}>无选项，请确认</Text>} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 7,
        "jsx": "import { createElement, render, useState, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst createList = (prefix = 'option') => {\n  return Array.from(new Array(20)).map((item, index) => {\n    return {\n      label: `${prefix} ${index}`,\n      value: index,\n    };\n  });\n};\n\nlet timer = null;\n\nconst Demo = () => {\n  const [dataSource, setDataSource] = useState(createList('option'));\n  const [val, setValue] = useState([1, 12]);\n\n  const handleSearch = (v) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      setDataSource(createList(v));\n    }, 100);\n  };\n\n  const handleChange = (v) => {\n    setValue(v);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">dynamic search</Text>\n      <View>\n        <Select\n          placeholder=\"请选择\"\n          dataSource={dataSource}\n          mode=\"multiple\"\n          hasClear\n          filterLocal\n          hasSearch\n          value={val}\n          onSearch={handleSearch}\n          onChange={handleChange}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 8,
        "jsx": "import { createElement, render, useState, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [\n  {\n    value: 1,\n    label: '李伦',\n  },\n  {\n    value: 29,\n    label: 'Simon 石神',\n  },\n  {\n    value: 86,\n    label: '遥川',\n  },\n  {\n    value: 77,\n    label: '朱道勇(懵主)',\n  },\n  {\n    value: 79,\n    label: '高松',\n  },\n  {\n    value: 5,\n    label: '冯汝伟',\n  },\n  {\n    value: 85,\n    label: '卢世杰(锦晟)',\n  },\n  {\n    value: 60,\n    label: '杨恒(野客)',\n  },\n  {\n    value: 93,\n    label: '王启明(闪星)',\n  },\n  {\n    value: 84,\n    label: '夏雪东',\n  },\n  {\n    value: 59,\n    label: '范永鹏(子益)',\n  },\n  {\n    value: 55,\n    label: '袁志祥',\n  },\n  {\n    value: 22,\n    label: '孙文哲',\n  },\n  {\n    value: 6,\n    label: '黄勃(远猷)',\n  },\n  {\n    value: 2,\n    label: '测试用户',\n  },\n  {\n    value: 57,\n    label: '尹猛',\n  },\n  {\n    value: 87,\n    label: '朱星玥',\n  },\n  {\n    value: 76,\n    label: '袁一',\n  },\n  {\n    value: 58,\n    label: '龙斌',\n  },\n  {\n    value: 18,\n    label: '秦昌雷',\n  },\n];\n\nlet timer;\n\nconst Demo = () => {\n  const [ds, setDataSource] = useState([]);\n  const [val, setValue] = useState([1, 86]);\n\n  // mock remote load delay\n  const loadData = (filterVal) => {\n    setTimeout(() => {\n      if (filterVal) {\n        const newDataSource = data.filter((item) => {\n          return new RegExp(filterVal).test(item.label);\n        });\n        setDataSource(newDataSource);\n      } else {\n        setDataSource(data);\n      }\n    }, 500);\n  };\n\n  const handleSearch = (v) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(() => {\n      loadData(v);\n    }, 500);\n  };\n\n  const handleChange = (v) => {\n    setValue(v);\n  };\n\n  const handleVisibleChange = (open) => {\n    if (open) {\n      loadData();\n    }\n  };\n\n  useEffect(() => {\n    // first load\n    loadData();\n  }, []);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">remote load</Text>\n      <View>\n        <Select\n          placeholder=\"请选择\"\n          dataSource={ds}\n          mode=\"multiple\"\n          hasSearch\n          hasClear\n          filterLocal\n          value={val}\n          onChange={handleChange}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 9,
        "jsx": "import { createElement, render, useState, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst data = [\n  {\n    value: 1,\n    label: '李伦',\n  },\n  {\n    value: 29,\n    label: 'Simon 石神',\n  },\n  {\n    value: 86,\n    label: '遥川',\n  },\n  {\n    value: 77,\n    label: '朱道勇(懵主)',\n  },\n  {\n    value: 79,\n    label: '高松',\n  },\n  {\n    value: 5,\n    label: '冯汝伟',\n  },\n  {\n    value: 85,\n    label: '卢世杰(锦晟)',\n  },\n  {\n    value: 60,\n    label: '杨恒(野客)',\n  },\n  {\n    value: 93,\n    label: '王启明(闪星)',\n  },\n  {\n    value: 84,\n    label: '夏雪东',\n  },\n  {\n    value: 59,\n    label: '范永鹏(子益)',\n  },\n  {\n    value: 55,\n    label: '袁志祥',\n  },\n  {\n    value: 22,\n    label: '孙文哲',\n  },\n  {\n    value: 6,\n    label: '黄勃(远猷)',\n  },\n  {\n    value: 2,\n    label: '测试用户',\n  },\n  {\n    value: 57,\n    label: '尹猛',\n  },\n  {\n    value: 87,\n    label: '朱星玥',\n  },\n  {\n    value: 76,\n    label: '袁一',\n  },\n  {\n    value: 58,\n    label: '龙斌',\n  },\n  {\n    value: 18,\n    label: '秦昌雷',\n  },\n];\n\nlet timer;\n\nconst Demo = () => {\n  const [ds, setDataSource] = useState([]);\n  const [val, setValue] = useState([\n    // 初始数据\n    { label: '李伦', value: 1 },\n    { label: '遥川', value: 86 },\n  ]);\n\n  // mock remote load delay\n  const loadData = (filterVal) => {\n    setTimeout(() => {\n      if (filterVal) {\n        const newDataSource = data.filter((item) => {\n          return new RegExp(filterVal).test(item.label);\n        });\n        setDataSource(newDataSource);\n      } else {\n        setDataSource(data);\n      }\n    }, 500);\n  };\n\n  const handleSearch = (v) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(() => {\n      loadData(v);\n    }, 500);\n  };\n\n  const handleChange = (v) => {\n    setValue(v);\n  };\n\n  const handleVisibleChange = (open) => {\n    if (open) {\n      loadData();\n    }\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">load with search</Text>\n      <View>\n        <Select\n          placeholder=\"请选择\"\n          dataSource={ds}\n          mode=\"multiple\"\n          hasSearch\n          hasClear\n          filterLocal={false}\n          useDetailValue\n          value={val}\n          onSearch={handleSearch}\n          onChange={handleChange}\n          onVisibleChange={handleVisibleChange}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 10,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Select, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst createList = (prefix = 'option') => {\n  return Array.from(new Array(20)).map((item, index) => {\n    return {\n      label: `${prefix} ${index}`,\n      value: index,\n    };\n  });\n};\n\nlet timer = null;\n\nconst Demo = () => {\n  const [dataSource] = useState(createList('option'));\n\n  return (\n    <View>\n      <Text className=\"demo-title\">preview</Text>\n      <Select isPreview dataSource={dataSource} mode=\"single\" size=\"large\" defaultValue={0} />\n      <Select isPreview dataSource={dataSource} mode=\"multiple\" size=\"medium\" value={[0, 1]} />\n      <Select\n        isPreview\n        renderPreview={(vals) => {\n          return vals.map((i) => i.label).join(',');\n        }}\n        dataSource={dataSource}\n        mode=\"multiple\"\n        size=\"small\"\n        value={[0, 1, 2]}\n      />\n\n      <Select\n        isPreview\n        previewClassName=\"custom-preview\"\n        previewStyle={\n          {\n            //...\n          }\n        }\n        dataSource={dataSource}\n        mode=\"single\"\n        size=\"large\"\n        defaultValue={[1, 2, 3]}\n      />\n      <Select isPreview value={3}>\n        <Select.Option value={1}>option 1</Select.Option>\n        <Select.Option value={2}>option 2</Select.Option>\n        <Select.Option value={3}>option 3</Select.Option>\n      </Select>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "SlideView",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "滑动删除容器",
    "importStatement": "import { SlideView } from '@alifd/meet';",
    "body": "\n# SlideView\n\n滑动按钮组件\n\n API\n\n### Props\n\n| 名称          | 说明                                 | 类型             | 默认值 |\n| :------------ | :----------------------------------- | :--------------- | :----- |\n| uid           | 必传，用来区分页面上的多个 SlideView | string \\| number | 0      |\n| leftActions   | 左侧按钮                             | ActionItem[]     | -      |\n| rightActions  | 右侧按钮                             | ActionItem[]     | -      |\n| duration      | 回弹动画间隔 (ms)                    | number           | 500    |\n| triggerOffset | 回弹触发宽度 (px)                    | number           | 36     |\n\n### ActionItem\n\n| 名称    | 说明                                                                                           | 类型                                              | 默认值 |\n| :------ | :--------------------------------------------------------------------------------------------- | :------------------------------------------------ | :----- |\n| content | 按钮内容                                                                                       | Rax.RaxNode                                       | -      |\n| onClick | 按钮点击回调（可以返回 boolean 或者 Promise<boolean> 控制 SlideView 的回弹，false 表示不回弹） | () => Promise<boolean \\| void> \\| boolean \\| void | -      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, Component, render } from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { SlideView } from '@alifd/meet';\nimport DriverUniversal from 'driver-universal';\n\n// 由于 fusion 未来会走 css var 的方案，因此组件这层不再依赖 less 或者 sass\n\nconst SlideViewDemo = () => {\n  const leftActions = [\n    {\n      content: <Text className=\"view-button\">查看</Text>,\n      onClick: () => {\n        console.log('查看');\n      },\n    },\n    {\n      content: <Text className=\"cancel-button\">取消</Text>,\n      onClick: () => {\n        console.log('取消');\n      },\n    },\n  ];\n\n  const rightActions = [\n    {\n      content: <Text className=\"edit-button\">编辑</Text>,\n      onClick: () => {\n        console.log('编辑');\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(true);\n          }, 1000);\n        });\n      },\n    },\n    {\n      content: <Text className=\"delete-button\">删除</Text>,\n      onClick: () => {\n        console.log('删除');\n      },\n    },\n  ];\n\n  return (\n    <View className=\"demo\">\n      <SlideView uid={0} leftActions={leftActions} rightActions={rightActions}>\n        <View className=\"demo-message\">\n          <Text>一条可以滑动的消息</Text>\n        </View>\n      </SlideView>\n      <SlideView uid={1} rightActions={rightActions}>\n        <View className=\"demo-message\">\n          <Text>只可左滑</Text>\n        </View>\n      </SlideView>\n      <SlideView uid={2} leftActions={leftActions}>\n        <View className=\"demo-message\">\n          <Text>只可右滑</Text>\n        </View>\n      </SlideView>\n    </View>\n  );\n};\n\nrender(<SlideViewDemo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Slider",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "图片轮播",
    "importStatement": "import { Slider } from '@alifd/meet';",
    "body": "\n# Slider\n\n轮播图\n\n> 基于 rax-slider 实现， 目前只支持 横向水平滚动\n\n API\n\n### Props\n\n| 名称        | 说明                 | 类型                    | 默认值 |\n| :---------- | :------------------- | :---------------------- | :----- |\n| width       | 默认 slide 宽度      | number, string          |        |\n| height      | 默认 slide 高度      | number, string          |        |\n| activeIndex | 默认初始化页数       | number                  | 0      |\n| showDots    | 显示导航锚点         | boolean                 | true   |\n| dotStyle    | 导航锚点自定义样式   | cssproperties           | {}     |\n| autoplay    | 是否自动切换         | boolean                 | false  |\n| interval    | 自动切换的时间间隔   | number                  | 3000   |\n| onChange    | 切换面板后的回调函数 | (current: number): void |        |\n\n### 快捷调用\n\n#### Slider.show(options: object)\n\nJS 方式唤起带浮层功能的 Slider\n\n`options` 参数:\n\n- options.items 图片列表\n- option.height 图片高度\n- options.onClose slider 关闭事件\n\n> 其他参数与 Slider 属性一致\n\n```js\nimport { Slider } from '@alifd/meet';\n// ...\n\nSlider.show({\n  items,\n  actionIndex: 1, // 指定选中项目\n  onChange: () => {},\n  onClose: () => {},\n});\n```\n\n### CSS Variables\n\n| 名称 | 说明 | 默认值 |\n| :--- | :--- | :----- |\n| -    | -    | -      |\n\n> slider 的 dot 样式需要用 dotStyle 属性设置, 参考： rax-slider 的 paginationStyle 配置\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Slider } from '@alifd/meet';\nimport View from 'rax-view';\nimport Image from 'rax-image';\n\n\nconst Demo = () => {\n  const [activeIndex, setActiveIndex] = useState(2);\n\n  const handleChange = (index) => {\n    console.log(index);\n    console.log(`slider to ${index}`);\n  };\n  const imgs = [\n    'https://gw.alicdn.com/tfs/TB1sZMvUhv1gK0jSZFFXXb0sXXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1RDZoUaL7gK0jSZFBXXXZZpXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1rSwHgdTfau8jSZFwXXX1mVXa-690-372.png',\n  ];\n\n  return (\n    <View>\n      <View className=\"demo-title\">basic</View>\n      <View className=\"demo-content slider-content\">\n        <Slider\n          width={690}\n          height={372}\n          activeIndex={activeIndex}\n          autoplay={true}\n          infinite={true}\n          onChange={handleChange}\n        >\n          {imgs.map((img) => {\n            return (\n              <Slider.Item key={img}>\n                <View className=\"item-wrapper\">\n                  <Image\n                    className=\"img\"\n                    source={{\n                      uri: img,\n                    }}\n                  />\n                </View>\n              </Slider.Item>\n            );\n          })}\n        </Slider>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Slider } from '@alifd/meet';\nimport View from 'rax-view';\nimport Image from 'rax-image';\n\n\nconst Demo = () => {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleChange = (index) => {\n    console.log(index);\n    console.log(`slider to ${index}`);\n  };\n  const imgs = [\n    'https://gw.alicdn.com/tfs/TB1sZMvUhv1gK0jSZFFXXb0sXXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1RDZoUaL7gK0jSZFBXXXZZpXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1rSwHgdTfau8jSZFwXXX1mVXa-690-372.png',\n  ];\n\n  return (\n    <View>\n      <View className=\"demo-title\">hide dots</View>\n      <View className=\"demo-content slider-content\">\n        <Slider\n          width={690}\n          height={372}\n          activeIndex={activeIndex}\n          autoplay={true}\n          infinite={false}\n          showDots={false}\n          autoplaySpeed={1000}\n          onChange={handleChange}\n        >\n          {imgs.map((img) => {\n            return (\n              <Slider.Item key={img}>\n                <View className=\"item-wrapper\">\n                  <Image\n                    className=\"img\"\n                    source={{\n                      uri: img,\n                    }}\n                  />\n                </View>\n              </Slider.Item>\n            );\n          })}\n        </Slider>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState, useRef, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Slider, Radio } from '@alifd/meet';\nimport View from 'rax-view';\nimport Image from 'rax-image';\n\n\nconst Demo = () => {\n  const [activeIndex, setActiveIndex] = useState(1);\n  const ref = useRef(null);\n\n  const imgs = [\n    'https://gw.alicdn.com/tfs/TB1sZMvUhv1gK0jSZFFXXb0sXXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1RDZoUaL7gK0jSZFBXXXZZpXa-690-372.png',\n    'https://gw.alicdn.com/tfs/TB1rSwHgdTfau8jSZFwXXX1mVXa-690-372.png',\n  ];\n\n  return (\n    <View>\n      <View className=\"demo-title\">slide manually</View>\n      <View className=\"demo-content slider-content\">\n        <Slider ref={ref} width={690} height={372} activeIndex={activeIndex} autoplay={false} infinite={false}>\n          {imgs.map((img) => {\n            return (\n              <Slider.Item key={img}>\n                <View className=\"item-wrapper\">\n                  <Image\n                    className=\"img\"\n                    source={{\n                      uri: img,\n                    }}\n                  />\n                </View>\n              </Slider.Item>\n            );\n          })}\n        </Slider>\n      </View>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <View className=\"demo-item-name\">切换至</View>\n          <View className=\"demo-item-content\">\n            <Radio.Group\n              direction=\"hoz\"\n              size=\"small\"\n              dataSource={[0, 1, 2]}\n              onChange={(index) => {\n                ref.current.slideTo(index);\n              }}\n            />\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Slider, Button } from '@alifd/meet';\nimport View from 'rax-view';\nimport Image from 'rax-image';\nimport Video from 'rax-video';\n\n\nconst items = [\n  {\n    src: 'https://videocdn.taobao.com/oss/ali-video/1fa0c3345eb3433b8af7e995e2013cea/1458900536/video.mp4',\n    type: 'video',\n  },\n  'https://gw.alicdn.com/tfs/TB1RDZoUaL7gK0jSZFBXXXZZpXa-690-372.png',\n  'https://gw.alicdn.com/tfs/TB1rSwHgdTfau8jSZFwXXX1mVXa-690-372.png',\n];\n\nconst Demo = () => {\n  const handleClick = () => {\n    Slider.show({\n      items,\n      height: 372,\n      autoPlay: true,\n      autoControl: true,\n      onClose: () => {\n        console.log('onClose');\n      },\n      onChange: (index, elements, refs) => {\n        console.log(index, elements, refs);\n      },\n      onReady: (elements, refs) => {\n        console.log(elements, refs);\n      },\n    });\n  };\n\n  return (\n    <View>\n      <View className=\"demo-title\">quick call</View>\n      <View className=\"demo-content slider-content\">\n        <Button type=\"primary\" onClick={handleClick}>\n          show slider\n        </Button>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Step",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "步骤",
    "importStatement": "import { Step } from '@alifd/meet';",
    "body": "\n# Step\n\n步骤条，用于分步导航\n\n API\n\n### Props\n\n#### Step\n\n| 名称      | 说明                                             | 类型                    | 默认值 |\n| :-------- | :----------------------------------------------- | :---------------------- | :----- |\n| shape     | 形状 <br/> 可选值: <br/> `circle`, `arrow` `dot` | Enum                    | circle |\n| direction | 方向 <br/> 可选值: <br/> `hoz`, `ver`            | Enum                    | hoz    |\n| current   | 当前步骤（受控模式）                             | Number                  | 0      |\n| disabled  | 禁用整个 step                                    | Boolean                 | false  |\n| readOnly  | 是否为只读模式                                   | Boolean                 | false  |\n| onChange  | 步骤切换回调                                     | (current: number)=>void |        |\n\n#### Step.Item\n\n| 名称     | 说明                                                                                                | 类型                 | 默认值 |\n| :------- | :-------------------------------------------------------------------------------------------------- | :------------------- | :----- |\n| status   | 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成 <br/> 可选值: `wait`, `process`, `finish` | Enum                 |        |\n| icon     | 图标， `shape=circle` 时接受 `<Icon>` 组件支持的 name 字符串, 或自定义节点                          | String or RaxNode    |        |\n| title    | 标题                                                                                                | String or RaxNode    |        |\n| content  | 内容，shape 为 `arrow` 时失效                                                                       | String or RaxNode    |        |\n| addon    | 附加节点，附加展示与节点左侧的内容。 仅当 `direction` 为 `ver` 且 `shape` 不为 `arrow` 时生效       | String or RaxNode    |\n| percent  | 百分比 (小程序下暂时不支持)                                                                         | Number               |        |\n| disabled | 是否禁用                                                                                            | false                |        |\n| onClick  | 点击回调                                                                                            | (index:number)=>void |        |\n\n> 子节点只能是 Checkbox\n\n### CSS Variables\n\n| 名称                                | 说明                    | 默认值                 |\n| :---------------------------------- | :---------------------- | :--------------------- |\n| `--step-horn-line-width`            | 连接线宽度              | `--line-1`             |\n| `--step-spacing`                    | 间隙                    | `--box-medium-spacing` |\n| `--step-circle-inner-font-size`     | circle 内部字体         | `--p-body-1-icon-size` |\n| `--step-title-font-size`            | 标题字体大小            | `--p-body-2-icon-size` |\n| `--step-content-font-size`          | 描述文案字体大小        | `--p-body-1-icon-size` |\n| `--step-circle-size`                | circle 尺寸             | `--s-7`                |\n| `--step-dot-size`                   | dot 尺寸                | `--s-4`                |\n| `--step-arrow-size`                 | arrow 高度              | `56rpx`                |\n| `--step-active-color`               | 激活颜色                | `--color-brand-3`      |\n| `--step-node-bg-color`              | 节点背景颜色            | `--color-white`        |\n| `--step-body-font-color`            | 标题和描述文案颜色      | `--color-text1-3`      |\n| `--step-title-process-color`        | 标题 process 颜色       | `--color-text1-4`      |\n| `--step-wait-line-color`            | 连接线颜色              | `--color-line1-3`      |\n| `--step-vertical-spacing`           | 垂直模式 节点与文案间隙 | `--s-4`                |\n| `--step-arrow-finish-bg-color`      | 箭头已完成背景颜色      | `--color-brand-1`      |\n| `--step-circle-finish-font-color`   | 箭头字体颜色            | `--color-text1-1`      |\n| `--step-dot-wait-border-color`      | 圆点边框颜色            | `--color-text1-1`      |\n| `--step-circle-process-font-color`  | 节点内部字体颜色        | `--color-white`        |\n| `--step-arrow-wait-color`           | 箭头未完成背景颜色      | `--color-fill1-2`      |\n| `--step-arrow-disabled-bg-color`    | 禁用背景颜色            | `--color-fill1-1`      |\n| `--step-horn-disabled-color`        | 连接线颜色              | `--color-line1-1`      |\n| `--step-node-disabled-border-color` | 节点颜色                | `--color-line1-4`      |\n| `--step-disabled-font-color`        | 标题、描述字体颜色      | `--color-text1-1`      |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Step } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [curStep, setCurStep] = useState(-1);\n\n  const handleChange = (step) => {\n    setCurStep(step);\n  };\n\n  const handleClick = (step) => {\n    console.log(`${step} clicked`);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">dot</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"dot\" current={curStep} onChange={handleChange}>\n          <Step.Item title={'步骤 1'} content=\"描述文案\" onClick={handleClick} />\n          <Step.Item title={'步骤 2'} content=\"描述文案\" onClick={handleClick} />\n          <Step.Item title={'步骤 3'} content=\"描述文案\" onClick={handleClick} />\n        </Step>\n      </View>\n      <View className=\"demo-content\">\n        <Step shape=\"dot\" current={curStep} direction=\"ver\" onChange={handleChange}>\n          <Step.Item title={'步骤 1'} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} content=\"描述文案\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">circle</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"circle\" current={curStep} onChange={handleChange}>\n          <Step.Item title={'步骤 1'} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} content=\"描述文案\" />\n        </Step>\n      </View>\n      <View className=\"demo-content\">\n        <Step shape=\"circle\" current={curStep} direction=\"ver\" onChange={handleChange}>\n          <Step.Item title={'步骤 1'} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} content=\"描述文案\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">arrow</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"arrow\" current={curStep} onChange={handleChange}>\n          <Step.Item title={'步骤 1'} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} content=\"描述文案\" />\n        </Step>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 1,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Step } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [curStep, setCurStep] = useState(-1);\n\n  const handleChange = (step) => {\n    setCurStep(step);\n  };\n\n  const handleClick = (step) => {\n    console.log(`${step} clicked`);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\"> title & content & icon</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"circle\" current={curStep} onChange={handleChange}>\n          <Step.Item\n            icon=\"select\"\n            title={<Text className=\"custom-title\">标题</Text>}\n            content={<Text className=\"custom-content\">自定义文案1</Text>}\n            onClick={handleClick}\n          />\n          <Step.Item\n            icon=\"ellipsis\"\n            title={<Text className=\"custom-title\">标题2</Text>}\n            content={<Text className=\"custom-content\">自定义文案2</Text>}\n            onClick={handleClick}\n          />\n          <Step.Item\n            icon=\"select\"\n            title={<Text className=\"custom-title\">标题3</Text>}\n            content={<Text className=\"custom-content\">自定义文案3</Text>}\n            onClick={handleClick}\n          />\n        </Step>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Step, Radio, Switch, Checkbox } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [curStep, setStep] = useState(-1);\n  const [disabledSteps, setDisabledSteps] = useState([]);\n  const [globalDisabled, setGlobalDisabled] = useState(false);\n\n  return (\n    <View>\n      <View className=\"demo-content\">\n        <View className=\"demo-item-line\">\n          <Text className=\"demo-item-name\">全局禁用</Text>\n          <View class=\"demo-item-content\">\n            <Switch value={globalDisabled} onChange={setGlobalDisabled} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <Text className=\"demo-item-name\">激活步骤</Text>\n          <View class=\"demo-item-content\">\n            <Radio.Group onChange={(v) => setStep(v)} direction=\"hoz\" value={curStep} dataSource={[0, 1, 2, 3, 4]} />\n          </View>\n        </View>\n        <View className=\"demo-item-line\">\n          <Text className=\"demo-item-name\">Disabled Steps</Text>\n          <View class=\"demo-item-content\">\n            <Checkbox.Group onChange={(v) => setDisabledSteps(v)} value={disabledSteps} dataSource={[0, 1, 2, 3, 4]} />\n          </View>\n        </View>\n      </View>\n\n      <Text className=\"demo-title\">dot</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"dot\" current={curStep}>\n          <Step.Item title={'步骤 1'} disabled={globalDisabled || disabledSteps.indexOf(0) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} disabled={globalDisabled || disabledSteps.indexOf(1) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} disabled={globalDisabled || disabledSteps.indexOf(2) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 4'} disabled={globalDisabled || disabledSteps.indexOf(3) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 5'} disabled={globalDisabled || disabledSteps.indexOf(4) > -1} content=\"描述文案\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">circle</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"circle\" current={curStep}>\n          <Step.Item title={'步骤 1'} disabled={globalDisabled || disabledSteps.indexOf(0) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 2'} disabled={globalDisabled || disabledSteps.indexOf(1) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 3'} disabled={globalDisabled || disabledSteps.indexOf(2) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 4'} disabled={globalDisabled || disabledSteps.indexOf(3) > -1} content=\"描述文案\" />\n          <Step.Item title={'步骤 5'} disabled={globalDisabled || disabledSteps.indexOf(4) > -1} content=\"描述文案\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">arrow</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"arrow\" current={curStep}>\n          <Step.Item title={'步骤 1'} disabled={globalDisabled || disabledSteps.indexOf(0) > -1} />\n          <Step.Item title={'步骤 2'} disabled={globalDisabled || disabledSteps.indexOf(1) > -1} />\n          <Step.Item title={'步骤 3'} disabled={globalDisabled || disabledSteps.indexOf(2) > -1} />\n          <Step.Item title={'步骤 4'} disabled={globalDisabled || disabledSteps.indexOf(3) > -1} />\n          <Step.Item title={'步骤 5'} disabled={globalDisabled || disabledSteps.indexOf(4) > -1} />\n        </Step>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Step } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">dot</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"dot\" current={3}>\n          <Step.Item title={'步骤 1'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 2'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 3'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 4'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 5'} content=\"sdsdf\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">circle</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"circle\" current={3}>\n          <Step.Item title={'步骤 1'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 2'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 3'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 4'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 5'} content=\"sdsdf\" />\n        </Step>\n      </View>\n      <Text className=\"demo-title\">arrow</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"arrow\" current={3}>\n          <Step.Item title={'步骤 1'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 2'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 3'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 4'} content=\"sdsdf\" />\n          <Step.Item title={'步骤 5'} content=\"sdsdf\" />\n        </Step>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Step } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst Demo = () => {\n  const [curStep, setCurStep] = useState(-1);\n\n  const handleChange = (step) => {\n    setCurStep(step);\n  };\n\n  const handleClick = (step) => {\n    console.log(`${step} clicked`);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">dot</Text>\n      <View className=\"demo-content\">\n        <Step shape=\"dot\" direction=\"ver\" current={curStep} onChange={handleChange}>\n          <Step.Item addon={<Text>11:01</Text>} title={'步骤 1'} content=\"描述文案\" onClick={handleClick} />\n          <Step.Item addon={<Text>11:02</Text>} title={'步骤 2'} content=\"描述文案\" onClick={handleClick} />\n          <Step.Item addon={<Text>11:03</Text>} title={'步骤 3'} content=\"描述文案\" onClick={handleClick} />\n        </Step>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Switch",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "开关",
    "importStatement": "import { Switch } from '@alifd/meet';",
    "body": "\n# Switch\n\n开关选择器，点击切换开关状态。\n\n API\n\n### Props\n\n| 名称           | 说明                                                      | 类型                                     | 默认值   |\n| :------------- | :-------------------------------------------------------- | :--------------------------------------- | :------- |\n| size           | 按钮大小 <br>可选值：<br> `small`, `medium`, `large` 尺寸 | enum                                     | `medium` |\n| checked        | 指定当前是否选中，若有值，则为受控模式                    | boolean                                  | fals     |\n| defaultChecked | 初始是否选中                                              | boolean                                  | fals     |\n| disabled       | 是否禁用                                                  | boolean                                  | false    |\n| readOnly       | 只读模式                                                  | boolean                                  | false    |\n| loading        | 是否加载态（loading 效果）                                | boolean                                  | false    |\n| className      | Switch 类名                                               | string                                   |          |\n| onChange       | 点击时回调函数                                            | Function(checked: boolean, event: Event) |          |\n\n### CSS Variables\n\n| 名称                                         | 说明             | 默认值                    |\n| :------------------------------------------- | :--------------- | :------------------------ |\n| `--switch-small-width`                       | 轨道宽度         | `s-9`                     |\n| `--switch-medium-width`                      | 轨道宽度         | `s-11`                    |\n| `--switch-large-width`                       | 轨道宽度         | `s-12`                    |\n| `--switch-small-height`                      | 轨道高度         | `s-5`                     |\n| `--switch-medium-height`                     | 轨道高度         | `s-6`                     |\n| `--switch-large-height`                      | 轨道高度         | `s-7`                     |\n| `--switch-background-color`                  | 轨道颜色         | `color-white`             |\n| `--switch-checked-background-color`          | 选中轨道颜色     | `color-brand-3`           |\n| `--switch-disabled-background-color`         | 禁选轨道颜色     | `color-fill1-1`           |\n| `--switch-disabled-checked-background-color` | 禁选选中轨道颜   | `color-brand-1`           |\n| `--switch-border-width`.                     | 轨道边框宽度     | `box-medium-border-width` |\n| `--switch-border-color`.                     | 轨道边框颜色     | `color-line1-4`           |\n| `--switch-checked-border-color`              | 选中边框颜色     | `color-brand-3`           |\n| `--switch-disabled-border-color`             | 禁选边框颜色     | `color-line1-2`           |\n| `--switch-disabled-checked-border-color`     | 禁选选中边框颜色 | `color-brand-1`           |\n| `--switch-small-corner`                      | 轨道圆角         | `s-5 / 2`                 |\n| `--switch-medium-corner`                     | 轨道圆角         | `s-6 / 2`                 |\n| `--switch-large-corner`                      | 轨道圆角         | `s-7 / 2`                 |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Switch } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\n// delayer\nconst delayer = (duration) => new Promise((resolve) => setTimeout(resolve, duration));\n\nconst Demo = () => {\n  const [asyncChecked, setAsyncChecked] = useState(false);\n  const [asyncLoading, setAsyncLoading] = useState(false);\n\n  // on change with params\n  const onChange = (checkedValue, e) => {\n    // checked value, Event\n    console.log(checkedValue, e);\n  };\n\n  // on async switch changed\n  const onAsyncSwitchChange = async () => {\n    if (asyncLoading) return;\n\n    setAsyncLoading(true);\n    await delayer(1000);\n    setAsyncLoading(false);\n    setAsyncChecked(!asyncChecked);\n  };\n\n  return (\n    <View className=\"app\">\n      <View className=\"section\">\n        <Text className=\"section-title\">Off</Text>\n\n        <View className=\"section-content\">\n          <Switch size=\"large\" onChange={onChange} />\n          <Switch size=\"medium\" />\n          <Switch size=\"small\" />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">Loading & Off</Text>\n\n        <View className=\"section-content\">\n          <Switch size=\"large\" loading />\n          <Switch size=\"medium\" loading />\n          <Switch size=\"small\" loading />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">Disabled & Off</Text>\n\n        <View className=\"section-content\">\n          <Switch size=\"large\" disabled />\n          <Switch size=\"medium\" disabled />\n          <Switch size=\"small\" disabled />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">On</Text>\n\n        <View className=\"section-content\">\n          <Switch size=\"large\" defaultChecked={true} />\n          <Switch size=\"medium\" defaultChecked={true} />\n          <Switch size=\"small\" defaultChecked={true} />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">Loading & On</Text>\n        <View className=\"section-content\">\n          <Switch size=\"large\" defaultChecked={true} loading />\n          <Switch size=\"medium\" defaultChecked={true} loading />\n          <Switch size=\"small\" defaultChecked={true} loading />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">Disabled & On</Text>\n\n        <View className=\"section-content\">\n          <Switch size=\"large\" defaultChecked={true} disabled />\n          <Switch size=\"medium\" defaultChecked={true} disabled />\n          <Switch size=\"small\" defaultChecked={true} disabled />\n        </View>\n      </View>\n\n      <View className=\"section\">\n        <Text className=\"section-title\">Switch Async</Text>\n\n        <View className=\"section-content\">\n          <Switch checked={asyncChecked} loading={asyncLoading} onChange={onAsyncSwitchChange} />\n        </View>\n      </View>\n    </View>\n  );\n};\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Tab",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "标签页",
    "importStatement": "import { Tab } from '@alifd/meet';",
    "body": "\n# Tab\n\n用于让用户在不同的视图中进行切换。\n\n API\n\n### Props\n\n| 名称             | 说明                                                        | 类型          | 默认值 |\n| :--------------- | :---------------------------------------------------------- | :------------ | :----- |\n| size             | tab 尺寸， <br/> 可选值： <br/> `small`, `medium`, `large`  | Enum          | medium |\n| activeKey        | （受控）指定激活，对应 `Tabs.Item` 的 `key / itemKey`       | string/number |        |\n| defaultActiveKey | （非受控）指定默认激活，对应 `Tabs.Item` 的 `key / itemKey` | string/number |        |\n| shape            | 外形 <br/> 可选值： <br/> `normal`, `capsule`               | Enum          | normal |\n| dataSource       | 标签页                                                      | TabItem[]     |        |\n| fullWidth        | 是否占满空间                                                | bool          | true   |\n| renderTool       | 渲染 tabs 最右侧的部分， 当 fullWidth 为空时才会渲染        | ()=> RaxNode  |        |\n| onChange         | tab 变化时触发的回调                                        | (key)=> void  |        |\n\n### Tab.Item\n\n| 名称          | 说明                                  | 类型             | 默认值 |\n| :------------ | :------------------------------------ | :--------------- | :----- |\n| key / itemKey | 标签页的值，与 activeKey 一致是被选中 | string or number |        |\n| title         | 标题                                  | string           |        |\n| icon          | `<Icon/>` 支持的图标 name             | string           |        |\n\n### CSS Variables\n\n| 名称                       | 说明           | 默认值                              |\n| :------------------------- | :------------- | :---------------------------------- |\n| `--tab-small-icon-size`    | 小尺寸图标大小 | `--icon-xxs`                        |\n| `--tab-small-spacing`      | 小尺寸内部间隙 | `--box-small-spacing`               |\n| `--tab-small-font-size`    | 小尺寸文字大小 | `--p-body-1-font-size`              |\n| `--tab-small-padding`      | 小尺寸内边距   | `--box-small-padding`               |\n| `--tab-medium-icon-size`   | 中尺寸图标大小 | `--icon-xs`                         |\n| `--tab-medium-spacing`     | 中尺寸内部间隙 | `--box-medium-spacing`              |\n| `--tab-medium-font-size`   | 中尺寸文字大小 | `--p-body-2-font-size`              |\n| `--tab-medium-padding`     | 中尺寸内边距   | `--box-medium-padding`              |\n| `--tab-large-icon-size`    | 大尺寸图标大小 | `--icon-s`                          |\n| `--tab-large-spacing`      | 大尺寸内部间隙 | `--box-large-spacing`               |\n| `--tab-large-font-size`    | 大尺寸文字大小 | `--p-subhead-font-size`             |\n| `--tab-large-padding`      | 大尺寸内边距   | `--box-large-padding`               |\n| `--tab-bg-color`           | 背景色         | `--color-white`                     |\n| `--tab-divider-color`      | 分割线颜色     | `--box-normal-outline-border-color` |\n| `--tab-divider-height`     | 分割线高度     | `--line-1`                          |\n| `--tab-active-line-height` | 激活线高度     | `2rpx`                              |\n| `--tab-normal-color`       | 普通文本颜色   | `--box-normal-outline-font-color`   |\n| `--tab-active-color`       | 选中文本颜色   | `--box-primary-text-font-color`     |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Tab, Icon } from '@alifd/meet';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">Basic</Text>\n      <View className=\"demo-content\">\n        <Tab\n          defaultActiveKey={'2'}\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n        />\n      </View>\n      <Text className=\"demo-title\">Capsule Tab</Text>\n      <View className=\"demo-content\">\n        <Tab\n          size=\"small\"\n          shape=\"capsule\"\n          defaultActiveKey=\"1\"\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n        />\n        <Tab\n          shape=\"capsule\"\n          defaultActiveKey=\"1\"\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n        />\n        <Tab\n          size=\"large\"\n          shape=\"capsule\"\n          defaultActiveKey=\"1\"\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n        />\n      </View>\n\n      <Text className=\"demo-title\">Sizes</Text>\n      <View className=\"demo-content\">\n        <Tab\n          size=\"small\"\n          defaultActiveKey=\"1\"\n          dataSource={[\n            { title: 'Tab 1', key: '1', icon: 'favorite' },\n            { title: 'Tab 2', key: '2', icon: 'favorite' },\n            { title: 'Tab 3', key: '3', icon: 'favorite' },\n          ]}\n        />\n        <Tab\n          size=\"medium\"\n          defaultActiveKey=\"1\"\n          dataSource={[\n            { title: 'Tab 1', key: '1', icon: 'favorite' },\n            { title: 'Tab 2', key: '2', icon: 'favorite' },\n            { title: 'Tab 3', key: '3', icon: 'favorite' },\n          ]}\n        />\n        <Tab\n          defaultActiveKey=\"1\"\n          size=\"large\"\n          dataSource={[\n            { title: 'Tab 1', key: '1', icon: 'favorite' },\n            { title: 'Tab 2', key: '2', icon: 'favorite' },\n            { title: 'Tab 3', key: '3', icon: 'favorite' },\n          ]}\n        />\n      </View>\n      <Text className=\"demo-title\">onChange</Text>\n      <View className=\"demo-content\">\n        <Tab\n          defaultActiveKey={'2'}\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n          onChange={(key) => {\n            console.log(key);\n          }}\n        />\n      </View>\n      <Text className=\"demo-title\">Controlled</Text>\n      <View className=\"demo-content\">\n        <Tab\n          activeKey={'3'}\n          dataSource={[\n            { title: 'Tab 1', key: '1' },\n            { title: 'Tab 2', key: '2' },\n            { title: 'Tab 3', key: '3' },\n          ]}\n          onChange={(key) => {\n            console.log(key);\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Tab, Icon } from '@alifd/meet';\n\nconst Demo = () => {\n  const [curActiveKey, setActiveKey] = useState();\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Scroll</Text>\n      <View className=\"demo-content demo-content--fullwidth\">\n        <Tab\n          defaultActiveKey={3}\n          activeKey={curActiveKey}\n          fullWidth={false}\n          dataSource={[\n            { title: 'Tab 1', key: 1 },\n            { title: 'Tab 2', key: 2 },\n            { title: 'Tab 3', key: 3 },\n            { title: 'Tab 4', key: 4 },\n            { title: 'Tab 5', key: 5 },\n            { title: 'Tab 6', key: 6 },\n            { title: 'Tab 7', key: 7 },\n            { title: 'Tab 8', key: 8 },\n            { title: 'Tab 9', key: 9 },\n            { title: 'Tab 10', key: 10 },\n            { title: 'Tab 11', key: 11 },\n            { title: 'Tab 12', key: 12 },\n          ]}\n          onChange={(v) => {\n            setActiveKey(v);\n          }}\n        />\n      </View>\n      <Text className=\"demo-title\">Custom Tool Icon</Text>\n      <View className=\"demo-content demo-content--fullwidth\">\n        <Tab\n          defaultActiveKey={3}\n          activeKey={curActiveKey}\n          fullWidth={false}\n          dataSource={[\n            { title: 'Tab 1', icon: 'account', key: 1 },\n            { title: 'Tab 2', icon: 'account', key: 2 },\n            { title: 'Tab 3', icon: 'account', key: 3 },\n            { title: 'Tab 4', icon: 'account', key: 4 },\n            { title: 'Tab 5', icon: 'account', key: 5 },\n            { title: 'Tab 6', icon: 'account', key: 6 },\n            { title: 'Tab 7', icon: 'account', key: 7 },\n            { title: 'Tab 8', icon: 'account', key: 8 },\n            { title: 'Tab 9', icon: 'account', key: 9 },\n            { title: 'Tab 10', icon: 'account', key: 10 },\n            { title: 'Tab 11', icon: 'account', key: 11 },\n            { title: 'Tab 12', icon: 'account', key: 12 },\n          ]}\n          renderTool={() => {\n            return <Icon name=\"add\" size=\"s\" />;\n          }}\n          onChange={(v) => {\n            setActiveKey(v);\n          }}\n        />\n      </View>\n\n      <Text className=\"demo-title\">no tool</Text>\n      <View className=\"demo-content demo-content--fullwidth\">\n        <Tab\n          defaultActiveKey={3}\n          activeKey={curActiveKey}\n          fullWidth={false}\n          dataSource={[\n            { title: 'Tab 1', key: 1 },\n            { title: 'Tab 2', key: 2 },\n            { title: 'Tab 3', key: 3 },\n            { title: 'Tab 4', key: 4 },\n            { title: 'Tab 5', key: 5 },\n            { title: 'Tab 6', key: 6 },\n            { title: 'Tab 7', key: 7 },\n            { title: 'Tab 8', key: 8 },\n            { title: 'Tab 9', key: 9 },\n            { title: 'Tab 10', key: 10 },\n            { title: 'Tab 11', key: 11 },\n            { title: 'Tab 12', key: 12 },\n          ]}\n          renderTool={() => {\n            return null;\n          }}\n          onChange={(v) => {\n            setActiveKey(v);\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Tab, Icon } from '@alifd/meet';\n\nconst dataSource = [\n  { title: 'Tab 1', key: 1 },\n  { title: 'Tab 2', key: 2 },\n  { title: 'Tab 3', key: 3 },\n  { title: 'Tab 4', key: 4 },\n  { title: 'Tab 5', key: 5 },\n  { title: 'Tab 6', key: 6 },\n  { title: 'Tab 7', key: 7 },\n  { title: 'Tab 8', key: 8 },\n  { title: 'Tab 9', key: 9 },\n  { title: 'Tab 10', key: 10 },\n  { title: 'Tab 11', key: 11 },\n  { title: 'Tab 12', key: 12 },\n];\nconst Demo = () => {\n  const [curActiveKey, setActiveKey] = useState();\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Scroll</Text>\n      <View className=\"demo-content demo-content--fullwidth\">\n        <Tab\n          defaultActiveKey={3}\n          activeKey={curActiveKey}\n          fullWidth={false}\n          onChange={(v) => {\n            //console.log(v);\n            setActiveKey(v);\n          }}\n        >\n          {dataSource.map((item) => {\n            return <Tab.Item className=\"tab-item\" icon=\"smile\" title={item.title} key={item.key} />;\n          })}\n        </Tab>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 4,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Tab, Icon } from '@alifd/meet';\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">custom children</Text>\n      <View className=\"demo-content demo-content--fullwidth\">\n        <Tab\n          defaultActiveKey={'2'}\n          onChange={(key) => {\n            console.log(key);\n          }}\n        >\n          <Tab.Item key=\"1\" title=\"Tab 1\" />\n          <Tab.Item key=\"2\" title={<Text style={{ color: 'red' }}>Tab 2</Text>} />\n          <Tab.Item key=\"3\" title=\"Tab 3\" />\n        </Tab>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 5,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Tab, Icon } from '@alifd/meet';\n\nconst data = [\n  { title: 'Tab 1', key: 1 },\n  { title: 'Tab 2', key: 2 },\n  { title: 'Tab 3', key: 3 },\n  { title: 'Tab 4', key: 4 },\n  { title: 'Tab 5', key: 5 },\n  { title: 'Tab 6', key: 6 },\n  { title: 'Tab 7', key: 7 },\n  { title: 'Tab 8', key: 8 },\n  { title: 'Tab 9', key: 9 },\n  { title: 'Tab 10', key: 10 },\n  { title: 'Tab 11', key: 11 },\n  { title: 'Tab 12', key: 12 },\n];\n\nconst Demo = () => {\n  const [curActiveKey, setActiveKey] = useState();\n\n  return (\n    <View>\n      <Text className=\"demo-title\">custom content</Text>\n      <View className=\"demo-content\">\n        <Tab defaultActiveKey={3} fullWidth={false} renderTool={() => null}>\n          {data.map((item) => {\n            return (\n              <Tab.Item title={item.title} key={item.key}>\n                {item.title}\n              </Tab.Item>\n            );\n          })}\n        </Tab>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Tag",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "标签",
    "importStatement": "import { Tag } from '@alifd/meet';",
    "body": "\n# Tag\n\n标签用于标记事物的属性和维度，或者可以使用标签来对一组事物分类。\n\n API\n\n### Props\n\n#### Tag\n\n| 名称     | 说明                                              | 类型        | 默认值   |\n| :------- | :------------------------------------------------ | :---------- | :------- |\n| type     | 类型 <br>可选值：<br> `normal`, `primary`         | enum        | `normal` |\n| size     | 大小 <br>可选值：<br> `large`, `medium` , `small` | enum        | `medium` |\n| disabled | 是否被禁用                                        | boolean     |          |\n| onClick  | 点击时回调                                        | (e) => void |          |\n\n#### Tag.Selectable\n\n| 名称     | 说明                                             | 类型        | 默认值   |\n| :------- | :----------------------------------------------- | :---------- | :------- |\n| type     | 类型 <br>可选值：<br> `normal`, `primary`        | enum        | `normal` |\n| size     | 大小 <br>可选值：<br> `large`, `medium`, `small` | enum        | `medium` |\n| disabled | 是否被禁用                                       | boolean     |          |\n| checked  | 是否被选择                                       | boolean     |          |\n| onChange | 选中状态变化时触发的事件                         | (e) => void |          |\n\n#### Tag.Closable\n\n| 名称       | 说明                                                                                             | 类型        | 默认值   |\n| :--------- | :----------------------------------------------------------------------------------------------- | :---------- | :------- |\n| type       | 类型 <br>可选值：<br> `normal`, `primary`                                                        | enum        | `normal` |\n| size       | 大小 <br>可选值：<br> `large`, `medium` , `small`                                                | enum        | `medium` |\n| closeArea  | 关闭区域 <br>可选值：<br> `tag`, `tail`                                                          | enum        | `tail`   |\n| disabled   | 是否被禁用                                                                                       | boolean     |          |\n| afterClose | 标签关闭后执行的回调                                                                             | (e) => void |          |\n| onClose    | 点击关闭按钮时的回调。<br><b>返回值</b> <br> {Boolean} true 则关闭, false 阻止关闭 true 为关闭。 | (e) => void |          |\n| onClick    | 点击时回调                                                                                       | (e) => void |          |\n\n### CSS Variables\n\n| 名称                                                               | 说明                                            | 默认值                                            |\n| :----------------------------------------------------------------- | :---------------------------------------------- | :------------------------------------------------ |\n| `--tag-small-font-size`                                            | `small` 尺寸按钮字体大小                        | `--p-body-1-font-size`                            |\n| `--tag-small-padding`                                              | `small` 尺寸按钮边距                            | `--box-small-padding`                             |\n| `--tag-small-spacing`                                              | `small` 尺寸按钮内部元素间隙                    | `--box-small-spacing`                             |\n| `--tag-small-border-width`                                         | `small` 尺寸按钮边框宽度                        | `--box-small-border-width`                        |\n| `--tag-small-corner`                                               | `small` 尺寸按钮圆角                            | `--box-small-border-radius`                       |\n| `--tag-medium-font-size`                                           | `medium` 尺寸按钮字体大小                       | `--p-body-2-font-size`                            |\n| `--tag-medium-padding`                                             | `medium` 尺寸按钮边距                           | `--box-medium-padding`                            |\n| `--tag-medium-spacing`                                             | `medium` 尺寸按钮内部元素间隙                   | `--box-medium-spacing`                            |\n| `--tag-medium-border-width`                                        | `medium` 尺寸按钮边框宽度                       | `--box-medium-border-width`                       |\n| `--tag-medium-corner`                                              | `medium` 尺寸按钮圆角                           | `--box-medium-border-radius`                      |\n| `--tag-large-font-size`                                            | `large` 尺寸按钮字体大小                        | `--p-subhead-font-size`                           |\n| `--tag-large-padding`                                              | `large` 尺寸按钮边距                            | `--box-large-padding`                             |\n| `--tag-large-spacing`                                              | `large` 尺寸按钮内部元素间隙                    | `--box-large-spacing`                             |\n| `--tag-large-border-width`                                         | `large` 尺寸按钮边框宽度                        | `--box-large-border-width`                        |\n| `--tag-large-corner`                                               | `large` 尺寸按钮圆角                            | `--box-large-border-radius`                       |\n| `--tag-normal-solid-border-color`                                  | `normal/solid` 态按钮边框颜色                   | `--box-normal-solid-border-color`                 |\n| `--tag-normal-solid-border-color-active`                           | `normal/solid` 态按钮边框颜色激活               | `--box-normal-solid-border-color-active`          |\n| `--tag-normal-solid-border-color-disabled`                         | `normal/solid` 态按钮边框颜色禁用               | `--box-normal-solid-border-color-disabled`        |\n| `--tag-normal-solid-background-color`                              | `normal/solid` 态按钮背景颜色                   | `--box-normal-solid-background-color`             |\n| `--tag-normal-solid-background-color-active`                       | `normal/solid` 态按钮背景颜色激活               | `--box-normal-solid-background-color-active`      |\n| `--tag-normal-solid-background-color-disabled`                     | `normal/solid` 态按钮背景颜色禁用               | `--box-normal-solid-background-color-disabled`    |\n| `--tag-normal-solid-font-color`                                    | `normal/solid` 态按钮字体颜色                   | `--box-normal-solid-text-color`                   |\n| `--tag-normal-solid-font-color-active`                             | `normal/solid` 态按钮字体颜色激活               | `--box-normal-solid-text-color-active`            |\n| `--tag-normal-solid-font-color-disabled`                           | `normal/solid` 态按钮字体颜色禁用               | `--box-normal-solid-text-color-disabled`          |\n| `--tag-normal-outline-border-color`                                | `normal/outline` 态按钮边框边框颜色             | `--box-normal-outline-border-color`               |\n| `--tag-normal-outline-border-color-active`                         | `normal/outline` 态按钮边框边框颜色激活         | `--box-normal-outline-border-color-active`        |\n| `--tag-normal-outline-border-color-disabled`                       | `normal/outline` 态按钮边框边框颜色禁用         | `--box-normal-outline-border-color-disabled`      |\n| `--tag-normal-outline-background-color`                            | `normal/outline` 态按钮边框背景颜色             | `--box-normal-outline-background-color`           |\n| `--tag-normal-outline-background-color-active`                     | `normal/outline` 态按钮边框背景颜色激活         | `--box-normal-outline-background-color-active`    |\n| `--tag-normal-outline-background-color-disabled`                   | `normal/outline` 态按钮边框背景颜色禁用         | `--box-normal-outline-background-color-disabled`  |\n| `--tag-normal-outline-font-color`                                  | `normal/outline` 态按钮边框字体颜色             | `--box-normal-outline-text-color`                 |\n| `--tag-normal-outline-font-color-active`                           | `normal/outline` 态按钮边框字体颜色激活         | `--box-normal-outline-text-color-active`          |\n| `--tag-normal-outline-font-color-disabled`                         | `normal/outline` 态按钮边框字体颜色禁用         | `--box-normal-outline-text-color-disabled`        |\n| `--tag-normal-text-border-color`                                   | `normal/text` 态按钮边框颜色                    | `--box-normal-text-border-color`                  |\n| `--tag-normal-text-border-color-active`                            | `normal/text` 态按钮边框颜色激活                | `--box-normal-text-border-color-active`           |\n| `--tag-normal-text-border-color-disabled`                          | `normal/text` 态按钮边框颜色禁用                | `--box-normal-text-border-color-disabled`         |\n| `--tag-normal-text-background-color`                               | `normal/text` 态按钮背景颜色                    | `--box-normal-text-background-color`              |\n| `--tag-normal-text-background-color-active`                        | `normal/text` 态按钮背景颜色激活                | `--box-normal-text-background-color-active`       |\n| `--tag-normal-text-background-color-disabled`                      | `normal/text` 态按钮背景颜色禁用                | `--box-normal-text-background-color-disabled`     |\n| `--tag-normal-text-font-color`                                     | `normal/text` 态按钮字体颜色                    | `--box-normal-text-text-color`                    |\n| `--tag-normal-text-font-color-active`                              | `normal/text` 态按钮字体颜色激活                | `--box-normal-text-text-color-active`             |\n| `--tag-normal-text-font-color-disabled`                            | `normal/text` 态按钮字体颜色禁用                | `--box-normal-text-text-color-disabled`           |\n| `--tag-primary-solid-border-color`                                 | `primary/solid` 态按钮边框颜色                  | `--box-primary-solid-border-color`                |\n| `--tag-primary-solid-border-color-active`                          | `primary/solid` 态按钮边框颜色激活              | `--box-primary-solid-border-color-active`         |\n| `--tag-primary-solid-border-color-disabled`                        | `primary/solid` 态按钮边框颜色禁用              | `--box-primary-solid-border-color-disabled`       |\n| `--tag-primary-solid-background-color`                             | `primary/solid` 态按钮背景颜色                  | `--box-primary-solid-background-color`            |\n| `--tag-primary-solid-background-color-active`                      | `primary/solid` 态按钮背景颜色激活              | `--box-primary-solid-background-color-active`     |\n| `--tag-primary-solid-background-color-disabled`                    | `primary/solid` 态按钮背景颜色禁用              | `--box-primary-solid-background-color-disabled`   |\n| `--tag-primary-solid-font-color`                                   | `primary/solid` 态按钮字体颜色                  | `--box-primary-solid-text-color`                  |\n| `--tag-primary-solid-font-color-active`                            | `primary/solid` 态按钮字体颜色激活              | `--box-primary-solid-text-color-active`           |\n| `--tag-primary-solid-font-color-disabled`                          | `primary/solid` 态按钮字体颜色禁用              | `--box-primary-solid-text-color-disabled`         |\n| `--tag-primary-outline-border-color`                               | `primary/outline` 态按钮边框颜色                | `--box-primary-outline-border-color`              |\n| `--tag-primary-outline-border-color-active`                        | `primary/outline` 态按钮边框颜色激活            | `--box-primary-outline-border-color-active`       |\n| `--tag-primary-outline-border-color-disabled`                      | `primary/outline` 态按钮边框颜色禁用            | `--box-primary-outline-border-color-disabled`     |\n| `--tag-primary-outline-background-color`                           | `primary/outline` 态按钮背景颜色                | `--box-primary-outline-background-color`          |\n| `--tag-primary-outline-background-color-active`                    | `primary/outline` 态按钮背景颜色激活            | `--box-primary-outline-background-color-active`   |\n| `--tag-primary-outline-background-color-disabled`                  | `primary/outline` 态按钮背景颜色禁用            | `--box-primary-outline-background-color-disabled` |\n| `--tag-primary-outline-font-color`                                 | `primary/outline` 态按钮字体颜色                | `--box-primary-outline-text-color`                |\n| `--tag-primary-outline-font-color-active`                          | `primary/outline` 态按钮字体颜色激活            | `--box-primary-outline-text-color-active`         |\n| `--tag-primary-outline-font-color-disabled`                        | `primary/outline` 态按钮字体颜色禁用            | `--box-primary-outline-text-color-disabled`       |\n| `--tag-primary-text-border-color`                                  | `primary/text` 态按钮边框颜色                   | `--box-primary-text-border-color`                 |\n| `--tag-primary-text-border-color-active`                           | `primary/text` 态按钮边框颜色激活               | `--box-primary-text-border-color-active`          |\n| `--tag-primary-text-border-color-disabled`                         | `primary/text` 态按钮边框颜色禁用               | `--box-primary-text-border-color-disabled`        |\n| `--tag-primary-text-background-color`                              | `primary/text` 态按钮背景颜色                   | `--box-primary-text-background-color`             |\n| `--tag-primary-text-background-color-active`                       | `primary/text` 态按钮背景颜色激活               | `--box-primary-text-background-color-active`      |\n| `--tag-primary-text-background-color-disabled`                     | `primary/text` 态按钮背景颜色禁用               | `--box-primary-text-background-color-disabled`    |\n| `--tag-primary-text-font-color`                                    | `primary/text` 态按钮字体颜色                   | `--box-primary-text-text-color`                   |\n| `--tag-primary-text-font-color-active`                             | `primary/text` 态按钮字体颜色激活               | `--box-primary-text-text-color-active`            |\n| `--tag-primary-text-font-color-disabled`                           | `primary/text` 态按钮字体颜色禁用               | `--box-primary-text-text-color-disabled`          |\n| `--tag-selectable-solid-border-color`                              | `selectable/solid` 态选择标签边框颜色           | `transparent`                                     |\n| `--tag-selectable-solid-border-color-active`                       | `selectable/solid` 态选择标签边框激活           | `transparent`                                     |\n| `--tag-selectable-solid-border-color-disabled`                     | `selectable/solid` 态选择标签边框禁用           | `transparent`                                     |\n| `--tag-selectable-solid-border-color-selected`                     | `selectable/solid` 态选择标签边框选中           | `transparent`                                     |\n| `--tag-selectable-solid-border-color-selected-disabled`            | `selectable/solid` 态选择标签边框选中禁用       | `transparent`                                     |\n| `--tag-selectable-solid-background-color`                          | `selectable/solid` 态选择标签背景色             | `--color-fill1-2`                                 |\n| `--tag-selectable-solid-background-color-active`                   | `selectable/solid` 态选择标签背景色激活         | `--color-fill1-3`                                 |\n| `--tag-selectable-solid-background-color-disabled`                 | `selectable/solid` 态选择标签背景色禁用         | `--color-fill1-1`                                 |\n| `--tag-selectable-solid-background-color-selected`                 | `selectable/solid` 态选择标签背景色选中         | `--color-brand-3`                                 |\n| `--tag-selectable-solid-background-color-selected-disabled`        | `selectable/solid` 态选择标签背景色选中禁用     | `--color-brand-1`                                 |\n| `--tag-selectable-solid-font-color`                                | `selectable/solid` 态选择标签字体               | `--color-text1-4`                                 |\n| `--tag-selectable-solid-font-color-active`                         | `selectable/solid` 态选择标签字体激活           | `--color-text1-3`                                 |\n| `--tag-selectable-solid-font-color-disabled`                       | `selectable/solid` 态选择标签字体禁用           | `--color-text1-1`                                 |\n| `--tag-selectable-solid-font-color-selected`                       | `selectable/solid` 态选择标签字体选中           | `--color-white`                                   |\n| `--tag-selectable-solid-font-color-selected-disabled`              | `selectable/solid` 态选择标签字体选中禁用       | `--color-white`                                   |\n| `--tag-selectable-outline-border-color`                            | `selectable/outline` 态选择标签边框颜色         | `--color-line1-4`                                 |\n| `--tag-selectable-outline-border-color-active`                     | `selectable/outline` 态选择标签边框激活         | `--color-line1-3`                                 |\n| `--tag-selectable-outline-border-color-disabled`                   | `selectable/outline` 态选择标签边框禁用         | `--color-line1-1`                                 |\n| `--tag-selectable-outline-border-color-selected`                   | `selectable/outline` 态选择标签边框选中         | `--color-brand-3`                                 |\n| `--tag-selectable-outline-border-color-selected-disabled`          | `selectable/outline` 态选择标签边框选中禁用     | `--color-brand-1`                                 |\n| `--tag-selectable-outline-background-color`                        | `selectable/outline` 态选择标签背景色           | `transparent`                                     |\n| `--tag-selectable-outline-background-color-active`                 | `selectable/outline` 态选择标签背景色激活       | `transparent`                                     |\n| `--tag-selectable-outline-background-color-disabled`               | `selectable/outline` 态选择标签背景色禁用       | `transparent`                                     |\n| `--tag-selectable-outline-background-color-selected`               | `selectable/outline` 态选择标签背景色选中       | `transparent`                                     |\n| `--tag-selectable-outline-background-color-selected-disabled`      | `selectable/outline` 态选择标签背景色选中禁用   | `transparent`                                     |\n| `--tag-selectable-outline-font-color`                              | `selectable/outline` 态选择标签字体             | `--color-text1-4`                                 |\n| `--tag-selectable-outline-font-color-active`                       | `selectable/outline` 态选择标签字体激活         | `--color-text1-3`                                 |\n| `--tag-selectable-outline-font-color-disabled`                     | `selectable/outline` 态选择标签字体禁用         | `--color-text1-1`                                 |\n| `--tag-selectable-outline-font-color-selected`                     | `selectable/outline` 态选择标签字体选中         | `--color-brand-3`                                 |\n| `--tag-selectable-outline-font-color-selected-disabled`            | `selectable/outline` 态选择标签字体选中禁用     | `--color-brand-1`                                 |\n| `--tag-selectable-outline-icon-background-color`                   | `selectable/outline` 态勾选图标颜色             | `--color-brand-3`                                 |\n| `--tag-selectable-outline-icon-background-color-active`            | `selectable/outline` 态勾选图标颜色激活         | `--color-brand-4`                                 |\n| `--tag-selectable-outline-icon-background-color-disabled`          | `selectable/outline` 态勾选图标颜色禁用         | `--color-brand-1`                                 |\n| `--tag-selectable-outline-icon-background-color-selected`          | `selectable/outline` 态勾选图标颜色选择         | `--color-brand-1`                                 |\n| `--tag-selectable-outline-icon-background-color-selected-disabled` | `selectable/outline` 态勾选图标颜色选择禁用     | `--color-brand-1`                                 |\n| `--tag-icon-selectable-outline-large-font-size`                    | `selectable/outline` 态勾选图标大号字体         | `--s-5`                                           |\n| `--tag-icon-selectable-outline-medium-font-size`                   | `selectable/outline` 态勾选图标常规字体         | `--s-4`                                           |\n| `--tag-icon-selectable-outline-small-font-size`                    | `selectable/outline` 态勾选图标小号字体         | `--s-2`                                           |\n| `--tag-icon-selectable-outline-large-right`                        | `selectable/outline` 态勾选图标大号背景右侧距离 | `--s-5`                                           |\n| `--tag-icon-selectable-outline-medium-right`                       | `selectable/outline` 态勾选图标正常背景右侧距离 | `--s-4`                                           |\n| `--tag-icon-selectable-outline-small-right`                        | `selectable/outline` 态勾选图标小号背景右侧距离 | `--s-3`                                           |\n| `--tag-icon-selectable-outline-large-bottom`                       | `selectable/outline` 态勾选图标大号背景底部距离 | `--s-5`                                           |\n| `--tag-icon-selectable-outline-medium-bottom`                      | `selectable/outline` 态勾选图标小号背景底部距离 | `--s-4`                                           |\n| `--tag-icon-selectable-outline-small-bottom`                       | `selectable/outline` 态勾选图标小号背景底部距离 | `--s-3`                                           |\n| `--tag-icon-selectable-outline-large-width`                        | `selectable/outline` 态勾选图标大号宽度         | `--s-10`                                          |\n| `--tag-icon-selectable-outline-medium-width`                       | `selectable/outline` 态勾选图标小号宽度         | `--s-8`                                           |\n| `--tag-icon-selectable-outline-small-width`                        | `selectable/outline` 态勾选图标小号宽度         | `--s-6`                                           |\n| `--tag-icon-selectable-outline-large-height`                       | `selectable/outline` 态勾选图标大号高度         | `--s-10`                                          |\n| `--tag-icon-selectable-outline-medium-height`                      | `selectable/outline` 态勾选图标小号高度         | `--s-8`                                           |\n| `--tag-icon-selectable-outline-small-height`                       | `selectable/outline` 态勾选图标小号高度         | `--s-6`                                           |\n| `--tag-selectable-outline-border-color`                            | `selectable/outline` 态选择标签边框颜色         | `--color-line1-4`                                 |\n| `--tag-selectable-outline-border-color-active`                     | `selectable/outline` 态选择标签边框激活         | `--color-line1-3`                                 |\n| `--tag-selectable-outline-border-color-disabled`                   | `selectable/outline` 态选择标签边框禁用         | `--color-line1-1`                                 |\n| `--tag-selectable-outline-border-color-selected`                   | `selectable/outline` 态选择标签边框选中         | `--color-brand-3`                                 |\n| `--tag-selectable-outline-border-color-selected-disabled`          | `selectable/outline` 态选择标签边框选中禁用     | `--color-brand-1`                                 |\n| `--tag-closable-solid-border-color-active`                         | `closable/outline` 态关闭标签边框激活           | `transparent`                                     |\n| `--tag-closable-solid-border-color-disabled`                       | `closable/outline` 态关闭标签边框禁用           | `transparent`                                     |\n| `--tag-closable-solid-background-color`                            | `closable/outline` 态关闭标签背景色             | `--color-fill1-2`                                 |\n| `--tag-closable-solid-background-color-active`                     | `closable/outline` 态关闭标签背景色激活         | `--color-fill1-4`                                 |\n| `--tag-closable-solid-background-color-disabled`                   | `closable/outline` 态关闭标签背景色禁用         | `--color-line1-1`                                 |\n| `--tag-closable-solid-font-color`                                  | `closable/outline` 态关闭标签字体               | `--color-text1-4`                                 |\n| `--tag-closable-solid-font-color-active`                           | `closable/outline` 态关闭标签字体激活           | `--color-text1-2`                                 |\n| `--tag-closable-solid-font-color-disabled`                         | `closable/outline` 态关闭标签字体禁用           | `--color-text1-1`                                 |\n| `--tag-closable-solid-icon-color`                                  | `closable/outline` 态关闭标签图标               | `--color-text1-4`                                 |\n| `--tag-closable-solid-icon-color-active`                           | `closable/outline` 态关闭标签图标激活           | `--color-text1-2`                                 |\n| `--tag-closable-solid-icon-color-disabled`                         | `closable/outline` 态关闭标签图标禁用           | `--color-text1-1`                                 |\n| `--tag-closable-outline-border-color`                              | `closable/outline` 态关闭边框颜色               | `--color-line1-4`                                 |\n| `--tag-closable-outline-border-color-active`                       | `closable/outline` 态关闭边框颜色激活           | `--color-line1-3`                                 |\n| `--tag-closable-outline-border-color-disabled`                     | `closable/outline` 态关闭边框颜色禁用           | `--color-line1-1`                                 |\n| `--tag-closable-outline-text-color`                                | `closable/outline` 态关闭标签文字               | `--color-text1-4`                                 |\n| `--tag-closable-outline-text-color-disabled`                       | `closable/outline` 态关闭标签文字禁用           | `--color-text1-1`                                 |\n| `--tag-closable-outline-background-color`                          | `closable/outline` 态关闭标签背景色             | `transparent`                                     |\n| `--tag-closable-outline-background-color-disabled`                 | `closable/outline` 态关闭标签背景色禁用         | `transparent`                                     |\n| `--box-closable-outline-icon-color`                                | `closable/outline` 态关闭标签图标颜色           | `--color-text1-4`                                 |\n| `--box-closable-outline-icon-color-active`                         | `closable/outline` 态关闭标签图标颜色激活       | `--color-text1-2`                                 |\n| `--box-closable-outline-icon-color-disabled`                       | `closable/outline` 态关闭标签图标颜色禁用       | `--color-text1-1`                                 |\n| `--tag-icon-closable-large-font-size`                              | `closable/outline` 态关闭标签大号字体           | `--s-2`                                           |\n| `--tag-icon-closable-medium-font-size`                             | `closable/outline` 态关闭标签正常字体           | `--s-2`                                           |\n| `--tag-icon-closable-small-font-size`                              | `closable/outline` 态关闭标签小号字体           | `--s-2`                                           |\n| `--tag-icon-closable-large-margin-left`                            | `closable/outline` 态关闭标签大号左侧距离       | `--s-2`                                           |\n| `--tag-icon-closable-medium-margin-left`                           | `closable/outline` 态关闭标签正常左侧距离       | `--s-1`                                           |\n| `--tag-icon-closable-small-margin-left`                            | `closable/outline` 态关闭标签小号左侧距离       | `--s-1`                                           |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Tag } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst { Selectable, Closable } = Tag;\n\nconst Demo = () => {\n  let [hasChecked, setChecked] = useState(false);\n  const handleClick = () => {\n    console.log('click');\n  };\n\n  const handleDelete = (e) => {\n    console.log('delete');\n  };\n\n  const handleSelect = (isChecked, e) => {\n    console.log('select', isChecked, e);\n    setChecked(isChecked);\n  };\n\n  const handleDeleteOnClick = () => {\n    console.log('delete-click');\n  };\n\n  const handleDeleteAfterClose = () => {\n    console.log('afterClose');\n  };\n\n  const handleDeleteOnClose = () => {\n    return true;\n  };\n\n  const handleDeleteOnCloseFalse = () => {\n    return false;\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">basic</Text>\n      <View className=\"demo-content\">\n        <View className=\"tag-row\">\n          <View className=\"demo-item-name\">Enabled</View>\n          <Tag size=\"large\" type=\"normal\" onClick={handleClick}>\n            Large\n          </Tag>\n          <Tag size=\"medium\" type=\"normal\" onClick={handleClick}>\n            Tag\n          </Tag>\n          <Tag size=\"small\" type=\"normal\" onClick={handleClick}>\n            Small\n          </Tag>\n        </View>\n        <View className=\"tag-row\">\n          <View className=\"demo-item-name\">Disabled</View>\n          <Tag size=\"large\" type=\"normal\" disabled onClick={handleClick}>\n            Large\n          </Tag>\n          <Tag size=\"medium\" type=\"normal\" disabled onClick={handleClick}>\n            Tag\n          </Tag>\n          <Tag size=\"small\" type=\"normal\" disabled onClick={handleClick}>\n            Small\n          </Tag>\n        </View>\n      </View>\n      <Text className=\"demo-title\">Primary</Text>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Enabled</View>\n        <Tag size=\"large\" type=\"primary\" onClick={handleClick}>\n          Large\n        </Tag>\n        <Tag size=\"medium\" type=\"primary\" onClick={handleClick}>\n          Medium\n        </Tag>\n        <Tag size=\"small\" type=\"primary\" onClick={handleClick}>\n          Small\n        </Tag>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Tag size=\"large\" type=\"primary\" disabled onClick={handleClick}>\n          Large\n        </Tag>\n        <Tag size=\"medium\" type=\"primary\" disabled onClick={handleClick}>\n          Medium\n        </Tag>\n        <Tag size=\"small\" type=\"primary\" disabled onClick={handleClick}>\n          Small\n        </Tag>\n      </View>\n      <Text className=\"demo-title\">Selectable - normal</Text>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Enabled</View>\n        <Selectable size=\"large\" type=\"normal\" onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable size=\"medium\" type=\"normal\" onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable size=\"small\" type=\"normal\" onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Selectable size=\"large\" disabled onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable size=\"medium\" disabled onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable size=\"small\" disabled onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Selected</View>\n        <Selectable size=\"large\" checked onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable size=\"medium\" checked onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable size=\"small\" checked onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Selectable size=\"large\" disabled checked onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable size=\"medium\" disabled checked onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable size=\"small\" disabled checked onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <Text className=\"demo-title\">Selectable - primary</Text>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Enabled</View>\n        <Selectable type=\"primary\" size=\"large\" onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable type=\"primary\" size=\"medium\" onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable type=\"primary\" size=\"small\" onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Selectable type=\"primary\" size=\"large\" disabled onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable type=\"primary\" size=\"medium\" disabled onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable type=\"primary\" size=\"small\" disabled onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Selected</View>\n        <Selectable type=\"primary\" size=\"large\" checked onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable type=\"primary\" size=\"medium\" checked onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable type=\"primary\" size=\"small\" checked onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Selectable type=\"primary\" size=\"large\" disabled checked onChange={handleSelect}>\n          Large\n        </Selectable>\n        <Selectable type=\"primary\" size=\"medium\" disabled checked onChange={handleSelect}>\n          Medium\n        </Selectable>\n        <Selectable type=\"primary\" size=\"small\" disabled checked onChange={handleSelect}>\n          Small\n        </Selectable>\n      </View>\n      <Text className=\"demo-title\">Closable - normal</Text>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Enabled</View>\n        <Closable onDelete={handleDelete} onClick={handleClick} size=\"large\" type=\"normal\">\n          大\n        </Closable>\n        <Closable onDelete={handleDelete} onClick={handleClick} size=\"medium\" type=\"normal\">\n          中\n        </Closable>\n        <Closable onDelete={handleDelete} onClick={handleClick} size=\"small\" type=\"normal\">\n          小\n        </Closable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Closable size=\"large\" onDelete={handleDelete} onClick={handleClick} disabled>\n          大\n        </Closable>\n        <Closable size=\"medium\" onDelete={handleDelete} onClick={handleClick} disabled>\n          中\n        </Closable>\n        <Closable size=\"small\" onDelete={handleDelete} onClick={handleClick} disabled>\n          小\n        </Closable>\n      </View>\n      <Text className=\"demo-title\">Closable - primary</Text>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Enabled</View>\n        <Closable type=\"primary\" onDelete={handleDelete} onClick={handleDeleteOnClick} size=\"large\" closeArea=\"tag\">\n          大\n        </Closable>\n        <Closable\n          type=\"primary\"\n          onDelete={handleDelete}\n          afterClose={handleDeleteAfterClose}\n          onClose={handleDeleteOnCloseFalse}\n          size=\"medium\"\n        >\n          中\n        </Closable>\n        <Closable type=\"primary\" onDelete={handleDelete} onClose={handleDeleteOnClose} size=\"small\">\n          小\n        </Closable>\n      </View>\n      <View className=\"tag-row\">\n        <View className=\"demo-item-name\">Disabled</View>\n        <Closable type=\"primary\" size=\"large\" onDelete={handleDelete} onClick={handleClick} disabled>\n          大\n        </Closable>\n        <Closable type=\"primary\" size=\"medium\" onDelete={handleDelete} onClick={handleClick} disabled>\n          中\n        </Closable>\n        <Closable type=\"primary\" size=\"small\" onDelete={handleDelete} onClick={handleClick} disabled>\n          小\n        </Closable>\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "TimePicker",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "时间选择",
    "importStatement": "import { TimePicker } from '@alifd/meet';",
    "body": "\n# TimePicker\n\n用于选择日期或者时间\n\n API\n\n### Props\n\n类型 AvailableDate 表示以下任意一种：Date / string / dayjs.Dayjs / number。\n\n| 属性名          | 含义                             | 类型                       | 默认值  |\n| --------------- | -------------------------------- | -------------------------- | ------- |\n| value           | 时间值（受限）                   | AvailableDate              |         |\n| defaultValue    | 时间初值（非受限）               | AvailableDate              |         |\n| hourStep        | 小时选项步长                     | Number                     | 1       |\n| minuteStep      | 分钟选项步长                     | Number                     | 1       |\n| secondStep      | 秒钟选项步长                     | Number                     | 1       |\n| format          | 时间的格式，会同时影响选择器功能 | String                     | `HH:mm` |\n| disabledHours   | 禁用小时函数                     | (index: number) => boolean |         |\n| disabledMinutes | 禁用分钟函数                     | (index: number) => boolean |         |\n| disabledSeconds | 禁用秒函数                       | (index: number) => boolean |         |\n| iconType        | 右侧选择按钮图标名称             | String                     |         |\n| placeholder     | 输入提示                         | String                     |         |\n| disabled        | 禁用                             | Boolean                    | false   |\n| readOnly        | 只读                             | Boolean                    | false   |\n| hasClear        | 是否展示清除按钮                 | Boolean                    | false   |\n| onClear         | 点击清楚按钮回调                 | ()=>void                   |         |\n| onChange        | 时间值改变时的回调               | Function                   |         |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { TimePicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst meetingHours = (n) => n < 8 || n > 22;\nconst disabledMinutes = (n) => n < 10 || n > 20;\nconst maxDate = new Date(2000, 1, 1, 13, 33, 30);\nconst minDate = new Date(2000, 1, 1, 10, 33, 50);\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">Time Picker</Text>\n      <View className=\"demo-content\">\n        <TimePicker placeholder=\"选择时、分\" format=\"HH:mm\" />\n        <TimePicker placeholder=\"选择分、秒\" format=\"mm:ss\" />\n        <TimePicker placeholder=\"选择时、分、秒\" format=\"HH:mm:ss\" />\n        <TimePicker placeholder=\"选择上/下午、时、分\" format=\"A hh:mm\" />\n      </View>\n      <Text className=\"demo-title\">自定义Step</Text>\n      <View className=\"demo-content\">\n        <TimePicker placeholder=\"选择时、分\" format=\"HH:mm\" hourStep={2} minuteStep={15} />\n        <TimePicker placeholder=\"选择时、分\" format=\"hh:mm\" hourStep={2} minuteStep={15} />\n      </View>\n      <Text className=\"demo-title\">禁用选项</Text>\n      <View className=\"demo-content\">\n        <TimePicker placeholder=\"仅可选择10:33:50-13:33:30\" format=\"HH:mm:ss\" validRange={[minDate, maxDate]} />\n        <TimePicker placeholder=\"仅可选择8:00-21:59\" format=\"HH:mm\" disabledHours={meetingHours} />\n        <TimePicker placeholder=\"仅可选择10-20分钟\" format=\"HH:mm\" disabledMinutes={disabledMinutes} />\n      </View>\n      <Text className=\"demo-title\">其他状态</Text>\n      <View className=\"demo-content\">\n        <TimePicker value={new Date()} format=\"禁用 HH:mm\" disabled />\n        <TimePicker value={new Date()} format=\"只读 HH:mm\" readOnly />\n      </View>\n      <Text className=\"demo-title\">使用时间戳</Text>\n      <View className=\"demo-content\">\n        <TimePicker defaultValue={new Date().getTime()} onChange={(d) => console.log(d)} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 2,
        "jsx": "import { createElement, useState, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { Button, TimePicker } from '@alifd/meet';\nimport Text from 'rax-text';\nimport View from 'rax-view';\n\n\nconst { EmbedPicker } = TimePicker;\n\nconst Demo = () => {\n  return (\n    <View>\n      <Text className=\"demo-title\">时、分、秒</Text>\n      <View className=\"demo-content\">\n        <EmbedPicker format=\"H:m:s\" onChange={(d) => console.log(d)} />\n      </View>\n      <Text className=\"demo-title\">上午/下午</Text>\n      <View className=\"demo-content\">\n        <EmbedPicker format=\"h:mm\" onChange={(d) => console.log(d)} />\n      </View>\n      <Text className=\"demo-title\">结合hourStep</Text>\n      <View className=\"demo-content\">\n        <EmbedPicker hourStep={3} onChange={(d) => console.log(d)} />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      },
      {
        "order": 3,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport { TimePicker } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst meetingHours = (n) => n < 8 || n > 22;\nconst disabledMinutes = (n) => n < 10 || n > 20;\n\nconst Demo = () => {\n  const [date, setDate] = useState(new Date());\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Time Picker</Text>\n      <View className=\"demo-content\">\n        <TimePicker\n          hasClear\n          placeholder=\"选择时、分\"\n          format=\"HH:mm\"\n          hasClear\n          onClear={() => {\n            console.log('onClear');\n          }}\n        />\n\n        <TimePicker\n          hasClear\n          value={date}\n          placeholder=\"选择时、分\"\n          format=\"HH:mm\"\n          hasClear\n          onClear={() => {\n            console.log('onClear');\n          }}\n          onChange={(d) => {\n            setDate(d);\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Transfer",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "穿梭框",
    "importStatement": "import { Transfer } from '@alifd/meet';",
    "body": "\n# Transfer\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n API\n\n### Props\n\n| **属性名**          | **含义**                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | **类型**           | **默认值**    |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ | ------------- |\n| dataSource          | 数据源                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | `Array<Object>`    | []            |\n| value               | （用于受控）当前值                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | `Array<String>`    | -             |\n| defaultValue        | （用于非受控）初始值                                                                                                                                                                                                                                                                                                                                                                                                                                                                | `Array<String>`    | []            |\n| onClick             | 点击回调                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Function           | func.noop     |\n| disabled            | 是否禁用                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Boolean            | false         |\n| leftDisabled        | 是否禁用左侧面板                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Boolean            | false         |\n| rightDisabled       | 是否禁用右侧面板                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | Boolean            | false         |\n| titles              | 左右面板标题                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | `Array<ReactNode>` | []            |\n| notFoundContent     | 列表为空显示内容                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | ReactNode          | 'Not Found'   |\n| defaultLeftChecked  | 左面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `Array<String>`    | []            |\n| defaultRightChecked | 右面板默认选中值                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `Array<String>`    | []            |\n| buttonText          | 按钮文案                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | String             | 'Transfer to' |\n| selectItemText      | 全选择项文案                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | String             | 'Item'        |\n| tabChange           | tab 改版时出发回调函数<br />值发生改变的时候触发的回调函数<br />Function( e:object, item:Array, index:number) => void                                                                                                                                                                                                                                                                                                                                                               | Function           | tabChange     |\n| onChange            | 值发生改变的时候触发的回调函数<br /><br />**签名**:<br />Function(value: Array, data: Array, extra: Object) => void<br />**参数**:<br />_value_: {Array} 右面板值<br />_data_: {Array} 右面板数据<br />_extra_: {Object} 额外参数<br />_extra.leftValue_: {Array} 左面板值<br />_extra.leftData_: {Array} 左面板数据<br />_extra.movedValue_: {Array} 发生移动的值<br />_extra.movedData_: {Object} 发生移动的数据<br />_extra.direction_: {String} 移动的方向，值为'left'或'right' | Function           | onChange      |\n\n### CSS Variables\n\n| 名称                                            | 说明                       | 默认值                |\n| :---------------------------------------------- | :------------------------- | :-------------------- |\n| `--transfer-padding`                            | 整体内边距                 | `20rpx`               |\n| `--transfer-tab-icon-wrap-z-index`              | tab 图标层级               | `100`                 |\n| `--transfer-tab-icon-wrap-height`               | tab 图标高度               | `--s-6`               |\n| `--transfer-tab-icon-wrap-width`                | tab 图标宽度               | `--s-6`               |\n| `--transfer-tab-icon-wrap-border-width`         | tab 图标边框宽度           | `--line-1`            |\n| `--transfer-tab-icon-wrap-border-style`         | tab 图标边框样式           | `--line-solid`        |\n| `--transfer-tab-icon-wrap-border-color`         | tab 图标边框颜色           | `--color-line1-4`     |\n| `--transfer-tab-icon-wrap-corner`               | tab 图标圆角               | `--s-5`               |\n| `--transfer-tab-icon-wrap-background`           | tab 图标背景色             | `--color-white`       |\n| `--transfer-tab-icon-wrap-icon-font-size`       | tab 图标字体大小           | `28rpx`               |\n| `--transfer-tab-icon-wrap-icon-color`           | tab 图标颜色               | `--color-text1-2`     |\n| `--transfer-tab-item-height`                    | tab 项高度                 | `--s-9`               |\n| `--transfer-tab-item-line-height`               | tab 项行高                 | `--s-9`               |\n| `--transfer-tab-item-font-size`                 | tab 项字体                 | `--s-4`               |\n| `--transfer-tab-item-color`                     | tab 颜色                   | `--color-text1-4`     |\n| `--transfer-tab-item-border-width`              | tab 项边框宽度             | `--line-1`            |\n| `--transfer-tab-item-border-color`              | tab 项边框颜色             | `--color-line1-4`     |\n| `--transfer-tab-item-corner`                    | tab 项边框圆角             | `10rpx`               |\n| `--transfer-tab-item--selected-color`           | tab 项选中颜色             | `: --color-brand-3`   |\n| `--transfer-tab-item--selected-border-color`    | tab 项边框颜色             | `--color-brand-3`     |\n| `--transfer-tab-after-top`                      | tab 项最后子项具体顶部高度 | `--s-zero`            |\n| `--transfer-tab-after-width`                    | tab 项最后子项宽度         | `--line-1`            |\n| `--transfer-tab-after-background-color`         | tab 项最后子项背景色       | `--color-brand-3`     |\n| `--transfer-list-border-color`                  | 列表项边框颜色             | `--color-line1-4`     |\n| `--transfer-list-border-style`                  | 列表项边框样式             | `--line-solid`        |\n| `--transfer-list-border-width`                  | 列表项边框宽度             | `--line-1`            |\n| `--transfer-list-corner`                        | 列表项边框圆角             | `10rpx`               |\n| `--transfer-list-padding-left`                  | 列表项距离左侧             | `20rpx`               |\n| `--transfer-list-margin-top`                    | 列表项距离顶部             | `--s-5`               |\n| `--transfer-list-scroll-height`                 | 列表项滚动高度             | `:60vh`               |\n| `--transfer-list--selected-padding-bottom:`     | 列表项选中距离底部         | `112rpx`              |\n| `--transfer-list--selected-height`              | 列表项选中高度             | `:112rpx`             |\n| `--transfer-list-padding-right`                 | 列表项距离右侧             | `--s-zero`            |\n| `--transfer-list--selected-border-bottom-color` | 列表项选中边框颜色         | `--color-line1-4`     |\n| `--transfer-list--selected-border-bottom-style` | 列表项选中边框样式         | `--line-solid`        |\n| `--transfer-list--selected-border-bottom-width` | 列表项选中边框宽度         | `--line-1`            |\n| `--transfer-select-tip-left`                    | 选中提示项距离左侧         | `--s-zero`            |\n| `--transfer-select-tip-bottom`                  | 选中提示项距离底部         | `--s-zero`            |\n| `--transfer-select-tip-background-color`        | 选中提示项背景颜色         | `--color-white`       |\n| `--transfer-select-tip-height`                  | 选中提示项高度             | `114rpx`              |\n| `--transfer-select-tip-padding-left`            | 选中提示项 距离左侧        | `20rpx`               |\n| `--transfer-select-tip-z-index`                 | 选中提示项层级             | `100`                 |\n| `--transfer-select-tip-after-height`            | 选中提示项 高度            | `--line-1`            |\n| `--transfer-select-tip-after-background`        | 选中提示项背景色           | `var(--color-line1-4` |\n| `--transfer-select-tip-after-left`              | 选中提示项距离左侧         | `var(--s-zero`        |\n| `--transfer-select-tip-after-right`             | 选中提示项距离右侧         | `20rpx`               |\n| `--transfer-select-tip-after-top`               | 选中提示项具体顶部         | `--s-zero`            |\n| `--transfer--button-margin-top`                 | 按钮距离顶部               | `--s-5`               |\n| `--transfer-empty-content-margin-top`           | 内容为空 距离顶部          | `112rpx`              |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState } from 'rax';\nimport DU from 'driver-universal';\nimport { Transfer, Tag } from '@alifd/meet';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\n\nconst dataList = [];\nfor (let i = 0; i <= 8; i++) {\n  dataList.push({\n    label: `options${i + 1}`,\n    value: i,\n    disabled: i % 2 === 0,\n  });\n}\nconst titles = ['Simple Mode1', 'Simple Mode2'];\n\nconst valueData = ['2'];\n\nconst Demo = () => {\n  const [valueInfo, setValueInfo] = useState(valueData);\n  const changeValues = (item) => {\n    setValueInfo(['1']);\n  };\n\n  const changeInfo = (rightValue, rightList, extra) => {\n    console.log(rightValue, rightList, extra);\n  };\n\n  const tabChangeInfo = (e, item, index) => {\n    console.log(e, item, index);\n  };\n\n  return (\n    <View>\n      <Text className=\"demo-title\">Transfer</Text>\n      <Transfer\n        dataSource={dataList}\n        titles={titles}\n        value={valueInfo}\n        tabChange={tabChangeInfo}\n        defaultLeftChecked={['1']}\n        onChange={changeInfo}\n      />\n    </View>\n  );\n};\n\nrender(<Demo />, null, { driver: DU });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Typography",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "排版",
    "importStatement": "import { Typography } from '@alifd/meet';",
    "body": "\n# Typography\n\n基本格式的文本\n\n API\n\n### Typography.H1\n\n1 级标题文本样式\n\n### Typography.H2\n\n2 级标题文本样式\n\n### Typography.H3\n\n3 级标题文本样式\n\n### Typography.H4\n\n4 级标题文本样式\n\n### Typography.H5\n\n4 级标题文本样式\n\n### Typography.H6\n\n6 级标题文本样式\n\n### Typography.Text\n\n#### Props\n\n| 名称      | 说明           | 类型    | 默认值 |\n| :-------- | :------------- | :------ | :----- |\n| mark      | 添加标记样式   | boolean | false  |\n| delete    | 添加删除线样式 | boolean | false  |\n| underline | 添加下划线样式 | boolean | false  |\n| strong    | 是否加粗       | boolean | false  |\n| code      | 添加代码样式   | boolean | false  |\n\n### CSS Variables\n\n| 名称                                 | 说明         | 默认值              |\n| :----------------------------------- | :----------- | :------------------ |\n| `--typography-mark-color`            | 标记颜色     | `--color-text1-4`   |\n| `--typography-mark-background-color` | 标记背景颜色 | `--color-warning-2` |\n| `--typography-code-corner`           | 代码圆角尺寸 | `--corner-1`        |\n| `--typography-code-color`            | 代码字体颜色 | `--color-text1-4`   |\n| `--typography-code-background-color` | 代码背景颜色 | `--color-fill1-2`   |\n| `--typography-code-border-color`     | 代码边框颜色 | `--color-line1-1`   |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Typography } from '@alifd/meet';\nconst { H1, H2, H3, H4, H5, H6 } = Typography;\n\n\nconst BadgeDemo = () => {\n  return (\n    <View className=\"badge-demo\">\n      <Text className=\"demo-title\">title</Text>\n      <View className=\"demo-content\">\n        <H1>h1</H1>\n        <H2>h2</H2>\n        <H3>h3</H3>\n        <H4>h4</H4>\n        <H5>h5</H5>\n        <H6>h6</H6>\n      </View>\n\n      <Text className=\"demo-title\">text</Text>\n      <View className=\"demo-content\">\n        <Typography mark>mark</Typography>\n        <Typography code>code</Typography>\n        <Typography underline>underline</Typography>\n        <Typography delete>delete</Typography>\n        <Typography strong>strong</Typography>\n      </View>\n    </View>\n  );\n};\n\nrender(<BadgeDemo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  },
  {
    "name": "Upload",
    "category": "Components",
    "categories": [
      "Components"
    ],
    "title": "上传",
    "importStatement": "import { Upload } from '@alifd/meet';",
    "body": "\n# Upload\n\n用于图片文件上传\n\n API\n\n### Props\n\n| 名称          | 说明                                                                    | 类型                                                | 默认值           |\n| :------------ | :---------------------------------------------------------------------- | :-------------------------------------------------- | :--------------- |\n| action        | 服务端 URL                                                              | string                                              |                  |\n| data          | 额外 FormData                                                           | any \\| (() => any)                                  |                  |\n| headers       | 额外 Header 信息                                                        | any                                                 |                  |\n| name          | 服务端接受文件所使用的的表单名称                                        | string                                              | `file`           |\n| value         | 文件列表                                                                | FileItem[]                                          |                  |\n| defaultValue  | 默认文件列表                                                            | FileItem[]                                          | `[]`             |\n| listType      | 列表显示类型，目前只支持 card                                           | enum                                                | `card`           |\n| formatter     | 格式化服务端返回内容                                                    | (response: any, file: FileItem) => any              |                  |\n| limit         | 最大文件数量                                                            | number                                              | 1                |\n| progressProps | 透传给 Progress 的属性                                                  | ProgressProps                                       |                  |\n| accept        | 接受上传的文件类型                                                      | string                                              | `image/*`        |\n| autoUpload    | 是否自动上传                                                            | boolean                                             | true             |\n| hasRemove     | 是否有移除按钮                                                          | boolean                                             | true             |\n| useDataURL    | 是否使用 dataURL 作为预览，如果不使用，则在上传完成前会显示默认占位图标 | boolean                                             | true             |\n| disabled      | 禁用状态                                                                | boolean                                             | false            |\n| beforeUpload  | 上传前调用，返回 false 会取消上传，返回 UploadOptions 可附加额外选项    | (file: FileItem, options: UploadOptions) => boolean | UploadOptions    | Promise<UploadOptions> |\n| onChange      | 文件状态改变时调用                                                      | (info: FileItem[]) => void                          |                  |\n| onError       | 上传失败调用                                                            | (file: FileItem, value: FileItem[]) => void         |                  |\n| onProgress    | 上传开始时调用                                                          | () => void                                          |                  |\n| onPreview     | 点击单个图片执行预览的回调                                              | （file）=> void                                     |                  |\n| onRemove      | 点击移除按钮时调用。如果返回 false、Promise.reject()，则不移除文件      | (file: FileItem) => boolean                         | Promise<boolean> |  |\n| onSelect      | 选择完文件后调用                                                        | () => void                                          |                  |\n| onSuccess     | 上传成功调用                                                            | (file: FileItem, value: FileItem[]) => void         |                  |\n| afterSelect   | 选择完文件调用，返回 false 会移除该文件                                 | (file: FileItem) => boolean                         |                  |\n\n### FileItem\n\n| 名称     | 说明           | 类型                                           | 默认值 |\n| :------- | :------------- | :--------------------------------------------- | :----- |\n| uid      | 唯一 ID        | string                                         |        |\n| state    | 文件状态       | 'selected' \\| 'uploading' \\| 'done' \\| 'error' |        |\n| response | 服务端响应内容 | any                                            |        |\n| file     | 文件内容       | object                                         |        |\n| imgURL   | 图片地址       | string                                         |        |\n\n### UploadOptions\n\n| 名称   | 说明               | 类型   | 默认值 |\n| :----- | :----------------- | :----- | :----- |\n| action | 服务端 URL         | string |        |\n| data   | 额外 FormData 数据 | any    |        |\n\n### CSS Variables\n\n| 名称                             | 说明             | 默认值                   |\n| :------------------------------- | :--------------- | :----------------------- |\n| `--upload-card-size`             | 卡片大小         | `--s-20`                 |\n| `--upload-card-icon-size`        | 图标大小         | `--p-headline-icon-size` |\n| `--upload-card-font-size`        | 文字大小         | `--p-caption-font-size`  |\n| `--upload-card-small-icon-size`  | 小图标大小       | `--p-subhead-icon-size`  |\n| `--upload-card-spacing`          | 内容间距         | `--box-medium-spacing`   |\n| `--upload-card-remove-size`      | 删除按钮大小     | `--s-4`                  |\n| `--upload-card-remove-icon-size` | 删除按钮图标大小 | `--p-body-1-icon-size`   |\n| `--upload-card-color`            | 默认颜色         | `--color-text1-1`        |\n| `--upload-card-error-color`      | 错误颜色         | `--color-error-3`        |\n| `--upload-card-error-bg`         | 错误背景色       | `--color-error-1`        |\n",
    "demos": [
      {
        "order": 1,
        "jsx": "import { createElement, render, useState, useRef, useEffect, useCallback } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport { Upload, Button } from '@alifd/meet';\n\nconst IMG = 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg';\n\nconst defaultFile = [\n  {\n    uid: '123123',\n    state: 'done',\n    response: {\n      success: true,\n    },\n    url: IMG,\n    file: IMG,\n    imgURL: IMG,\n  },\n];\n\nfunction Demo() {\n  const formatter = (response, file) => {\n    // 随机成功或者失败\n    const isSuccess = Math.random() < 0.5;\n\n    return {\n      success: isSuccess,\n      url: IMG,\n    };\n  };\n\n  const onSuccess = (item, value) => console.log('onSuccess', item);\n  const onError = (item, value) => console.log('onError', item);\n\n  const [value, setValue] = useState(defaultFile);\n\n  return (\n    <View>\n      <Text className=\"demo-title\">基础上传</Text>\n      <View className=\"demo-content\">\n        <Upload\n          action=\"https://httpbin.org/post\"\n          limit={4}\n          formatter={formatter}\n          onSuccess={onSuccess}\n          onError={onError}\n        />\n      </View>\n      <Text className=\"demo-title\">不使用DataURL</Text>\n      <View className=\"demo-content\">\n        <Upload\n          action=\"https://httpbin.org/post\"\n          limit={4}\n          formatter={formatter}\n          useDataURL={false}\n          onSuccess={onSuccess}\n          onError={onError}\n        />\n      </View>\n      <Text className=\"demo-title\">受控模式</Text>\n      <View className=\"demo-content\">\n        <Upload\n          action=\"https://httpbin.org/post\"\n          value={value}\n          limit={4}\n          formatter={formatter}\n          onPreview={(file, { fileList }) => {\n            console.log({\n              file,\n              fileList,\n            });\n          }}\n          onChange={(v) => setValue(v)}\n        />\n        <Button onClick={() => setValue(defaultFile)}>设置值</Button>\n      </View>\n    </View>\n  );\n}\n\nrender(<Demo />, null, { driver: DriverUniversal });\n",
        "css": "",
        "body": ""
      }
    ]
  }
]
